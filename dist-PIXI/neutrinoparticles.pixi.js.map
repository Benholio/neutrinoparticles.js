{"version":3,"sources":["PIXINeutrinoContext.js","PIXINeutrinoEffect.js","PIXINeutrinoEffectModel.js","PIXINeutrinoMaterials.js","PIXINeutrinoRenderBuffers.js"],"names":["PIXINeutrinoContext","renderer","gl","neutrino","NeutrinoParticles","effectsBasePath","texturesBasePath","trimmedExtensionLookupFirst","PIXI","CanvasRenderer","materials","PIXINeutrinoMaterials","path","success","fail","initializeNoise","loadEffect","PIXINeutrinoEffect","effectModel","position","rotation","scale","ctx","effect","set","positionZ","x","y","scaleZ","ready","_onEffectReady","once","dt","update","axisangle2quat_","context","setTransform","draw","setObjectRenderer","emptyRenderer","setup","fillGeometryBuffers","renderBuffers","updateGlBuffers","bind","renderCallIdx","numRenderCalls","renderCall","renderCalls","texIndex","model","renderStyles","renderStyleIndex","textureIndices","bindTexture","textures","materialIndex","switchToNormal","switchToAdd","switchToMultiply","numIndices","startIndex","restart","resetPosition","name","value","setPropertyInAllEmitters","getNumParticles","createCanvas2DInstance","textureDescs","textureImageDescs","PIXINeutrinoRenderBuffers","createWGLInstance","texturesRemap","emit","Container","PIXINeutrinoEffectModel","effectPath","numTexturesToLoadLeft","pixiNeutrinoEffect","_onEffectLoaded","numTextures","length","imageIndex","texturePath","texture","trimmedTexturePath","replace","utils","TextureCache","Texture","fromImage","baseTexture","hasLoaded","_onTextureLoaded","self","index","image","source","ImageDesc","orig","width","height","_initTexturesRemapIfNeeded","remapNeeded","texIdx","realWidth","realHeight","SubRect","DisplayObject","vertexShaderSource","fragmentShaderSource","fragmentShaderMultiplySource","shader","Shader","shaderMultiply","currentShader","attributes","aVertexPosition","aColor","aTextureCoord","slice","_setShader","state","setBlendMode","bindShader","uniforms","uSampler","geometryBuffers","positions","colors","texCoords","maxNumVertices","numVertices","indices","maxNumRenderCalls","texChannels","Float32Array","ArrayBuffer","Uint8Array","texChannel","numComponents","Uint16Array","bindVao","positionBuffer","glCore","GLBuffer","createVertexBuffer","DYNAMIC_DRAW","colorBuffer","texBuffers","buffer","push","indicesBuffer","createIndexBuffer","STATIC_DRAW","vao","createVao","addIndex","addAttribute","positionAttrib","FLOAT","colorAttrib","UNSIGNED_BYTE","texAttrib","vertex","color","rc","Object","assign","upload","DataView","forEach","size","start","TRIANGLES","destroy"],"mappings":"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","file":"neutrinoparticles.pixi.js","sourcesContent":["class PIXINeutrinoContext {\r\n\r\n\tconstructor(renderer) {\r\n\t\tvar gl = renderer.gl;\r\n\t\t\r\n\t\tthis.renderer = renderer;\r\n\t\tthis.neutrino = new NeutrinoParticles();\r\n\t\tthis.effectsBasePath = \"\";\r\n\t\tthis.texturesBasePath = \"\";\r\n\t\tthis.trimmedExtensionLookupFirst = true;\r\n\r\n\t\tif (!(renderer instanceof PIXI.CanvasRenderer)) {\r\n\t\t\tthis.materials = new PIXINeutrinoMaterials(this);\r\n\t\t}\r\n\t}\r\n\r\n\tinitializeNoise(path, success, fail) {\r\n\t\tthis.neutrino.initializeNoise(path, success, fail);\r\n\t}\r\n\r\n\tloadEffect(path, success, fail) {\r\n\t\tthis.neutrino.loadEffect(path, success, fail);\r\n\t}\r\n}\r\n","class PIXINeutrinoEffect extends PIXI.Container {\r\n\r\n\tconstructor(effectModel, position, rotation, scale) {\r\n\t\tsuper();\r\n\r\n\t\tthis.ctx = effectModel.ctx;\r\n\t\tthis.effectModel = effectModel;\r\n\t\tthis.effect = null;\r\n\t\tthis.position.set(position[0], position[1]);\r\n\t\tthis.positionZ = position[2];\r\n\r\n\t\tif (rotation)\r\n\t\t\tthis.rotation = rotation;\r\n\r\n\t\tif (scale) {\r\n\t\t\tthis.scale.x = scale[0];\r\n\t\t\tthis.scale.y = scale[1];\r\n\t\t\tthis.scaleZ = scale[2];\r\n\t\t}\r\n\t\telse\r\n\t\t\tthis.scaleZ = 1;\r\n\r\n\t\tif (effectModel.ready()) {\r\n\t\t\tthis._onEffectReady();\r\n\t\t} else {\r\n\t\t\teffectModel.once('ready', function () {\r\n\t\t\t\tthis._onEffectReady();\r\n\t\t\t}, this);\r\n\t\t}\r\n\t}\r\n\r\n\tready() {\r\n\t\treturn this.effect != null;\r\n\t}\r\n\r\n\tupdate(dt) {\r\n\t\tif (this.effect != null) {\r\n\t\t\tthis.effect.update(dt, [this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ],\r\n\t\t\t\tthis.ctx.neutrino.axisangle2quat_([0, 0, 1], this.rotation % 360));\r\n\t\t}\r\n\t}\r\n\r\n\trenderCanvas(renderer) {\r\n\t\tif (!this.ready())\r\n\t\t\treturn;\r\n\r\n\t\trenderer.context.setTransform(this.scale.x, 0, 0, this.scale.y, 0, 0);\r\n\t\tthis.effect.draw(renderer.context);\r\n\t};\r\n\r\n\trenderWebGL(renderer) {\r\n\t\tif (!this.ready())\r\n\t\t\treturn;\r\n\r\n\t\trenderer.setObjectRenderer(renderer.emptyRenderer);\r\n\r\n\t\tthis.ctx.materials.setup([this.scale.x, this.scale.y]);\r\n\r\n\t\tthis.effect.fillGeometryBuffers([1, 0, 0], [0, -1, 0], [0, 0, -1]);\r\n\r\n\t\tthis.renderBuffers.updateGlBuffers();\r\n\t\tthis.renderBuffers.bind();\r\n\r\n\t\tfor (var renderCallIdx = 0; renderCallIdx < this.renderBuffers.numRenderCalls; ++renderCallIdx) {\r\n\t\t\tvar renderCall = this.renderBuffers.renderCalls[renderCallIdx];\r\n\t\t\tvar texIndex = this.effect.model.renderStyles[renderCall.renderStyleIndex].textureIndices[0];\r\n\r\n\t\t\trenderer.bindTexture(this.effectModel.textures[texIndex], 0, true);\r\n\r\n\t\t\tvar materialIndex = this.effect.model.renderStyles[renderCall.renderStyleIndex].materialIndex;\r\n\t\t\tswitch (this.effect.model.materials[materialIndex]) {\r\n\t\t\t\tdefault: this.ctx.materials.switchToNormal(); break;\r\n\t\t\t\tcase 1: this.ctx.materials.switchToAdd(); break;\r\n\t\t\t\tcase 2: this.ctx.materials.switchToMultiply(); break;\r\n\t\t\t}\r\n\r\n\t\t\tthis.renderBuffers.draw(renderCall.numIndices, renderCall.startIndex * 2)\r\n\t\t}\r\n\t}\r\n\r\n\trestart(position, rotation) {\r\n\t\tif (position) {\r\n\t\t\tthis.position.x = position[0];\r\n\t\t\tthis.position.y = position[1];\r\n\t\t\tthis.positionZ = position[2];\r\n\t\t}\r\n\r\n\t\tif (rotation) {\r\n\t\t\tthis.rotation = rotation;\r\n\t\t}\r\n\r\n\t\tthis.effect.restart([this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ],\r\n\t\t\trotation ? this.ctx.neutrino.axisangle2quat_([0, 0, 1], rotation % 360) : null);\r\n\t}\r\n\r\n\tresetPosition(position, rotation) {\r\n\t\tif (position) {\r\n\t\t\tthis.position.x = position[0];\r\n\t\t\tthis.position.y = position[1];\r\n\t\t\tthis.positionZ = position[2];\r\n\t\t}\r\n\r\n\t\tif (rotation) {\r\n\t\t\tthis.rotation = rotation;\r\n\t\t}\r\n\r\n\t\tthis.effect.resetPosition([this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ],\r\n\t\t\trotation ? this.ctx.neutrino.axisangle2quat_([0, 0, 1], rotation % 360) : null);\r\n\t}\r\n\r\n\tsetPropertyInAllEmitters(name, value) {\r\n\t\tthis.effect.setPropertyInAllEmitters(name, value);\r\n\t}\r\n\r\n\tgetNumParticles() {\r\n\t\treturn this.effect.getNumParticles();\r\n\t}\r\n\r\n\t_onEffectReady() {\r\n\t\tvar position = [this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ];\r\n\t\tvar rotation = this.ctx.neutrino.axisangle2quat_([0, 0, 1], this.rotation % 360);\r\n\r\n\t\tif (this.effectModel.ctx.renderer instanceof PIXI.CanvasRenderer) {\r\n\t\t\tthis.effect = this.effectModel.effectModel.createCanvas2DInstance(position, rotation);\r\n\t\t\tthis.effect.textureDescs = this.effectModel.textureImageDescs;\r\n\t\t} else {\r\n\t\t\tthis.renderBuffers = new PIXINeutrinoRenderBuffers(this.ctx);\r\n\t\t\tthis.effect = this.effectModel.effectModel.createWGLInstance(position, rotation, this.renderBuffers);\r\n\t\t\tthis.effect.texturesRemap = this.effectModel.texturesRemap;\r\n\t\t}\r\n\r\n\t\tthis.emit('ready', this);\r\n\t}\r\n}\r\n","class PIXINeutrinoEffectModel extends PIXI.DisplayObject {\r\n\r\n\tconstructor(context, effectPath) {\r\n\t\tsuper();\r\n\r\n\t\tthis.ctx = context;\r\n\t\tthis.effectPath = effectPath;\r\n\t\tthis.effectModel = null;\r\n\t\tthis.numTexturesToLoadLeft = -1;\r\n\t\tthis.texturesRemap = null;\r\n\r\n\t\tvar pixiNeutrinoEffect = this;\r\n\t\tthis.ctx.neutrino.loadEffect(this.ctx.effectsBasePath + effectPath, function (effectModel) {\r\n\t\t\tpixiNeutrinoEffect._onEffectLoaded(effectModel);\r\n\t\t});\r\n\t}\r\n\r\n\tready() {\r\n\t\treturn this.numTexturesToLoadLeft === 0;\r\n\t}\r\n\r\n\t_onEffectLoaded(effectModel) {\r\n\t\tthis.effectModel = effectModel;\r\n\t\tthis.textures = [];\r\n\t\tthis.textureImageDescs = [];\r\n\t\tvar numTextures = effectModel.textures.length;\r\n\t\tthis.numTexturesToLoadLeft = numTextures;\r\n\r\n\t\tfor (var imageIndex = 0; imageIndex < numTextures; ++imageIndex) {\r\n\t\t\tvar texturePath = effectModel.textures[imageIndex];\r\n\t\t\tvar texture = null;\r\n\t\t\t\r\n\t\t\tif (this.ctx.trimmedExtensionLookupFirst) {\r\n\t\t\t\tvar trimmedTexturePath = texturePath.replace(/\\.[^/.]+$/, \"\"); // https://stackoverflow.com/a/4250408\r\n\t\t\t\ttexture = PIXI.utils.TextureCache[trimmedTexturePath];\r\n\t\t\t}\r\n\r\n\t\t\tif (!texture)\r\n\t\t\t\ttexture = PIXI.utils.TextureCache[texturePath];\r\n\r\n\t\t\tif (!texture)\r\n\t\t\t\ttexture = PIXI.Texture.fromImage(this.ctx.texturesBasePath + texturePath);\r\n\r\n\t\t\tif (texture.baseTexture.hasLoaded) {\r\n\t\t\t\tthis._onTextureLoaded(imageIndex, texture);\r\n\t\t\t} else {\r\n\t\t\t\ttexture.once('update', function (self, imageIndex, texture) {\r\n\t\t\t\t\treturn function () {\r\n\t\t\t\t\t\tself._onTextureLoaded(imageIndex, texture);\r\n\t\t\t\t\t}\r\n\t\t\t\t} (this, imageIndex, texture));\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t_onTextureLoaded(index, texture) {\r\n\t\tthis.textures[index] = texture;\r\n\r\n\t\tthis.numTexturesToLoadLeft--;\r\n\r\n\t\tif (this.ctx.renderer instanceof PIXI.CanvasRenderer) {\r\n\t\t\tvar image = texture.baseTexture.source;\r\n\t\t\tthis.textureImageDescs[index] = new this.ctx.neutrino.ImageDesc(image, texture.orig.x, texture.orig.y,\r\n\t\t\t\ttexture.orig.width, texture.orig.height);\r\n\t\t} else {\r\n\t\t}\r\n\r\n\t\tif (this.numTexturesToLoadLeft === 0) {\r\n\r\n\t\t\tif (this.ctx.renderer instanceof PIXI.CanvasRenderer) {\r\n\r\n\t\t\t} else {\r\n\t\t\t\tthis._initTexturesRemapIfNeeded();\r\n\t\t\t}\r\n\r\n\t\t\tthis.emit('ready', this);\r\n\t\t}\r\n\t}\r\n\r\n\t_initTexturesRemapIfNeeded() {\r\n\t\tvar remapNeeded = false;\r\n\r\n\t\tfor (var texIdx = 0; texIdx < this.textures.length; ++texIdx) {\r\n\t\t\tvar texture = this.textures[texIdx];\r\n\r\n\t\t\tif (texture.orig.x != 0 || texture.orig.y != 0\r\n\t\t\t\t|| texture.orig.width != texture.baseTexture.realWidth\r\n\t\t\t\t|| texture.orig.height != texture.baseTexture.realHeight) {\r\n\t\t\t\tremapNeeded = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.texturesRemap = [];\r\n\t\tif (remapNeeded) {\r\n\t\t\tfor (var texIdx = 0; texIdx < this.textures.length; ++texIdx) {\r\n\t\t\t\tvar texture = this.textures[texIdx];\r\n\r\n\t\t\t\tthis.texturesRemap[texIdx] = new this.ctx.neutrino.SubRect(\r\n\t\t\t\t\ttexture.orig.x / texture.baseTexture.realWidth,\r\n\t\t\t\t\t1.0 - (texture.orig.y + texture.orig.height) / texture.baseTexture.realHeight,\r\n\t\t\t\t\ttexture.orig.width / texture.baseTexture.realWidth,\r\n\t\t\t\t\ttexture.orig.height / texture.baseTexture.realHeight\r\n\t\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","class PIXINeutrinoMaterials {\r\n\r\n\tconstructor(ctx) {\r\n        this.ctx = ctx;\r\n\t\tthis.renderer = ctx.renderer;\r\n\t\tvar gl = this.renderer.gl;\r\n\r\n\t\tvar vertexShaderSource = \"\\\r\n/* NeutrinoParticles Vertex Shader */ \\n\\\r\nattribute vec3 aVertexPosition;\\n\\\r\nattribute vec4 aColor; \\n\\\r\nattribute vec2 aTextureCoord;\\n\\\r\n\\n\\\r\nuniform mat3 projectionMatrix;\\n\\\r\nuniform vec2 scale;\\n\\\r\n\\n\\\r\nvarying vec4 vColor;\\n\\\r\nvarying vec2 vTextureCoord;\\n\\\r\n\\n\\\r\nvoid main(void) {\\n\\\r\n\tgl_Position = vec4((projectionMatrix * vec3(aVertexPosition.xy * scale, 1.0)).xy, 0, 1);\\n\\\r\n\tvColor = vec4(aColor.rgb * aColor.a, aColor.a);\\n\\\r\n\tvTextureCoord = vec2(aTextureCoord.x, 1.0 - aTextureCoord.y);\\n\\\r\n}\";\r\n\r\n\t\tvar fragmentShaderSource = \"\\\r\n/* NeutrinoParticles Fragment Shader (Normal, Add materials) */ \\n\\\r\nprecision mediump float;\\n\\\r\n\\n\\\r\nvarying vec4 vColor;\\n\\\r\nvarying vec2 vTextureCoord;\\n\\\r\n\\n\\\r\nuniform sampler2D uSampler;\\n\\\r\n\\n\\\r\nvoid main(void) {\\n\\\r\n\tgl_FragColor = vColor * texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\\n\\\r\n}\";\r\n\r\n\t\tvar fragmentShaderMultiplySource = \"\\\r\n/* NeutrinoParticles Fragment Shader (Multiply material) */ \\n\\\r\nprecision mediump float;\\n\\\r\n\\n\\\r\nvarying vec4 vColor;\\n\\\r\nvarying vec2 vTextureCoord;\\n\\\r\n\\n\\\r\nuniform sampler2D uSampler;\\n\\\r\n\\n\\\r\nvoid main(void)\\n\\\r\n{\\n\\\r\n\tvec4 texel = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\\n\\\r\n\tvec3 rgb = vColor.rgb * texel.rgb;\\n\\\r\n\tfloat alpha = vColor.a * texel.a;\\n\\\r\n\tgl_FragColor = vec4(mix(vec3(1, 1, 1), rgb, alpha), 1);\\n\\\r\n}\";\r\n\r\n\t\tthis.shader = new PIXI.Shader(gl, vertexShaderSource, fragmentShaderSource);\r\n\t\tthis.shaderMultiply = new PIXI.Shader(gl, vertexShaderSource, fragmentShaderSource);\r\n\t\tthis.currentShader = null;\r\n\t}\r\n\r\n\tshutdown() {\r\n\t}\r\n\r\n\tpositionAttrib() {\r\n\t\treturn this.shader.attributes.aVertexPosition;\r\n\t}\r\n\r\n\tcolorAttrib() {\r\n\t\treturn this.shader.attributes.aColor;\r\n\t}\r\n\r\n\ttexAttrib(index) {\r\n\t\treturn this.shader.attributes.aTextureCoord;\r\n\t}\r\n\r\n\tsetup(scale) {\r\n\t\tthis.scale = scale.slice();\r\n\t\tthis.currentShader = null;\r\n\t}\r\n\r\n\tswitchToNormal() {\r\n\t\tthis._setShader(this.shader);\r\n\t\tthis.renderer.state.setBlendMode(0);\r\n\t}\r\n\r\n\tswitchToAdd() {\r\n\t\tthis._setShader(this.shader);\r\n\t\tthis.renderer.state.setBlendMode(1);\r\n\t}\r\n\r\n\tswitchToMultiply(renderer) {\r\n\t\tthis._setShader(this.shaderMultiply);\r\n\t\tthis.renderer.state.setBlendMode(2);\r\n\t}\r\n\r\n\t_setShader(shader) {\r\n\t\tif (this.currentShader != shader)\r\n\t\t{\r\n\t\t\tthis.renderer.bindShader(shader);\r\n\t\t\tshader.uniforms.uSampler = 0;\r\n\t\t\tshader.uniforms.scale = this.scale;\r\n\r\n\t\t\tthis.currentShader = shader;\r\n\t\t}\r\n\t}\r\n}\r\n","class PIXINeutrinoRenderBuffers {\r\n\tconstructor(context, geometryBuffers) {\r\n\t\tthis.ctx = context;\r\n\t\tthis.gl = this.ctx.renderer.gl;\r\n\r\n\t\tthis.positions = null;\r\n\t\tthis.colors = null;\r\n\t\tthis.texCoords = [];\r\n\t\tthis.maxNumVertices = 0;\r\n\t\tthis.numVertices = 0;\r\n\t\tthis.indices = null;\r\n\r\n\t\tthis.renderCalls = [];\r\n\t\tthis.maxNumRenderCalls = 0;\r\n\t\tthis.numRenderCalls = 0;\r\n\t}\r\n\r\n\tinitialize(maxNumVertices, texChannels, indices, maxNumRenderCalls) {\r\n\t\tvar gl = this.gl;\r\n\r\n\t\tthis.positions = new Float32Array(new ArrayBuffer(4 * maxNumVertices * 3));\r\n\t\tthis.colors = new Uint8Array(new ArrayBuffer(4 * maxNumVertices));\r\n\t\tthis.texCoords = [];\r\n\t\tfor (var texChannel = 0; texChannel < texChannels.length; ++texChannel) {\r\n\t\t\tthis.texCoords[texChannel] = new Float32Array(new ArrayBuffer(4 * maxNumVertices * texChannels[texChannel]));\r\n\t\t\tthis.texCoords[texChannel].numComponents = texChannels[texChannel];\r\n\t\t}\r\n\t\tthis.maxNumVertices = maxNumVertices;\r\n\r\n\t\tthis.indices = new Uint16Array(new ArrayBuffer(2 * indices.length));\r\n\t\tthis.indices.set(indices, 0);\r\n\r\n\t\tthis.maxNumRenderCalls = maxNumRenderCalls;\r\n\r\n        // set null vao to prevent overriding of it's buffers to next ones\r\n\t\tthis.ctx.renderer.bindVao(null);\r\n\r\n\t\tthis.positionBuffer = PIXI.glCore.GLBuffer.createVertexBuffer(gl,\r\n\t\t\t this.positions, gl.DYNAMIC_DRAW);\r\n\r\n\t\tthis.colorBuffer = PIXI.glCore.GLBuffer.createVertexBuffer(gl,\r\n\t\t\tthis.colors, gl.DYNAMIC_DRAW);\r\n\r\n\t\tthis.texBuffers = [];\r\n\t\tfor (var texIndex = 0; texIndex < this.texCoords.length; ++texIndex) {\r\n\t\t\tvar buffer = PIXI.glCore.GLBuffer.createVertexBuffer(gl,\r\n\t\t\t\tthis.texCoords[texIndex], gl.DYNAMIC_DRAW);\r\n\t\t\tthis.texBuffers.push(buffer);\r\n\t\t}\r\n\r\n\t\tthis.indicesBuffer = PIXI.glCore.GLBuffer.createIndexBuffer(gl,\r\n\t\t\tthis.indices, gl.STATIC_DRAW);\r\n\r\n\t\tvar materials = this.ctx.materials;\r\n\r\n\t\tthis.vao = this.ctx.renderer.createVao().addIndex(this.indicesBuffer).\r\n\t\t\taddAttribute(this.positionBuffer, materials.positionAttrib(), gl.FLOAT, false, 0, 0).\r\n\t\t\taddAttribute(this.colorBuffer, materials.colorAttrib(), gl.UNSIGNED_BYTE, true, 0, 0);\r\n\r\n\t\t\tfor (var texIndex = 0; texIndex < this.texCoords.length; ++texIndex) {\r\n\t\t\t\tthis.vao.addAttribute(this.texBuffers[texIndex], materials.texAttrib(texIndex),\r\n\t\t\t\t\tgl.FLOAT, false, 0, 0);\r\n\t\t\t}\r\n\t}\r\n\r\n\tpushVertex(vertex) {\r\n\t\tthis.positions.set(vertex.position, this.numVertices * 3);\r\n\t\tthis.colors.set(vertex.color, this.numVertices * 4);\r\n\r\n\t\tfor (var texIndex = 0; texIndex < vertex.texCoords.length; ++texIndex) {\r\n\t\t\tthis.texCoords[texIndex].set(vertex.texCoords[texIndex],\r\n\t\t\t\tthis.numVertices * this.texCoords[texIndex].numComponents);\r\n\t\t}\r\n\r\n\t\t++this.numVertices;\r\n\t}\r\n\r\n\tpushRenderCall(rc) {\r\n\r\n\t\tif (this.numRenderCalls >= this.renderCalls.length)\r\n\t\t\tthis.renderCalls.push(Object.assign({}, rc));\r\n\t\telse\r\n\t\t\tObject.assign(this.renderCalls[this.numRenderCalls], rc);\r\n\r\n\t\t++this.numRenderCalls;\r\n\t}\r\n\r\n\tcleanup() {\r\n\t\tthis.numVertices = 0;\r\n\t\tthis.numRenderCalls = 0;\r\n\t}\r\n\r\n\tupdateGlBuffers() {\r\n\t\tvar gl = this.gl;\r\n\r\n\t\tthis.positionBuffer.upload(new DataView(this.positions.buffer, 0, \r\n\t\t\t4 * this.numVertices * 3), 0);\r\n\t\tthis.colorBuffer.upload(new DataView(this.colors.buffer, 0, this.numVertices * 4), 0);\r\n\r\n\t\tthis.texBuffers.forEach(function (buffer, index) {\r\n\t\t\tbuffer.upload(new DataView(this.texCoords[index].buffer, 0, \r\n\t\t\t\t4 * this.numVertices * this.texCoords[index].numComponents), 0);\r\n\t\t}, this);\r\n\t}\r\n\r\n\tbind() {\r\n\t\tthis.ctx.renderer.bindVao(this.vao);\r\n\t}\r\n\r\n\tdraw(size, start) {\r\n\t\tvar gl = this.gl;\r\n\t\t\r\n\t\tthis.vao.draw(gl.TRIANGLES, size, start);\r\n\t}\r\n\r\n\tshutdown() {\r\n\t\tthis.positionBuffer.destroy();\r\n\t\tthis.colorBuffer.destroy();\r\n\r\n\t\tthis.texBuffers.forEach(function (buffer) {\r\n\t\t\tbuffer.destroy();\r\n\t\t}, this);\r\n\t}\r\n}\r\n"]}