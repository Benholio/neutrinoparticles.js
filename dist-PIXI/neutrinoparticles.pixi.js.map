{"version":3,"sources":["../src/PIXI/PIXINeutrinoContext.js","../src/PIXI/PIXINeutrinoEffect.js","../src/PIXI/PIXINeutrinoEffectModel.js","../src/PIXI/PIXINeutrinoMaterials.js","../src/PIXI/PIXINeutrinoRenderBuffers.js"],"names":["PIXINeutrinoContext","renderer","gl","neutrino","NeutrinoParticles","effectsBasePath","texturesBasePath","trimmedExtensionLookupFirst","PIXI","CanvasRenderer","materials","PIXINeutrinoMaterials","path","success","fail","initializeNoise","loadEffect","PIXINeutrinoEffect","effectModel","position","rotation","scale","ctx","effect","set","positionZ","x","y","scaleZ","ready","_onEffectReady","once","_updateWorldTransform","dt","update","_scaledPosition","axisangle2quat_","worldRotationDegree","context","setTransform","worldScale","draw","setObjectRenderer","emptyRenderer","setup","fillGeometryBuffers","renderBuffers","updateGlBuffers","bind","renderCallIdx","numRenderCalls","renderCall","renderCalls","texIndex","model","renderStyles","renderStyleIndex","textureIndices","bindTexture","textures","materialIndex","switchToNormal","switchToAdd","switchToMultiply","numIndices","startIndex","restart","resetPosition","name","value","setPropertyInAllEmitters","getNumParticles","worldPosition","localPosition","Point","localXAxis","localYAxis","toGlobal","worldXAxis","worldYAxis","Math","sqrt","_calcWorldRotation","PI","obj","parent","createCanvas2DInstance","textureDescs","textureImageDescs","PIXINeutrinoRenderBuffers","createWGLInstance","texturesRemap","emit","Container","PIXINeutrinoEffectModel","effectPath","numTexturesToLoadLeft","pixiNeutrinoEffect","_onEffectLoaded","numTextures","length","imageIndex","texturePath","texture","trimmedTexturePath","replace","utils","TextureCache","Texture","fromImage","baseTexture","hasLoaded","_onTextureLoaded","self","index","image","source","ImageDesc","orig","width","height","_initTexturesRemapIfNeeded","remapNeeded","texIdx","realWidth","realHeight","SubRect","DisplayObject","vertexShaderSource","fragmentShaderSource","fragmentShaderMultiplySource","shader","Shader","shaderMultiply","currentShader","attributes","aVertexPosition","aColor","aTextureCoord","slice","_setShader","state","setBlendMode","bindShader","uniforms","uSampler","geometryBuffers","positions","colors","texCoords","maxNumVertices","numVertices","indices","maxNumRenderCalls","texChannels","Float32Array","ArrayBuffer","Uint8Array","texChannel","numComponents","Uint16Array","bindVao","positionBuffer","glCore","GLBuffer","createVertexBuffer","DYNAMIC_DRAW","colorBuffer","texBuffers","buffer","push","indicesBuffer","createIndexBuffer","STATIC_DRAW","vao","createVao","addIndex","addAttribute","positionAttrib","FLOAT","colorAttrib","UNSIGNED_BYTE","texAttrib","vertex","color","rc","Object","assign","upload","DataView","forEach","size","start","TRIANGLES","destroy"],"mappings":"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","file":"neutrinoparticles.pixi.js","sourcesContent":["class PIXINeutrinoContext {\n\n\tconstructor(renderer) {\n\t\tvar gl = renderer.gl;\n\t\t\n\t\tthis.renderer = renderer;\n\t\tthis.neutrino = new NeutrinoParticles();\n\t\tthis.effectsBasePath = \"\";\n\t\tthis.texturesBasePath = \"\";\n\t\tthis.trimmedExtensionLookupFirst = true;\n\n\t\tif (!(renderer instanceof PIXI.CanvasRenderer)) {\n\t\t\tthis.materials = new PIXINeutrinoMaterials(this);\n\t\t}\n\t}\n\n\tinitializeNoise(path, success, fail) {\n\t\tthis.neutrino.initializeNoise(path, success, fail);\n\t}\n\n\tloadEffect(path, success, fail) {\n\t\tthis.neutrino.loadEffect(path, success, fail);\n\t}\n}\n","class PIXINeutrinoEffect extends PIXI.Container {\n\n\tconstructor(effectModel, position, rotation, scale) {\n\t\tsuper();\n\n\t\tthis.ctx = effectModel.ctx;\n\t\tthis.effectModel = effectModel;\n\t\tthis.effect = null;\n\t\tif (position)\n\t\t{\n\t\t\tthis.position.set(position[0], position[1]);\n\t\t\tthis.positionZ = position[2];\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthis.position.set(0, 0);\n\t\t\tthis.positionZ = 0;\n\t\t}\n\n\t\tif (rotation)\n\t\t\tthis.rotation = rotation;\n\n\t\tif (scale) {\n\t\t\tthis.scale.x = scale[0];\n\t\t\tthis.scale.y = scale[1];\n\t\t\tthis.scaleZ = scale[2];\n\t\t}\n\t\telse\n\t\t\tthis.scaleZ = 1;\n\n\t\tif (effectModel.ready()) {\n\t\t\tthis._onEffectReady();\n\t\t} else {\n\t\t\teffectModel.once('ready', function () {\n\t\t\t\tthis._onEffectReady();\n\t\t\t}, this);\n\t\t}\n\n\t\tthis._updateWorldTransform();\n\t}\n\n\tready() {\n\t\treturn this.effect != null;\n\t}\n\n\tupdate(dt) {\n\t\tthis._updateWorldTransform();\n\t\t\n\t\tif (this.effect != null) {\n\t\t\tthis.effect.update(dt, this._scaledPosition(),\n\t\t\t\tthis.ctx.neutrino.axisangle2quat_([0, 0, 1], this.worldRotationDegree));\n\t\t}\n\t}\n\n\trenderCanvas(renderer) {\n\t\tif (!this.ready())\n\t\t\treturn;\n\n\t\trenderer.context.setTransform(this.worldScale.x, 0, 0, this.worldScale.y, 0, 0);\n\t\tthis.effect.draw(renderer.context);\n\t};\n\n\trenderWebGL(renderer) {\n\t\tif (!this.ready())\n\t\t\treturn;\n\n\t\trenderer.setObjectRenderer(renderer.emptyRenderer);\n\n\t\tthis.ctx.materials.setup([this.worldScale.x, this.worldScale.y]);\n\n\t\tthis.effect.fillGeometryBuffers([1, 0, 0], [0, -1, 0], [0, 0, -1]);\n\n\t\tthis.renderBuffers.updateGlBuffers();\n\t\tthis.renderBuffers.bind();\n\n\t\tfor (var renderCallIdx = 0; renderCallIdx < this.renderBuffers.numRenderCalls; ++renderCallIdx) {\n\t\t\tvar renderCall = this.renderBuffers.renderCalls[renderCallIdx];\n\t\t\tvar texIndex = this.effect.model.renderStyles[renderCall.renderStyleIndex].textureIndices[0];\n\n\t\t\trenderer.bindTexture(this.effectModel.textures[texIndex], 0, true);\n\n\t\t\tvar materialIndex = this.effect.model.renderStyles[renderCall.renderStyleIndex].materialIndex;\n\t\t\tswitch (this.effect.model.materials[materialIndex]) {\n\t\t\t\tdefault: this.ctx.materials.switchToNormal(); break;\n\t\t\t\tcase 1: this.ctx.materials.switchToAdd(); break;\n\t\t\t\tcase 2: this.ctx.materials.switchToMultiply(); break;\n\t\t\t}\n\n\t\t\tthis.renderBuffers.draw(renderCall.numIndices, renderCall.startIndex);\n\t\t}\n\t}\n\n\trestart(position, rotation) {\n\t\tif (position) {\n\t\t\tthis.position.x = position[0];\n\t\t\tthis.position.y = position[1];\n\t\t\tthis.positionZ = position[2];\n\t\t}\n\n\t\tif (rotation) {\n\t\t\tthis.rotation = rotation;\n\t\t}\n\n\t\tthis._updateWorldTransform();\n\n\t\tthis.effect.restart(this._scaledPosition(),\n\t\t\trotation ? this.ctx.neutrino.axisangle2quat_([0, 0, 1], this.worldRotationDegree) \n\t\t\t: null);\n\t}\n\n\tresetPosition(position, rotation) {\n\t\tif (position) {\n\t\t\tthis.position.x = position[0];\n\t\t\tthis.position.y = position[1];\n\t\t\tthis.positionZ = position[2];\n\t\t}\n\n\t\tif (rotation) {\n\t\t\tthis.rotation = rotation;\n\t\t}\n\n\t\tthis._updateWorldTransform();\n\n\t\tthis.effect.resetPosition(this._scaledPosition(),\n\t\t\trotation ? this.ctx.neutrino.axisangle2quat_([0, 0, 1], this.worldRotationDegree) : null);\n\t}\n\n\tsetPropertyInAllEmitters(name, value) {\n\t\tthis.effect.setPropertyInAllEmitters(name, value);\n\t}\n\n\tgetNumParticles() {\n\t\treturn this.effect.getNumParticles();\n\t}\n\n\t_scaledPosition() {\n\t\treturn [this.worldPosition.x / this.worldScale.x, this.worldPosition.y / \n\t\t\tthis.worldScale.y, this.positionZ / this.scaleZ];\n\t}\n\n\t_updateWorldTransform() {\n\t\tvar localPosition = new PIXI.Point(0, 0);\n\t\tvar localXAxis = new PIXI.Point(1, 0);\n\t\tvar localYAxis = new PIXI.Point(0, 1);\n\n\t\tthis.worldPosition = this.toGlobal(localPosition);\n\t\tvar worldXAxis = this.toGlobal(localXAxis);\n\t\tvar worldYAxis = this.toGlobal(localYAxis);\n\n\t\tworldXAxis.x -= this.worldPosition.x;\n\t\tworldXAxis.y -= this.worldPosition.y;\n\t\tworldYAxis.x -= this.worldPosition.x;\n\t\tworldYAxis.y -= this.worldPosition.y;\n\n\t\tthis.worldScale = {\n\t\t\tx: Math.sqrt(worldXAxis.x * worldXAxis.x + worldXAxis.y * worldXAxis.y),\n\t\t\ty: Math.sqrt(worldYAxis.x * worldYAxis.x + worldYAxis.y * worldYAxis.y),\n\t\t};\n\n\t\tthis.worldRotationDegree = (this._calcWorldRotation(this) / Math.PI * 180) % 360;\n\t}\n\n\t_calcWorldRotation(obj) {\n\t\tif (obj.parent)\n\t\t\treturn obj.rotation + this._calcWorldRotation(obj.parent);\n\t\telse\n\t\t\treturn obj.rotation;\n\t}\n\n\t_onEffectReady() {\n\t\tthis._updateWorldTransform();\n\n\t\tvar position = this._scaledPosition();\n\t\tvar rotation = this.ctx.neutrino.axisangle2quat_([0, 0, 1], this.worldRotationDegree);\n\n\t\tif (this.effectModel.ctx.renderer instanceof PIXI.CanvasRenderer) {\n\t\t\tthis.effect = this.effectModel.effectModel.createCanvas2DInstance(position, rotation);\n\t\t\tthis.effect.textureDescs = this.effectModel.textureImageDescs;\n\t\t} else {\n\t\t\tthis.renderBuffers = new PIXINeutrinoRenderBuffers(this.ctx);\n\t\t\tthis.effect = this.effectModel.effectModel.createWGLInstance(position, rotation, this.renderBuffers);\n\t\t\tthis.effect.texturesRemap = this.effectModel.texturesRemap;\n\t\t}\n\n\t\tthis.emit('ready', this);\n\t}\n}\n","class PIXINeutrinoEffectModel extends PIXI.DisplayObject {\n\n\tconstructor(context, effectPath) {\n\t\tsuper();\n\n\t\tthis.ctx = context;\n\t\tthis.effectPath = effectPath;\n\t\tthis.effectModel = null;\n\t\tthis.numTexturesToLoadLeft = -1;\n\t\tthis.texturesRemap = null;\n\n\t\tvar pixiNeutrinoEffect = this;\n\t\tthis.ctx.neutrino.loadEffect(this.ctx.effectsBasePath + effectPath, function (effectModel) {\n\t\t\tpixiNeutrinoEffect._onEffectLoaded(effectModel);\n\t\t});\n\t}\n\n\tready() {\n\t\treturn this.numTexturesToLoadLeft === 0;\n\t}\n\n\t_onEffectLoaded(effectModel) {\n\t\tthis.effectModel = effectModel;\n\t\tthis.textures = [];\n\t\tthis.textureImageDescs = [];\n\t\tvar numTextures = effectModel.textures.length;\n\t\tthis.numTexturesToLoadLeft = numTextures;\n\n\t\tfor (var imageIndex = 0; imageIndex < numTextures; ++imageIndex) {\n\t\t\tvar texturePath = effectModel.textures[imageIndex];\n\t\t\tvar texture = null;\n\t\t\t\n\t\t\tif (this.ctx.trimmedExtensionLookupFirst) {\n\t\t\t\tvar trimmedTexturePath = texturePath.replace(/\\.[^/.]+$/, \"\"); // https://stackoverflow.com/a/4250408\n\t\t\t\ttexture = PIXI.utils.TextureCache[trimmedTexturePath];\n\t\t\t}\n\n\t\t\tif (!texture)\n\t\t\t\ttexture = PIXI.utils.TextureCache[texturePath];\n\n\t\t\tif (!texture)\n\t\t\t\ttexture = PIXI.Texture.fromImage(this.ctx.texturesBasePath + texturePath);\n\n\t\t\tif (texture.baseTexture.hasLoaded) {\n\t\t\t\tthis._onTextureLoaded(imageIndex, texture);\n\t\t\t} else {\n\t\t\t\ttexture.once('update', function (self, imageIndex, texture) {\n\t\t\t\t\treturn function () {\n\t\t\t\t\t\tself._onTextureLoaded(imageIndex, texture);\n\t\t\t\t\t}\n\t\t\t\t} (this, imageIndex, texture));\n\t\t\t}\n\n\t\t}\n\t}\n\n\t_onTextureLoaded(index, texture) {\n\t\tthis.textures[index] = texture;\n\n\t\tthis.numTexturesToLoadLeft--;\n\n\t\tif (this.ctx.renderer instanceof PIXI.CanvasRenderer) {\n\t\t\tvar image = texture.baseTexture.source;\n\t\t\tthis.textureImageDescs[index] = new this.ctx.neutrino.ImageDesc(image, texture.orig.x, texture.orig.y,\n\t\t\t\ttexture.orig.width, texture.orig.height);\n\t\t} else {\n\t\t}\n\n\t\tif (this.numTexturesToLoadLeft === 0) {\n\n\t\t\tif (this.ctx.renderer instanceof PIXI.CanvasRenderer) {\n\n\t\t\t} else {\n\t\t\t\tthis._initTexturesRemapIfNeeded();\n\t\t\t}\n\n\t\t\tthis.emit('ready', this);\n\t\t}\n\t}\n\n\t_initTexturesRemapIfNeeded() {\n\t\tvar remapNeeded = false;\n\n\t\tfor (var texIdx = 0; texIdx < this.textures.length; ++texIdx) {\n\t\t\tvar texture = this.textures[texIdx];\n\n\t\t\tif (texture.orig.x != 0 || texture.orig.y != 0\n\t\t\t\t|| texture.orig.width != texture.baseTexture.realWidth\n\t\t\t\t|| texture.orig.height != texture.baseTexture.realHeight) {\n\t\t\t\tremapNeeded = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis.texturesRemap = [];\n\t\tif (remapNeeded) {\n\t\t\tfor (var texIdx = 0; texIdx < this.textures.length; ++texIdx) {\n\t\t\t\tvar texture = this.textures[texIdx];\n\n\t\t\t\tthis.texturesRemap[texIdx] = new this.ctx.neutrino.SubRect(\n\t\t\t\t\ttexture.orig.x / texture.baseTexture.realWidth,\n\t\t\t\t\t1.0 - (texture.orig.y + texture.orig.height) / texture.baseTexture.realHeight,\n\t\t\t\t\ttexture.orig.width / texture.baseTexture.realWidth,\n\t\t\t\t\ttexture.orig.height / texture.baseTexture.realHeight\n\t\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n","class PIXINeutrinoMaterials {\n\n\tconstructor(ctx) {\n        this.ctx = ctx;\n\t\tthis.renderer = ctx.renderer;\n\t\tvar gl = this.renderer.gl;\n\n\t\tvar vertexShaderSource = \"\\\n/* NeutrinoParticles Vertex Shader */ \\n\\\nattribute vec3 aVertexPosition;\\n\\\nattribute vec4 aColor; \\n\\\nattribute vec2 aTextureCoord;\\n\\\n\\n\\\nuniform mat3 projectionMatrix;\\n\\\nuniform vec2 scale;\\n\\\n\\n\\\nvarying vec4 vColor;\\n\\\nvarying vec2 vTextureCoord;\\n\\\n\\n\\\nvoid main(void) {\\n\\\n\tgl_Position = vec4((projectionMatrix * vec3(aVertexPosition.xy * scale, 1.0)).xy, 0, 1);\\n\\\n\tvColor = vec4(aColor.rgb * aColor.a, aColor.a);\\n\\\n\tvTextureCoord = vec2(aTextureCoord.x, 1.0 - aTextureCoord.y);\\n\\\n}\";\n\n\t\tvar fragmentShaderSource = \"\\\n/* NeutrinoParticles Fragment Shader (Normal, Add materials) */ \\n\\\nprecision mediump float;\\n\\\n\\n\\\nvarying vec4 vColor;\\n\\\nvarying vec2 vTextureCoord;\\n\\\n\\n\\\nuniform sampler2D uSampler;\\n\\\n\\n\\\nvoid main(void) {\\n\\\n\tgl_FragColor = vColor * texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\\n\\\n}\";\n\n\t\tvar fragmentShaderMultiplySource = \"\\\n/* NeutrinoParticles Fragment Shader (Multiply material) */ \\n\\\nprecision mediump float;\\n\\\n\\n\\\nvarying vec4 vColor;\\n\\\nvarying vec2 vTextureCoord;\\n\\\n\\n\\\nuniform sampler2D uSampler;\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\n\tvec4 texel = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\\n\\\n\tvec3 rgb = vColor.rgb * texel.rgb;\\n\\\n\tfloat alpha = vColor.a * texel.a;\\n\\\n\tgl_FragColor = vec4(mix(vec3(1, 1, 1), rgb, alpha), 1);\\n\\\n}\";\n\n\t\tthis.shader = new PIXI.Shader(gl, vertexShaderSource, fragmentShaderSource);\n\t\tthis.shaderMultiply = new PIXI.Shader(gl, vertexShaderSource, fragmentShaderSource);\n\t\tthis.currentShader = null;\n\t}\n\n\tshutdown() {\n\t}\n\n\tpositionAttrib() {\n\t\treturn this.shader.attributes.aVertexPosition;\n\t}\n\n\tcolorAttrib() {\n\t\treturn this.shader.attributes.aColor;\n\t}\n\n\ttexAttrib(index) {\n\t\treturn this.shader.attributes.aTextureCoord;\n\t}\n\n\tsetup(scale) {\n\t\tthis.scale = scale.slice();\n\t\tthis.currentShader = null;\n\t}\n\n\tswitchToNormal() {\n\t\tthis._setShader(this.shader);\n\t\tthis.renderer.state.setBlendMode(0);\n\t}\n\n\tswitchToAdd() {\n\t\tthis._setShader(this.shader);\n\t\tthis.renderer.state.setBlendMode(1);\n\t}\n\n\tswitchToMultiply(renderer) {\n\t\tthis._setShader(this.shaderMultiply);\n\t\tthis.renderer.state.setBlendMode(2);\n\t}\n\n\t_setShader(shader) {\n\t\tif (this.currentShader != shader)\n\t\t{\n\t\t\tthis.renderer.bindShader(shader);\n\t\t\tshader.uniforms.uSampler = 0;\n\t\t\tshader.uniforms.scale = this.scale;\n\n\t\t\tthis.currentShader = shader;\n\t\t}\n\t}\n}\n","class PIXINeutrinoRenderBuffers {\n\tconstructor(context, geometryBuffers) {\n\t\tthis.ctx = context;\n\t\tthis.gl = this.ctx.renderer.gl;\n\n\t\tthis.positions = null;\n\t\tthis.colors = null;\n\t\tthis.texCoords = [];\n\t\tthis.maxNumVertices = 0;\n\t\tthis.numVertices = 0;\n\t\tthis.indices = null;\n\n\t\tthis.renderCalls = [];\n\t\tthis.maxNumRenderCalls = 0;\n\t\tthis.numRenderCalls = 0;\n\t}\n\n\tinitialize(maxNumVertices, texChannels, indices, maxNumRenderCalls) {\n\t\tvar gl = this.gl;\n\n\t\tthis.positions = new Float32Array(new ArrayBuffer(4 * maxNumVertices * 3));\n\t\tthis.colors = new Uint8Array(new ArrayBuffer(4 * maxNumVertices));\n\t\tthis.texCoords = [];\n\t\tfor (var texChannel = 0; texChannel < texChannels.length; ++texChannel) {\n\t\t\tthis.texCoords[texChannel] = new Float32Array(new ArrayBuffer(4 * maxNumVertices * texChannels[texChannel]));\n\t\t\tthis.texCoords[texChannel].numComponents = texChannels[texChannel];\n\t\t}\n\t\tthis.maxNumVertices = maxNumVertices;\n\n\t\tthis.indices = new Uint16Array(new ArrayBuffer(2 * indices.length));\n\t\tthis.indices.set(indices, 0);\n\n\t\tthis.maxNumRenderCalls = maxNumRenderCalls;\n\n        // set null vao to prevent overriding of it's buffers to next ones\n\t\tthis.ctx.renderer.bindVao(null);\n\n\t\tthis.positionBuffer = PIXI.glCore.GLBuffer.createVertexBuffer(gl,\n\t\t\t this.positions, gl.DYNAMIC_DRAW);\n\n\t\tthis.colorBuffer = PIXI.glCore.GLBuffer.createVertexBuffer(gl,\n\t\t\tthis.colors, gl.DYNAMIC_DRAW);\n\n\t\tthis.texBuffers = [];\n\t\tfor (var texIndex = 0; texIndex < this.texCoords.length; ++texIndex) {\n\t\t\tvar buffer = PIXI.glCore.GLBuffer.createVertexBuffer(gl,\n\t\t\t\tthis.texCoords[texIndex], gl.DYNAMIC_DRAW);\n\t\t\tthis.texBuffers.push(buffer);\n\t\t}\n\n\t\tthis.indicesBuffer = PIXI.glCore.GLBuffer.createIndexBuffer(gl,\n\t\t\tthis.indices, gl.STATIC_DRAW);\n\n\t\tvar materials = this.ctx.materials;\n\n\t\tthis.vao = this.ctx.renderer.createVao().addIndex(this.indicesBuffer).\n\t\t\taddAttribute(this.positionBuffer, materials.positionAttrib(), gl.FLOAT, false, 0, 0).\n\t\t\taddAttribute(this.colorBuffer, materials.colorAttrib(), gl.UNSIGNED_BYTE, true, 0, 0);\n\n\t\t\tfor (var texIndex = 0; texIndex < this.texCoords.length; ++texIndex) {\n\t\t\t\tthis.vao.addAttribute(this.texBuffers[texIndex], materials.texAttrib(texIndex),\n\t\t\t\t\tgl.FLOAT, false, 0, 0);\n\t\t\t}\n\t}\n\n\tpushVertex(vertex) {\n\t\tthis.positions.set(vertex.position, this.numVertices * 3);\n\t\tthis.colors.set(vertex.color, this.numVertices * 4);\n\n\t\tfor (var texIndex = 0; texIndex < vertex.texCoords.length; ++texIndex) {\n\t\t\tthis.texCoords[texIndex].set(vertex.texCoords[texIndex],\n\t\t\t\tthis.numVertices * this.texCoords[texIndex].numComponents);\n\t\t}\n\n\t\t++this.numVertices;\n\t}\n\n\tpushRenderCall(rc) {\n\n\t\tif (this.numRenderCalls >= this.renderCalls.length)\n\t\t\tthis.renderCalls.push(Object.assign({}, rc));\n\t\telse\n\t\t\tObject.assign(this.renderCalls[this.numRenderCalls], rc);\n\n\t\t++this.numRenderCalls;\n\t}\n\n\tcleanup() {\n\t\tthis.numVertices = 0;\n\t\tthis.numRenderCalls = 0;\n\t}\n\n\tupdateGlBuffers() {\n\t\tvar gl = this.gl;\n\n\t\tif (this.numVertices > 0)\n\t\t{\n\t\t\tthis.positionBuffer.upload(new DataView(this.positions.buffer, 0, \n\t\t\t\t4 * this.numVertices * 3), 0);\n\t\t\tthis.colorBuffer.upload(new DataView(this.colors.buffer, 0, this.numVertices * 4), 0);\n\n\t\t\tthis.texBuffers.forEach(function (buffer, index) {\n\t\t\t\tbuffer.upload(new DataView(this.texCoords[index].buffer, 0, \n\t\t\t\t\t4 * this.numVertices * this.texCoords[index].numComponents), 0);\n\t\t\t}, this);\n\t\t}\n\t}\n\n\tbind() {\n\t\tthis.ctx.renderer.bindVao(this.vao);\n\t}\n\n\tdraw(size, start) {\n\t\tvar gl = this.gl;\n\t\t\n\t\tthis.vao.draw(gl.TRIANGLES, size, start);\n\t}\n\n\tshutdown() {\n\t\tthis.positionBuffer.destroy();\n\t\tthis.colorBuffer.destroy();\n\n\t\tthis.texBuffers.forEach(function (buffer) {\n\t\t\tbuffer.destroy();\n\t\t}, this);\n\t}\n}\n"]}