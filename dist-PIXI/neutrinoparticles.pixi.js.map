{"version":3,"sources":["PIXINeutrinoContext.js","PIXINeutrinoEffect.js","PIXINeutrinoEffectModel.js","PIXINeutrinoMaterials.js","PIXINeutrinoRenderBuffers.js"],"names":["PIXINeutrinoContext","renderer","gl","neutrino","NeutrinoParticles","effectsBasePath","texturesBasePath","trimmedExtensionLookupFirst","PIXI","CanvasRenderer","materials","PIXINeutrinoMaterials","path","success","fail","initializeNoise","loadEffect","PIXINeutrinoEffect","effectModel","position","rotation","scale","ctx","effect","set","positionZ","x","y","scaleZ","ready","_onEffectReady","once","dt","update","axisangle2quat_","context","setTransform","draw","setObjectRenderer","emptyRenderer","bindVao","state","resetAttributes","push","setState","defaultState","_activeShader","target","_activeRenderTarget","setup","projectionMatrix","toArray","fillGeometryBuffers","renderBuffers","updateGlBuffers","bind","renderCallIdx","numRenderCalls","renderCall","renderCalls","texIndex","model","renderStyles","renderStyleIndex","textureIndices","bindTexture","textures","materialIndex","switchToNormal","switchToAdd","switchToMultiply","drawElements","TRIANGLES","numIndices","UNSIGNED_SHORT","startIndex","pop","restart","resetPosition","name","value","setPropertyInAllEmitters","getNumParticles","createCanvas2DInstance","textureDescs","textureImageDescs","PIXINeutrinoRenderBuffers","createWGLInstance","texturesRemap","emit","Container","PIXINeutrinoEffectModel","effectPath","numTexturesToLoadLeft","pixiNeutrinoEffect","_onEffectLoaded","numTextures","length","imageIndex","texturePath","texture","trimmedTexturePath","replace","utils","TextureCache","Texture","fromImage","baseTexture","hasLoaded","_onTextureLoaded","self","index","image","source","ImageDesc","orig","width","height","_initTexturesRemapIfNeeded","remapNeeded","texIdx","realWidth","realHeight","SubRect","DisplayObject","vertexShaderSource","fragmentShaderSource","fragmentShaderMultiplySource","shaderProgram","_makeShaderProgram","shaderProgramMultiply","pMatrix","currentProgram","vertexPositionAttribute","colorAttribute","textureCoordAttribute","slice","_setProgram","setBlendMode","program","useProgram","uniformMatrix3fv","pMatrixUniform","uniform1i","samplerUniform","uniform2f","scaleUniform","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getAttribLocation","getUniformLocation","geometryBuffers","positions","colors","texCoords","maxNumVertices","numVertices","indices","maxNumRenderCalls","texChannels","Float32Array","ArrayBuffer","Uint8Array","texChannel","numComponents","Uint16Array","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","colorBuffer","texBuffers","buffer","indicesBuffer","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","vertex","color","rc","Object","assign","bufferSubData","forEach","enableVertexAttribArray","positionAttribLocation","vertexAttribPointer","FLOAT","colorAttribLocation","UNSIGNED_BYTE","texAttribLocation","deleteBuffer"],"mappings":";;;;;;;;;;IAAAA,mB;AAEA,8BAAAC,QAAA,EAAA;AAAA;;AACA,MAAAC,KAAAD,SAAAC,EAAA;;AAEA,OAAAD,QAAA,GAAAA,QAAA;AACA,OAAAE,QAAA,GAAA,IAAAC,iBAAA,EAAA;AACA,OAAAC,eAAA,GAAA,EAAA;AACA,OAAAC,gBAAA,GAAA,EAAA;AACA,OAAAC,2BAAA,GAAA,IAAA;;AAEA,MAAA,EAAAN,oBAAAO,KAAAC,cAAA,CAAA,EAAA;AACA,QAAAC,SAAA,GAAA,IAAAC,qBAAA,CAAAT,EAAA,CAAA;AACA;AACA;;;;kCAEAU,I,EAAAC,O,EAAAC,I,EAAA;AACA,QAAAX,QAAA,CAAAY,eAAA,CAAAH,IAAA,EAAAC,OAAA,EAAAC,IAAA;AACA;;;6BAEAF,I,EAAAC,O,EAAAC,I,EAAA;AACA,QAAAX,QAAA,CAAAa,UAAA,CAAAJ,IAAA,EAAAC,OAAA,EAAAC,IAAA;AACA;;;;;;ICtBAG,kB;;;AAEA,6BAAAC,WAAA,EAAAC,QAAA,EAAAC,QAAA,EAAAC,KAAA,EAAA;AAAA;;AAAA;;AAGA,QAAAC,GAAA,GAAAJ,YAAAI,GAAA;AACA,QAAAJ,WAAA,GAAAA,WAAA;AACA,QAAAK,MAAA,GAAA,IAAA;AACA,QAAAJ,QAAA,CAAAK,GAAA,CAAAL,SAAA,CAAA,CAAA,EAAAA,SAAA,CAAA,CAAA;AACA,QAAAM,SAAA,GAAAN,SAAA,CAAA,CAAA;;AAEA,MAAAC,QAAA,EACA,MAAAA,QAAA,GAAAA,QAAA;;AAEA,MAAAC,KAAA,EAAA;AACA,SAAAA,KAAA,CAAAK,CAAA,GAAAL,MAAA,CAAA,CAAA;AACA,SAAAA,KAAA,CAAAM,CAAA,GAAAN,MAAA,CAAA,CAAA;AACA,SAAAO,MAAA,GAAAP,MAAA,CAAA,CAAA;AACA,GAJA,MAMA,MAAAO,MAAA,GAAA,CAAA;;AAEA,MAAAV,YAAAW,KAAA,EAAA,EAAA;AACA,SAAAC,cAAA;AACA,GAFA,MAEA;AACAZ,eAAAa,IAAA,CAAA,OAAA,EAAA,YAAA;AACA,SAAAD,cAAA;AACA,IAFA;AAGA;AA1BA;AA2BA;;;;0BAEA;AACA,UAAA,KAAAP,MAAA,IAAA,IAAA;AACA;;;yBAEAS,E,EAAA;AACA,OAAA,KAAAT,MAAA,IAAA,IAAA,EAAA;AACA,SAAAA,MAAA,CAAAU,MAAA,CAAAD,EAAA,EAAA,CAAA,KAAAb,QAAA,CAAAO,CAAA,GAAA,KAAAL,KAAA,CAAAK,CAAA,EAAA,KAAAP,QAAA,CAAAQ,CAAA,GAAA,KAAAN,KAAA,CAAAM,CAAA,EAAA,KAAAF,SAAA,GAAA,KAAAG,MAAA,CAAA,EACA,KAAAN,GAAA,CAAAnB,QAAA,CAAA+B,eAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,KAAAd,QAAA,GAAA,GAAA,CADA;AAEA;AACA;;;+BAEAnB,Q,EAAA;AACA,OAAA,CAAA,KAAA4B,KAAA,EAAA,EACA;;AAEA5B,YAAAkC,OAAA,CAAAC,YAAA,CAAA,KAAAf,KAAA,CAAAK,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAAL,KAAA,CAAAM,CAAA,EAAA,CAAA,EAAA,CAAA;AACA,QAAAJ,MAAA,CAAAc,IAAA,CAAApC,SAAAkC,OAAA;AACA;;;8BAEAlC,Q,EAAA;AACA,OAAA,CAAA,KAAA4B,KAAA,EAAA,EACA;;AAEA,OAAA3B,KAAAD,SAAAC,EAAA;;AAEAD,YAAAqC,iBAAA,CAAArC,SAAAsC,aAAA;AACAtC,YAAAuC,OAAA,CAAA,IAAA;AACAvC,YAAAwC,KAAA,CAAAC,eAAA;;AAEAzC,YAAAwC,KAAA,CAAAE,IAAA;AACA1C,YAAAwC,KAAA,CAAAG,QAAA,CAAA3C,SAAAwC,KAAA,CAAAI,YAAA;;AAEA;AACA5C,YAAA6C,aAAA,GAAA,IAAA;;AAEA,OAAAC,SAAA9C,SAAA+C,mBAAA;;AAEA,QAAA1B,GAAA,CAAAZ,SAAA,CAAAuC,KAAA,CAAAF,OAAAG,gBAAA,CAAAC,OAAA,CAAA,IAAA,CAAA,EAAA,CAAA,KAAA9B,KAAA,CAAAK,CAAA,EAAA,KAAAL,KAAA,CAAAM,CAAA,CAAA;;AAEA,QAAAJ,MAAA,CAAA6B,mBAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA;;AAEA,QAAAC,aAAA,CAAAC,eAAA;AACA,QAAAD,aAAA,CAAAE,IAAA;;AAEA,QAAA,IAAAC,gBAAA,CAAA,EAAAA,gBAAA,KAAAH,aAAA,CAAAI,cAAA,EAAA,EAAAD,aAAA,EAAA;AACA,QAAAE,aAAA,KAAAL,aAAA,CAAAM,WAAA,CAAAH,aAAA,CAAA;AACA,QAAAI,WAAA,KAAArC,MAAA,CAAAsC,KAAA,CAAAC,YAAA,CAAAJ,WAAAK,gBAAA,EAAAC,cAAA,CAAA,CAAA,CAAA;;AAEA/D,aAAAgE,WAAA,CAAA,KAAA/C,WAAA,CAAAgD,QAAA,CAAAN,QAAA,CAAA,EAAA,CAAA,EAAA,IAAA;;AAEA,QAAAO,gBAAA,KAAA5C,MAAA,CAAAsC,KAAA,CAAAC,YAAA,CAAAJ,WAAAK,gBAAA,EAAAI,aAAA;AACA,YAAA,KAAA5C,MAAA,CAAAsC,KAAA,CAAAnD,SAAA,CAAAyD,aAAA,CAAA;AACA;AAAA,WAAA7C,GAAA,CAAAZ,SAAA,CAAA0D,cAAA,CAAAnE,QAAA,EAAA;AACA,UAAA,CAAA;AAAA,WAAAqB,GAAA,CAAAZ,SAAA,CAAA2D,WAAA,CAAApE,QAAA,EAAA;AACA,UAAA,CAAA;AAAA,WAAAqB,GAAA,CAAAZ,SAAA,CAAA4D,gBAAA,CAAArE,QAAA,EAAA;AAHA;;AAMAC,OAAAqE,YAAA,CAAArE,GAAAsE,SAAA,EAAAd,WAAAe,UAAA,EAAAvE,GAAAwE,cAAA,EAAAhB,WAAAiB,UAAA,GAAA,CAAA;AACA;;AAEA1E,YAAAwC,KAAA,CAAAmC,GAAA;AACA;;;0BAEAzD,Q,EAAAC,Q,EAAA;AACA,OAAAD,QAAA,EAAA;AACA,SAAAA,QAAA,CAAAO,CAAA,GAAAP,SAAA,CAAA,CAAA;AACA,SAAAA,QAAA,CAAAQ,CAAA,GAAAR,SAAA,CAAA,CAAA;AACA,SAAAM,SAAA,GAAAN,SAAA,CAAA,CAAA;AACA;;AAEA,OAAAC,QAAA,EAAA;AACA,SAAAA,QAAA,GAAAA,QAAA;AACA;;AAEA,QAAAG,MAAA,CAAAsD,OAAA,CAAA,CAAA,KAAA1D,QAAA,CAAAO,CAAA,GAAA,KAAAL,KAAA,CAAAK,CAAA,EAAA,KAAAP,QAAA,CAAAQ,CAAA,GAAA,KAAAN,KAAA,CAAAM,CAAA,EAAA,KAAAF,SAAA,GAAA,KAAAG,MAAA,CAAA,EACAR,WAAA,KAAAE,GAAA,CAAAnB,QAAA,CAAA+B,eAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAAd,WAAA,GAAA,CAAA,GAAA,IADA;AAEA;;;gCAEAD,Q,EAAAC,Q,EAAA;AACA,OAAAD,QAAA,EAAA;AACA,SAAAA,QAAA,CAAAO,CAAA,GAAAP,SAAA,CAAA,CAAA;AACA,SAAAA,QAAA,CAAAQ,CAAA,GAAAR,SAAA,CAAA,CAAA;AACA,SAAAM,SAAA,GAAAN,SAAA,CAAA,CAAA;AACA;;AAEA,OAAAC,QAAA,EAAA;AACA,SAAAA,QAAA,GAAAA,QAAA;AACA;;AAEA,QAAAG,MAAA,CAAAuD,aAAA,CAAA,CAAA,KAAA3D,QAAA,CAAAO,CAAA,GAAA,KAAAL,KAAA,CAAAK,CAAA,EAAA,KAAAP,QAAA,CAAAQ,CAAA,GAAA,KAAAN,KAAA,CAAAM,CAAA,EAAA,KAAAF,SAAA,GAAA,KAAAG,MAAA,CAAA,EACAR,WAAA,KAAAE,GAAA,CAAAnB,QAAA,CAAA+B,eAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAAd,WAAA,GAAA,CAAA,GAAA,IADA;AAEA;;;2CAEA2D,I,EAAAC,K,EAAA;AACA,QAAAzD,MAAA,CAAA0D,wBAAA,CAAAF,IAAA,EAAAC,KAAA;AACA;;;oCAEA;AACA,UAAA,KAAAzD,MAAA,CAAA2D,eAAA,EAAA;AACA;;;mCAEA;AACA,OAAA/D,WAAA,CAAA,KAAAA,QAAA,CAAAO,CAAA,GAAA,KAAAL,KAAA,CAAAK,CAAA,EAAA,KAAAP,QAAA,CAAAQ,CAAA,GAAA,KAAAN,KAAA,CAAAM,CAAA,EAAA,KAAAF,SAAA,GAAA,KAAAG,MAAA,CAAA;AACA,OAAAR,WAAA,KAAAE,GAAA,CAAAnB,QAAA,CAAA+B,eAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,KAAAd,QAAA,GAAA,GAAA,CAAA;;AAEA,OAAA,KAAAF,WAAA,CAAAI,GAAA,CAAArB,QAAA,YAAAO,KAAAC,cAAA,EAAA;AACA,SAAAc,MAAA,GAAA,KAAAL,WAAA,CAAAA,WAAA,CAAAiE,sBAAA,CAAAhE,QAAA,EAAAC,QAAA,CAAA;AACA,SAAAG,MAAA,CAAA6D,YAAA,GAAA,KAAAlE,WAAA,CAAAmE,iBAAA;AACA,IAHA,MAGA;AACA,SAAAhC,aAAA,GAAA,IAAAiC,yBAAA,CAAA,KAAAhE,GAAA,CAAA;AACA,SAAAC,MAAA,GAAA,KAAAL,WAAA,CAAAA,WAAA,CAAAqE,iBAAA,CAAApE,QAAA,EAAAC,QAAA,EAAA,KAAAiC,aAAA,CAAA;AACA,SAAA9B,MAAA,CAAAiE,aAAA,GAAA,KAAAtE,WAAA,CAAAsE,aAAA;AACA;;AAEA,QAAAC,IAAA,CAAA,OAAA,EAAA,IAAA;AACA;;;;EAlJAjF,KAAAkF,S;;ICAAC,uB;;;AAEA,kCAAAxD,OAAA,EAAAyD,UAAA,EAAA;AAAA;;AAAA;;AAGA,SAAAtE,GAAA,GAAAa,OAAA;AACA,SAAAyD,UAAA,GAAAA,UAAA;AACA,SAAA1E,WAAA,GAAA,IAAA;AACA,SAAA2E,qBAAA,GAAA,CAAA,CAAA;AACA,SAAAL,aAAA,GAAA,IAAA;;AAEA,MAAAM,2BAAA;AACA,SAAAxE,GAAA,CAAAnB,QAAA,CAAAa,UAAA,CAAA,OAAAM,GAAA,CAAAjB,eAAA,GAAAuF,UAAA,EAAA,UAAA1E,WAAA,EAAA;AACA4E,sBAAAC,eAAA,CAAA7E,WAAA;AACA,GAFA;AAVA;AAaA;;;;0BAEA;AACA,UAAA,KAAA2E,qBAAA,KAAA,CAAA;AACA;;;kCAEA3E,W,EAAA;AACA,QAAAA,WAAA,GAAAA,WAAA;AACA,QAAAgD,QAAA,GAAA,EAAA;AACA,QAAAmB,iBAAA,GAAA,EAAA;AACA,OAAAW,cAAA9E,YAAAgD,QAAA,CAAA+B,MAAA;AACA,QAAAJ,qBAAA,GAAAG,WAAA;;AAEA,QAAA,IAAAE,aAAA,CAAA,EAAAA,aAAAF,WAAA,EAAA,EAAAE,UAAA,EAAA;AACA,QAAAC,cAAAjF,YAAAgD,QAAA,CAAAgC,UAAA,CAAA;AACA,QAAAE,UAAA,IAAA;;AAEA,QAAA,KAAA9E,GAAA,CAAAf,2BAAA,EAAA;AACA,SAAA8F,qBAAAF,YAAAG,OAAA,CAAA,WAAA,EAAA,EAAA,CAAA,CADA,CACA;AACAF,eAAA5F,KAAA+F,KAAA,CAAAC,YAAA,CAAAH,kBAAA,CAAA;AACA;;AAEA,QAAA,CAAAD,OAAA,EACAA,UAAA5F,KAAA+F,KAAA,CAAAC,YAAA,CAAAL,WAAA,CAAA;;AAEA,QAAA,CAAAC,OAAA,EACAA,UAAA5F,KAAAiG,OAAA,CAAAC,SAAA,CAAA,KAAApF,GAAA,CAAAhB,gBAAA,GAAA6F,WAAA,CAAA;;AAEA,QAAAC,QAAAO,WAAA,CAAAC,SAAA,EAAA;AACA,UAAAC,gBAAA,CAAAX,UAAA,EAAAE,OAAA;AACA,KAFA,MAEA;AACAA,aAAArE,IAAA,CAAA,QAAA,EAAA,UAAA+E,IAAA,EAAAZ,UAAA,EAAAE,OAAA,EAAA;AACA,aAAA,YAAA;AACAU,YAAAD,gBAAA,CAAAX,UAAA,EAAAE,OAAA;AACA,OAFA;AAGA,MAJA,CAIA,IAJA,EAIAF,UAJA,EAIAE,OAJA,CAAA;AAKA;AAEA;AACA;;;mCAEAW,K,EAAAX,O,EAAA;AACA,QAAAlC,QAAA,CAAA6C,KAAA,IAAAX,OAAA;;AAEA,QAAAP,qBAAA;;AAEA,OAAA,KAAAvE,GAAA,CAAArB,QAAA,YAAAO,KAAAC,cAAA,EAAA;AACA,QAAAuG,QAAAZ,QAAAO,WAAA,CAAAM,MAAA;AACA,SAAA5B,iBAAA,CAAA0B,KAAA,IAAA,IAAA,KAAAzF,GAAA,CAAAnB,QAAA,CAAA+G,SAAA,CAAAF,KAAA,EAAAZ,QAAAe,IAAA,CAAAzF,CAAA,EAAA0E,QAAAe,IAAA,CAAAxF,CAAA,EACAyE,QAAAe,IAAA,CAAAC,KADA,EACAhB,QAAAe,IAAA,CAAAE,MADA,CAAA;AAEA,IAJA,MAIA,CACA;;AAEA,OAAA,KAAAxB,qBAAA,KAAA,CAAA,EAAA;;AAEA,QAAA,KAAAvE,GAAA,CAAArB,QAAA,YAAAO,KAAAC,cAAA,EAAA,CAEA,CAFA,MAEA;AACA,UAAA6G,0BAAA;AACA;;AAEA,SAAA7B,IAAA,CAAA,OAAA,EAAA,IAAA;AACA;AACA;;;+CAEA;AACA,OAAA8B,cAAA,KAAA;;AAEA,QAAA,IAAAC,SAAA,CAAA,EAAAA,SAAA,KAAAtD,QAAA,CAAA+B,MAAA,EAAA,EAAAuB,MAAA,EAAA;AACA,QAAApB,UAAA,KAAAlC,QAAA,CAAAsD,MAAA,CAAA;;AAEA,QAAApB,QAAAe,IAAA,CAAAzF,CAAA,IAAA,CAAA,IAAA0E,QAAAe,IAAA,CAAAxF,CAAA,IAAA,CAAA,IACAyE,QAAAe,IAAA,CAAAC,KAAA,IAAAhB,QAAAO,WAAA,CAAAc,SADA,IAEArB,QAAAe,IAAA,CAAAE,MAAA,IAAAjB,QAAAO,WAAA,CAAAe,UAFA,EAEA;AACAH,mBAAA,IAAA;AACA;AACA;AACA;;AAEA,QAAA/B,aAAA,GAAA,EAAA;AACA,OAAA+B,WAAA,EAAA;AACA,SAAA,IAAAC,SAAA,CAAA,EAAAA,SAAA,KAAAtD,QAAA,CAAA+B,MAAA,EAAA,EAAAuB,MAAA,EAAA;AACA,SAAApB,UAAA,KAAAlC,QAAA,CAAAsD,MAAA,CAAA;;AAEA,UAAAhC,aAAA,CAAAgC,MAAA,IAAA,IAAA,KAAAlG,GAAA,CAAAnB,QAAA,CAAAwH,OAAA,CACAvB,QAAAe,IAAA,CAAAzF,CAAA,GAAA0E,QAAAO,WAAA,CAAAc,SADA,EAEA,MAAA,CAAArB,QAAAe,IAAA,CAAAxF,CAAA,GAAAyE,QAAAe,IAAA,CAAAE,MAAA,IAAAjB,QAAAO,WAAA,CAAAe,UAFA,EAGAtB,QAAAe,IAAA,CAAAC,KAAA,GAAAhB,QAAAO,WAAA,CAAAc,SAHA,EAIArB,QAAAe,IAAA,CAAAE,MAAA,GAAAjB,QAAAO,WAAA,CAAAe,UAJA,CAAA;AAMA;AACA;AACA;;;;EA3GAlH,KAAAoH,a;;ICAAjH,qB;AAEA,gCAAAT,EAAA,EAAA;AAAA;;AACA,OAAAA,EAAA,GAAAA,EAAA;;AAEA,MAAA2H,qBAAA;;;;;;;;;;;;;;;;EAAA;;AAkBA,MAAAC,uBAAA;;;;;;;;;;;EAAA;;AAaA,MAAAC,+BAAA;;;;;;;;;;;;;;;EAAA;;AAiBA,OAAAC,aAAA,GAAA,KAAAC,kBAAA,CAAAJ,kBAAA,EAAAC,oBAAA,CAAA;AACA,OAAAI,qBAAA,GAAA,KAAAD,kBAAA,CAAAJ,kBAAA,EAAAE,4BAAA,CAAA;;AAEA,OAAAI,OAAA,GAAA,IAAA;AACA,OAAAC,cAAA,GAAA,IAAA;AACA;;;;6BAEA,CACA;;;2CAEA;AACA,UAAA,KAAAJ,aAAA,CAAAK,uBAAA;AACA;;;wCAEA;AACA,UAAA,KAAAL,aAAA,CAAAM,cAAA;AACA;;;oCAEAvB,K,EAAA;AACA,UAAA,KAAAiB,aAAA,CAAAO,qBAAA,CAAAxB,KAAA,CAAA;AACA;;;wBAEAoB,O,EAAA9G,K,EAAA;AACA,OAAAnB,KAAA,KAAAA,EAAA;;AAEA,QAAAiI,OAAA,GAAAA,OAAA;AACA,QAAA9G,KAAA,GAAAA,MAAAmH,KAAA,EAAA;AACA,QAAAJ,cAAA,GAAA,IAAA;AACA;;;iCAEAnI,Q,EAAA;AACA,OAAAC,KAAA,KAAAA,EAAA;;AAEA,QAAAuI,WAAA,CAAA,KAAAT,aAAA;AACA/H,YAAAwC,KAAA,CAAAiG,YAAA,CAAA,CAAA;AACA;;;8BAEAzI,Q,EAAA;AACA,OAAAC,KAAA,KAAAA,EAAA;;AAEA,QAAAuI,WAAA,CAAA,KAAAT,aAAA;AACA/H,YAAAwC,KAAA,CAAAiG,YAAA,CAAA,CAAA;AACA;;;mCAEAzI,Q,EAAA;AACA,OAAAC,KAAA,KAAAA,EAAA;;AAEA,QAAAuI,WAAA,CAAA,KAAAP,qBAAA;AACAjI,YAAAwC,KAAA,CAAAiG,YAAA,CAAA,CAAA;AACA;;;8BAEAC,O,EAAA;AACA,OAAAzI,KAAA,KAAAA,EAAA;;AAEA,OAAAyI,WAAA,KAAAP,cAAA,EAAA;AACAlI,OAAA0I,UAAA,CAAAD,OAAA;AACAzI,OAAA2I,gBAAA,CAAAF,QAAAG,cAAA,EAAA,KAAA,EAAA,KAAAX,OAAA;AACAjI,OAAA6I,SAAA,CAAAJ,QAAAK,cAAA,EAAA,CAAA;AACA9I,OAAA+I,SAAA,CAAAN,QAAAO,YAAA,EAAA,KAAA7H,KAAA,CAAA,CAAA,CAAA,EAAA,KAAAA,KAAA,CAAA,CAAA,CAAA;;AAEA,SAAA+G,cAAA,GAAAO,OAAA;AACA;AACA;;;qCAEAd,kB,EAAAC,oB,EAAA;AACA,OAAA5H,KAAA,KAAAA,EAAA;;AAEA,OAAAiJ,eAAAjJ,GAAAkJ,YAAA,CAAAlJ,GAAAmJ,aAAA,CAAA;AACAnJ,MAAAoJ,YAAA,CAAAH,YAAA,EAAAtB,kBAAA;AACA3H,MAAAqJ,aAAA,CAAAJ,YAAA;;AAEA,OAAA,CAAAjJ,GAAAsJ,kBAAA,CAAAL,YAAA,EAAAjJ,GAAAuJ,cAAA,CAAA,EAAA;AACAC,UAAAxJ,GAAAyJ,gBAAA,CAAAR,YAAA,CAAA;AACA,WAAA,IAAA;AACA;;AAEA,OAAAS,iBAAA1J,GAAAkJ,YAAA,CAAAlJ,GAAA2J,eAAA,CAAA;AACA3J,MAAAoJ,YAAA,CAAAM,cAAA,EAAA9B,oBAAA;AACA5H,MAAAqJ,aAAA,CAAAK,cAAA;;AAEA,OAAA,CAAA1J,GAAAsJ,kBAAA,CAAAI,cAAA,EAAA1J,GAAAuJ,cAAA,CAAA,EAAA;AACAC,UAAAxJ,GAAAyJ,gBAAA,CAAAC,cAAA,CAAA;AACA,WAAA,IAAA;AACA;;AAEA,OAAA5B,gBAAA9H,GAAA4J,aAAA,EAAA;AACA5J,MAAA6J,YAAA,CAAA/B,aAAA,EAAAmB,YAAA;AACAjJ,MAAA6J,YAAA,CAAA/B,aAAA,EAAA4B,cAAA;AACA1J,MAAA8J,WAAA,CAAAhC,aAAA;;AAEA,OAAA,CAAA9H,GAAA+J,mBAAA,CAAAjC,aAAA,EAAA9H,GAAAgK,WAAA,CAAA,EAAA;AACAR,UAAA,8BAAA;AACA;;AAEAxJ,MAAA0I,UAAA,CAAAZ,aAAA;;AAEAA,iBAAAK,uBAAA,GAAAnI,GAAAiK,iBAAA,CAAAnC,aAAA,EAAA,iBAAA,CAAA;AACAA,iBAAAM,cAAA,GAAApI,GAAAiK,iBAAA,CAAAnC,aAAA,EAAA,QAAA,CAAA;AACAA,iBAAAO,qBAAA,GAAA,CAAArI,GAAAiK,iBAAA,CAAAnC,aAAA,EAAA,eAAA,CAAA,CAAA;;AAEAA,iBAAAc,cAAA,GAAA5I,GAAAkK,kBAAA,CAAApC,aAAA,EAAA,kBAAA,CAAA;AACAA,iBAAAgB,cAAA,GAAA9I,GAAAkK,kBAAA,CAAApC,aAAA,EAAA,UAAA,CAAA;AACAA,iBAAAkB,YAAA,GAAAhJ,GAAAkK,kBAAA,CAAApC,aAAA,EAAA,OAAA,CAAA;;AAEA,UAAAA,aAAA;AACA;;;;;;IC9JA1C,yB;AACA,oCAAAnD,OAAA,EAAAkI,eAAA,EAAA;AAAA;;AACA,OAAA/I,GAAA,GAAAa,OAAA;AACA,OAAAjC,EAAA,GAAA,KAAAoB,GAAA,CAAArB,QAAA,CAAAC,EAAA;;AAEA,OAAAoK,SAAA,GAAA,IAAA;AACA,OAAAC,MAAA,GAAA,IAAA;AACA,OAAAC,SAAA,GAAA,EAAA;AACA,OAAAC,cAAA,GAAA,CAAA;AACA,OAAAC,WAAA,GAAA,CAAA;AACA,OAAAC,OAAA,GAAA,IAAA;;AAEA,OAAAhH,WAAA,GAAA,EAAA;AACA,OAAAiH,iBAAA,GAAA,CAAA;AACA,OAAAnH,cAAA,GAAA,CAAA;AACA;;;;6BAEAgH,c,EAAAI,W,EAAAF,O,EAAAC,iB,EAAA;AACA,OAAA1K,KAAA,KAAAA,EAAA;;AAEA,QAAAoK,SAAA,GAAA,IAAAQ,YAAA,CAAA,IAAAC,WAAA,CAAA,IAAAN,cAAA,GAAA,CAAA,CAAA,CAAA;AACA,QAAAF,MAAA,GAAA,IAAAS,UAAA,CAAA,IAAAD,WAAA,CAAA,IAAAN,cAAA,CAAA,CAAA;AACA,QAAAD,SAAA,GAAA,EAAA;AACA,QAAA,IAAAS,aAAA,CAAA,EAAAA,aAAAJ,YAAA5E,MAAA,EAAA,EAAAgF,UAAA,EAAA;AACA,SAAAT,SAAA,CAAAS,UAAA,IAAA,IAAAH,YAAA,CAAA,IAAAC,WAAA,CAAA,IAAAN,cAAA,GAAAI,YAAAI,UAAA,CAAA,CAAA,CAAA;AACA,SAAAT,SAAA,CAAAS,UAAA,EAAAC,aAAA,GAAAL,YAAAI,UAAA,CAAA;AACA;AACA,QAAAR,cAAA,GAAAA,cAAA;;AAEA,QAAAE,OAAA,GAAA,IAAAQ,WAAA,CAAA,IAAAJ,WAAA,CAAA,IAAAJ,QAAA1E,MAAA,CAAA,CAAA;AACA,QAAA0E,OAAA,CAAAnJ,GAAA,CAAAmJ,OAAA,EAAA,CAAA;;AAEA,QAAAC,iBAAA,GAAAA,iBAAA;;AAEA,QAAAQ,cAAA,GAAAlL,GAAAmL,YAAA,EAAA;AACAnL,MAAAoL,UAAA,CAAApL,GAAAqL,YAAA,EAAA,KAAAH,cAAA;AACAlL,MAAAsL,UAAA,CAAAtL,GAAAqL,YAAA,EAAA,KAAAjB,SAAA,EAAApK,GAAAuL,YAAA;;AAEA,QAAAC,WAAA,GAAAxL,GAAAmL,YAAA,EAAA;AACAnL,MAAAoL,UAAA,CAAApL,GAAAqL,YAAA,EAAA,KAAAG,WAAA;AACAxL,MAAAsL,UAAA,CAAAtL,GAAAqL,YAAA,EAAA,KAAAhB,MAAA,EAAArK,GAAAuL,YAAA;;AAEA,QAAAE,UAAA,GAAA,EAAA;AACA,QAAA,IAAA/H,WAAA,CAAA,EAAAA,WAAA,KAAA4G,SAAA,CAAAvE,MAAA,EAAA,EAAArC,QAAA,EAAA;AACA,QAAAgI,SAAA1L,GAAAmL,YAAA,EAAA;AACAnL,OAAAoL,UAAA,CAAApL,GAAAqL,YAAA,EAAAK,MAAA;AACA1L,OAAAsL,UAAA,CAAAtL,GAAAqL,YAAA,EAAA,KAAAf,SAAA,CAAA5G,QAAA,CAAA,EAAA1D,GAAAuL,YAAA;AACA,SAAAE,UAAA,CAAAhJ,IAAA,CAAAiJ,MAAA;AACA;;AAEA,QAAAC,aAAA,GAAA3L,GAAAmL,YAAA,EAAA;AACAnL,MAAAoL,UAAA,CAAApL,GAAA4L,oBAAA,EAAA,KAAAD,aAAA;AACA3L,MAAAsL,UAAA,CAAAtL,GAAA4L,oBAAA,EAAA,KAAAnB,OAAA,EAAAzK,GAAA6L,WAAA;AACA;;;6BAEAC,M,EAAA;AACA,QAAA1B,SAAA,CAAA9I,GAAA,CAAAwK,OAAA7K,QAAA,EAAA,KAAAuJ,WAAA,GAAA,CAAA;AACA,QAAAH,MAAA,CAAA/I,GAAA,CAAAwK,OAAAC,KAAA,EAAA,KAAAvB,WAAA,GAAA,CAAA;;AAEA,QAAA,IAAA9G,WAAA,CAAA,EAAAA,WAAAoI,OAAAxB,SAAA,CAAAvE,MAAA,EAAA,EAAArC,QAAA,EAAA;AACA,SAAA4G,SAAA,CAAA5G,QAAA,EAAApC,GAAA,CAAAwK,OAAAxB,SAAA,CAAA5G,QAAA,CAAA,EACA,KAAA8G,WAAA,GAAA,KAAAF,SAAA,CAAA5G,QAAA,EAAAsH,aADA;AAEA;;AAEA,KAAA,KAAAR,WAAA;AACA;;;iCAEAwB,E,EAAA;;AAEA,OAAA,KAAAzI,cAAA,IAAA,KAAAE,WAAA,CAAAsC,MAAA,EACA,KAAAtC,WAAA,CAAAhB,IAAA,CAAAwJ,OAAAC,MAAA,CAAA,EAAA,EAAAF,EAAA,CAAA,EADA,KAGAC,OAAAC,MAAA,CAAA,KAAAzI,WAAA,CAAA,KAAAF,cAAA,CAAA,EAAAyI,EAAA;;AAEA,KAAA,KAAAzI,cAAA;AACA;;;4BAEA;AACA,QAAAiH,WAAA,GAAA,CAAA;AACA,QAAAjH,cAAA,GAAA,CAAA;AACA;;;oCAEA;AACA,OAAAvD,KAAA,KAAAA,EAAA;;AAEAA,MAAAoL,UAAA,CAAApL,GAAAqL,YAAA,EAAA,KAAAH,cAAA;AACAlL,MAAAmM,aAAA,CAAAnM,GAAAqL,YAAA,EAAA,CAAA,EAAA,KAAAjB,SAAA,EAAA,CAAA,EAAA,KAAAI,WAAA,GAAA,CAAA;;AAEAxK,MAAAoL,UAAA,CAAApL,GAAAqL,YAAA,EAAA,KAAAG,WAAA;AACAxL,MAAAmM,aAAA,CAAAnM,GAAAqL,YAAA,EAAA,CAAA,EAAA,KAAAhB,MAAA,EAAA,CAAA,EAAA,KAAAG,WAAA,GAAA,CAAA;;AAEA,QAAAiB,UAAA,CAAAW,OAAA,CAAA,UAAAV,MAAA,EAAA7E,KAAA,EAAA;AACA7G,OAAAoL,UAAA,CAAApL,GAAAqL,YAAA,EAAAK,MAAA;AACA1L,OAAAmM,aAAA,CAAAnM,GAAAqL,YAAA,EAAA,CAAA,EAAA,KAAAf,SAAA,CAAAzD,KAAA,CAAA,EAAA,CAAA,EAAA,KAAA2D,WAAA,GACA,KAAAF,SAAA,CAAAzD,KAAA,EAAAmE,aADA;AAEA,IAJA,EAIA,IAJA;AAKA;;;yBAEA;AACA,OAAAhL,KAAA,KAAAA,EAAA;AACA,OAAAQ,YAAA,KAAAY,GAAA,CAAAZ,SAAA;;AAEA;AACAR,OAAAoL,UAAA,CAAApL,GAAAqL,YAAA,EAAA,KAAAH,cAAA;;AAEAlL,OAAAqM,uBAAA,CAAA7L,UAAA8L,sBAAA,EAAA;AACAtM,OAAAuM,mBAAA,CAAA/L,UAAA8L,sBAAA,EAAA,EAAA,CAAA,EAAAtM,GAAAwM,KAAA,EAAA,KAAA,EAAA,CAAA,EAAA,CAAA;AACA;;AAEA;AACAxM,OAAAoL,UAAA,CAAApL,GAAAqL,YAAA,EAAA,KAAAG,WAAA;;AAEAxL,OAAAqM,uBAAA,CAAA7L,UAAAiM,mBAAA,EAAA;AACAzM,OAAAuM,mBAAA,CAAA/L,UAAAiM,mBAAA,EAAA,EAAA,CAAA,EAAAzM,GAAA0M,aAAA,EAAA,IAAA,EAAA,CAAA,EAAA,CAAA;AACA;;AAEA,QAAAjB,UAAA,CAAAW,OAAA,CAAA,UAAAV,MAAA,EAAA7E,KAAA,EAAA;;AAEA7G,OAAAoL,UAAA,CAAApL,GAAAqL,YAAA,EAAAK,MAAA;;AAEA1L,OAAAqM,uBAAA,CAAA7L,UAAAmM,iBAAA,CAAA9F,KAAA,CAAA;AACA7G,OAAAuM,mBAAA,CAAA/L,UAAAmM,iBAAA,CAAA9F,KAAA,CAAA,EACA,KAAAyD,SAAA,CAAAzD,KAAA,EAAAmE,aADA,EACAhL,GAAAwM,KADA,EACA,KADA,EACA,CADA,EACA,CADA;AAGA,IARA,EAQA,IARA;;AAUAxM,MAAAoL,UAAA,CAAApL,GAAA4L,oBAAA,EAAA,KAAAD,aAAA;AACA;;;6BAEA;AACA,OAAA3L,KAAA,KAAAA,EAAA;;AAEAA,MAAA4M,YAAA,CAAA,KAAA1B,cAAA;AACAlL,MAAA4M,YAAA,CAAA,KAAApB,WAAA;;AAEA,QAAAC,UAAA,CAAAW,OAAA,CAAA,UAAAV,MAAA,EAAA;AACA1L,OAAA4M,YAAA,CAAAlB,MAAA;AACA,IAFA,EAEA,IAFA;AAGA","file":"neutrinoparticles.pixi.js","sourcesContent":["class PIXINeutrinoContext {\r\n\r\n\tconstructor(renderer) {\r\n\t\tvar gl = renderer.gl;\r\n\t\t\r\n\t\tthis.renderer = renderer;\r\n\t\tthis.neutrino = new NeutrinoParticles();\r\n\t\tthis.effectsBasePath = \"\";\r\n\t\tthis.texturesBasePath = \"\";\r\n\t\tthis.trimmedExtensionLookupFirst = true;\r\n\r\n\t\tif (!(renderer instanceof PIXI.CanvasRenderer)) {\r\n\t\t\tthis.materials = new PIXINeutrinoMaterials(gl);\r\n\t\t}\r\n\t}\r\n\r\n\tinitializeNoise(path, success, fail) {\r\n\t\tthis.neutrino.initializeNoise(path, success, fail);\r\n\t}\r\n\r\n\tloadEffect(path, success, fail) {\r\n\t\tthis.neutrino.loadEffect(path, success, fail);\r\n\t}\r\n}\r\n","class PIXINeutrinoEffect extends PIXI.Container {\r\n\r\n\tconstructor(effectModel, position, rotation, scale) {\r\n\t\tsuper();\r\n\r\n\t\tthis.ctx = effectModel.ctx;\r\n\t\tthis.effectModel = effectModel;\r\n\t\tthis.effect = null;\r\n\t\tthis.position.set(position[0], position[1]);\r\n\t\tthis.positionZ = position[2];\r\n\r\n\t\tif (rotation)\r\n\t\t\tthis.rotation = rotation;\r\n\r\n\t\tif (scale) {\r\n\t\t\tthis.scale.x = scale[0];\r\n\t\t\tthis.scale.y = scale[1];\r\n\t\t\tthis.scaleZ = scale[2];\r\n\t\t}\r\n\t\telse\r\n\t\t\tthis.scaleZ = 1;\r\n\r\n\t\tif (effectModel.ready()) {\r\n\t\t\tthis._onEffectReady();\r\n\t\t} else {\r\n\t\t\teffectModel.once('ready', function () {\r\n\t\t\t\tthis._onEffectReady();\r\n\t\t\t}, this);\r\n\t\t}\r\n\t}\r\n\r\n\tready() {\r\n\t\treturn this.effect != null;\r\n\t}\r\n\r\n\tupdate(dt) {\r\n\t\tif (this.effect != null) {\r\n\t\t\tthis.effect.update(dt, [this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ],\r\n\t\t\t\tthis.ctx.neutrino.axisangle2quat_([0, 0, 1], this.rotation % 360));\r\n\t\t}\r\n\t}\r\n\r\n\trenderCanvas(renderer) {\r\n\t\tif (!this.ready())\r\n\t\t\treturn;\r\n\r\n\t\trenderer.context.setTransform(this.scale.x, 0, 0, this.scale.y, 0, 0);\r\n\t\tthis.effect.draw(renderer.context);\r\n\t};\r\n\r\n\trenderWebGL(renderer) {\r\n\t\tif (!this.ready())\r\n\t\t\treturn;\r\n\r\n\t\tvar gl = renderer.gl;\r\n\r\n\t\trenderer.setObjectRenderer(renderer.emptyRenderer);\r\n\t\trenderer.bindVao(null);\r\n\t\trenderer.state.resetAttributes();\r\n\r\n\t\trenderer.state.push();\r\n\t\trenderer.state.setState(renderer.state.defaultState);\r\n\t\t\r\n\t\t// hack! the only way to discard current shader for futher engine rendering\r\n\t\trenderer._activeShader = null;\r\n\r\n\t\tvar target = renderer._activeRenderTarget;\r\n\r\n\t\tthis.ctx.materials.setup(target.projectionMatrix.toArray(true), [this.scale.x, this.scale.y]);\r\n\r\n\t\tthis.effect.fillGeometryBuffers([1, 0, 0], [0, -1, 0], [0, 0, -1]);\r\n\r\n\t\tthis.renderBuffers.updateGlBuffers();\r\n\t\tthis.renderBuffers.bind();\r\n\r\n\t\tfor (var renderCallIdx = 0; renderCallIdx < this.renderBuffers.numRenderCalls; ++renderCallIdx) {\r\n\t\t\tvar renderCall = this.renderBuffers.renderCalls[renderCallIdx];\r\n\t\t\tvar texIndex = this.effect.model.renderStyles[renderCall.renderStyleIndex].textureIndices[0];\r\n\r\n\t\t\trenderer.bindTexture(this.effectModel.textures[texIndex], 0, true);\r\n\r\n\t\t\tvar materialIndex = this.effect.model.renderStyles[renderCall.renderStyleIndex].materialIndex;\r\n\t\t\tswitch (this.effect.model.materials[materialIndex]) {\r\n\t\t\t\tdefault: this.ctx.materials.switchToNormal(renderer); break;\r\n\t\t\t\tcase 1: this.ctx.materials.switchToAdd(renderer); break;\r\n\t\t\t\tcase 2: this.ctx.materials.switchToMultiply(renderer); break;\r\n\t\t\t}\r\n\r\n\t\t\tgl.drawElements(gl.TRIANGLES, renderCall.numIndices, gl.UNSIGNED_SHORT, renderCall.startIndex * 2);\r\n\t\t}\r\n\r\n\t\trenderer.state.pop();\r\n\t}\r\n\r\n\trestart(position, rotation) {\r\n\t\tif (position) {\r\n\t\t\tthis.position.x = position[0];\r\n\t\t\tthis.position.y = position[1];\r\n\t\t\tthis.positionZ = position[2];\r\n\t\t}\r\n\r\n\t\tif (rotation) {\r\n\t\t\tthis.rotation = rotation;\r\n\t\t}\r\n\r\n\t\tthis.effect.restart([this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ],\r\n\t\t\trotation ? this.ctx.neutrino.axisangle2quat_([0, 0, 1], rotation % 360) : null);\r\n\t}\r\n\r\n\tresetPosition(position, rotation) {\r\n\t\tif (position) {\r\n\t\t\tthis.position.x = position[0];\r\n\t\t\tthis.position.y = position[1];\r\n\t\t\tthis.positionZ = position[2];\r\n\t\t}\r\n\r\n\t\tif (rotation) {\r\n\t\t\tthis.rotation = rotation;\r\n\t\t}\r\n\r\n\t\tthis.effect.resetPosition([this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ],\r\n\t\t\trotation ? this.ctx.neutrino.axisangle2quat_([0, 0, 1], rotation % 360) : null);\r\n\t}\r\n\r\n\tsetPropertyInAllEmitters(name, value) {\r\n\t\tthis.effect.setPropertyInAllEmitters(name, value);\r\n\t}\r\n\r\n\tgetNumParticles() {\r\n\t\treturn this.effect.getNumParticles();\r\n\t}\r\n\r\n\t_onEffectReady() {\r\n\t\tvar position = [this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ];\r\n\t\tvar rotation = this.ctx.neutrino.axisangle2quat_([0, 0, 1], this.rotation % 360);\r\n\r\n\t\tif (this.effectModel.ctx.renderer instanceof PIXI.CanvasRenderer) {\r\n\t\t\tthis.effect = this.effectModel.effectModel.createCanvas2DInstance(position, rotation);\r\n\t\t\tthis.effect.textureDescs = this.effectModel.textureImageDescs;\r\n\t\t} else {\r\n\t\t\tthis.renderBuffers = new PIXINeutrinoRenderBuffers(this.ctx);\r\n\t\t\tthis.effect = this.effectModel.effectModel.createWGLInstance(position, rotation, this.renderBuffers);\r\n\t\t\tthis.effect.texturesRemap = this.effectModel.texturesRemap;\r\n\t\t}\r\n\r\n\t\tthis.emit('ready', this);\r\n\t}\r\n}\r\n","class PIXINeutrinoEffectModel extends PIXI.DisplayObject {\r\n\r\n\tconstructor(context, effectPath) {\r\n\t\tsuper();\r\n\r\n\t\tthis.ctx = context;\r\n\t\tthis.effectPath = effectPath;\r\n\t\tthis.effectModel = null;\r\n\t\tthis.numTexturesToLoadLeft = -1;\r\n\t\tthis.texturesRemap = null;\r\n\r\n\t\tvar pixiNeutrinoEffect = this;\r\n\t\tthis.ctx.neutrino.loadEffect(this.ctx.effectsBasePath + effectPath, function (effectModel) {\r\n\t\t\tpixiNeutrinoEffect._onEffectLoaded(effectModel);\r\n\t\t});\r\n\t}\r\n\r\n\tready() {\r\n\t\treturn this.numTexturesToLoadLeft === 0;\r\n\t}\r\n\r\n\t_onEffectLoaded(effectModel) {\r\n\t\tthis.effectModel = effectModel;\r\n\t\tthis.textures = [];\r\n\t\tthis.textureImageDescs = [];\r\n\t\tvar numTextures = effectModel.textures.length;\r\n\t\tthis.numTexturesToLoadLeft = numTextures;\r\n\r\n\t\tfor (var imageIndex = 0; imageIndex < numTextures; ++imageIndex) {\r\n\t\t\tvar texturePath = effectModel.textures[imageIndex];\r\n\t\t\tvar texture = null;\r\n\t\t\t\r\n\t\t\tif (this.ctx.trimmedExtensionLookupFirst) {\r\n\t\t\t\tvar trimmedTexturePath = texturePath.replace(/\\.[^/.]+$/, \"\"); // https://stackoverflow.com/a/4250408\r\n\t\t\t\ttexture = PIXI.utils.TextureCache[trimmedTexturePath];\r\n\t\t\t}\r\n\r\n\t\t\tif (!texture)\r\n\t\t\t\ttexture = PIXI.utils.TextureCache[texturePath];\r\n\r\n\t\t\tif (!texture)\r\n\t\t\t\ttexture = PIXI.Texture.fromImage(this.ctx.texturesBasePath + texturePath);\r\n\r\n\t\t\tif (texture.baseTexture.hasLoaded) {\r\n\t\t\t\tthis._onTextureLoaded(imageIndex, texture);\r\n\t\t\t} else {\r\n\t\t\t\ttexture.once('update', function (self, imageIndex, texture) {\r\n\t\t\t\t\treturn function () {\r\n\t\t\t\t\t\tself._onTextureLoaded(imageIndex, texture);\r\n\t\t\t\t\t}\r\n\t\t\t\t} (this, imageIndex, texture));\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t_onTextureLoaded(index, texture) {\r\n\t\tthis.textures[index] = texture;\r\n\r\n\t\tthis.numTexturesToLoadLeft--;\r\n\r\n\t\tif (this.ctx.renderer instanceof PIXI.CanvasRenderer) {\r\n\t\t\tvar image = texture.baseTexture.source;\r\n\t\t\tthis.textureImageDescs[index] = new this.ctx.neutrino.ImageDesc(image, texture.orig.x, texture.orig.y,\r\n\t\t\t\ttexture.orig.width, texture.orig.height);\r\n\t\t} else {\r\n\t\t}\r\n\r\n\t\tif (this.numTexturesToLoadLeft === 0) {\r\n\r\n\t\t\tif (this.ctx.renderer instanceof PIXI.CanvasRenderer) {\r\n\r\n\t\t\t} else {\r\n\t\t\t\tthis._initTexturesRemapIfNeeded();\r\n\t\t\t}\r\n\r\n\t\t\tthis.emit('ready', this);\r\n\t\t}\r\n\t}\r\n\r\n\t_initTexturesRemapIfNeeded() {\r\n\t\tvar remapNeeded = false;\r\n\r\n\t\tfor (var texIdx = 0; texIdx < this.textures.length; ++texIdx) {\r\n\t\t\tvar texture = this.textures[texIdx];\r\n\r\n\t\t\tif (texture.orig.x != 0 || texture.orig.y != 0\r\n\t\t\t\t|| texture.orig.width != texture.baseTexture.realWidth\r\n\t\t\t\t|| texture.orig.height != texture.baseTexture.realHeight) {\r\n\t\t\t\tremapNeeded = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.texturesRemap = [];\r\n\t\tif (remapNeeded) {\r\n\t\t\tfor (var texIdx = 0; texIdx < this.textures.length; ++texIdx) {\r\n\t\t\t\tvar texture = this.textures[texIdx];\r\n\r\n\t\t\t\tthis.texturesRemap[texIdx] = new this.ctx.neutrino.SubRect(\r\n\t\t\t\t\ttexture.orig.x / texture.baseTexture.realWidth,\r\n\t\t\t\t\t1.0 - (texture.orig.y + texture.orig.height) / texture.baseTexture.realHeight,\r\n\t\t\t\t\ttexture.orig.width / texture.baseTexture.realWidth,\r\n\t\t\t\t\ttexture.orig.height / texture.baseTexture.realHeight\r\n\t\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","class PIXINeutrinoMaterials {\r\n\r\n\tconstructor(gl) {\r\n\t\tthis.gl = gl;\r\n\r\n\t\tvar vertexShaderSource = \"\\\r\n/* NeutrinoParticles Vertex Shader */ \\n\\\r\nattribute vec3 aVertexPosition;\\n\\\r\nattribute vec4 aColor; \\n\\\r\nattribute vec2 aTextureCoord;\\n\\\r\n\\n\\\r\nuniform mat3 projectionMatrix;\\n\\\r\nuniform vec2 scale;\\n\\\r\n\\n\\\r\nvarying vec4 vColor;\\n\\\r\nvarying vec2 vTextureCoord;\\n\\\r\n\\n\\\r\nvoid main(void) {\\n\\\r\n\tgl_Position = vec4((projectionMatrix * vec3(aVertexPosition.xy * scale, 1.0)).xy, 0, 1);\\n\\\r\n\tvColor = vec4(aColor.rgb * aColor.a, aColor.a);\\n\\\r\n\tvTextureCoord = vec2(aTextureCoord.x, 1.0 - aTextureCoord.y);\\n\\\r\n}\";\r\n\r\n\t\tvar fragmentShaderSource = \"\\\r\n/* NeutrinoParticles Fragment Shader (Normal, Add materials) */ \\n\\\r\nprecision mediump float;\\n\\\r\n\\n\\\r\nvarying vec4 vColor;\\n\\\r\nvarying vec2 vTextureCoord;\\n\\\r\n\\n\\\r\nuniform sampler2D uSampler;\\n\\\r\n\\n\\\r\nvoid main(void) {\\n\\\r\n\tgl_FragColor = vColor * texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\\n\\\r\n}\";\r\n\r\n\t\tvar fragmentShaderMultiplySource = \"\\\r\n/* NeutrinoParticles Fragment Shader (Multiply material) */ \\n\\\r\nprecision mediump float;\\n\\\r\n\\n\\\r\nvarying vec4 vColor;\\n\\\r\nvarying vec2 vTextureCoord;\\n\\\r\n\\n\\\r\nuniform sampler2D uSampler;\\n\\\r\n\\n\\\r\nvoid main(void)\\n\\\r\n{\\n\\\r\n\tvec4 texel = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\\n\\\r\n\tvec3 rgb = vColor.rgb * texel.rgb;\\n\\\r\n\tfloat alpha = vColor.a * texel.a;\\n\\\r\n\tgl_FragColor = vec4(mix(vec3(1, 1, 1), rgb, alpha), 1);\\n\\\r\n}\";\r\n\r\n\t\tthis.shaderProgram = this._makeShaderProgram(vertexShaderSource, fragmentShaderSource);\r\n\t\tthis.shaderProgramMultiply = this._makeShaderProgram(vertexShaderSource, fragmentShaderMultiplySource);\r\n\r\n\t\tthis.pMatrix = null;\r\n\t\tthis.currentProgram = null;\r\n\t}\r\n\r\n\tshutdown() {\r\n\t}\r\n\r\n\tpositionAttribLocation() {\r\n\t\treturn this.shaderProgram.vertexPositionAttribute;\r\n\t}\r\n\r\n\tcolorAttribLocation() {\r\n\t\treturn this.shaderProgram.colorAttribute;\r\n\t}\r\n\r\n\ttexAttribLocation(index) {\r\n\t\treturn this.shaderProgram.textureCoordAttribute[index];\r\n\t}\r\n\r\n\tsetup(pMatrix, scale) {\r\n\t\tvar gl = this.gl;\r\n\r\n\t\tthis.pMatrix = pMatrix;\r\n\t\tthis.scale = scale.slice();\r\n\t\tthis.currentProgram = null;\r\n\t}\r\n\r\n\tswitchToNormal(renderer) {\r\n\t\tvar gl = this.gl;\r\n\r\n\t\tthis._setProgram(this.shaderProgram);\r\n\t\trenderer.state.setBlendMode(0);\r\n\t}\r\n\r\n\tswitchToAdd(renderer) {\r\n\t\tvar gl = this.gl;\r\n\r\n\t\tthis._setProgram(this.shaderProgram);\r\n\t\trenderer.state.setBlendMode(1);\r\n\t}\r\n\r\n\tswitchToMultiply(renderer) {\r\n\t\tvar gl = this.gl;\r\n\r\n\t\tthis._setProgram(this.shaderProgramMultiply);\r\n\t\trenderer.state.setBlendMode(2);\r\n\t}\r\n\r\n\t_setProgram(program) {\r\n\t\tvar gl = this.gl;\r\n\r\n\t\tif (program != this.currentProgram) {\r\n\t\t\tgl.useProgram(program);\r\n\t\t\tgl.uniformMatrix3fv(program.pMatrixUniform, false, this.pMatrix);\r\n\t\t\tgl.uniform1i(program.samplerUniform, 0);\r\n\t\t\tgl.uniform2f(program.scaleUniform, this.scale[0], this.scale[1]);\r\n\r\n\t\t\tthis.currentProgram = program;\r\n\t\t}\r\n\t}\r\n\r\n\t_makeShaderProgram(vertexShaderSource, fragmentShaderSource) {\r\n\t\tvar gl = this.gl;\r\n\r\n\t\tvar vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n\t\tgl.shaderSource(vertexShader, vertexShaderSource);\r\n\t\tgl.compileShader(vertexShader);\r\n\r\n\t\tif (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\r\n\t\t\talert(gl.getShaderInfoLog(vertexShader));\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tvar fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n\t\tgl.shaderSource(fragmentShader, fragmentShaderSource);\r\n\t\tgl.compileShader(fragmentShader);\r\n\r\n\t\tif (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\r\n\t\t\talert(gl.getShaderInfoLog(fragmentShader));\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tvar shaderProgram = gl.createProgram();\r\n\t\tgl.attachShader(shaderProgram, vertexShader);\r\n\t\tgl.attachShader(shaderProgram, fragmentShader);\r\n\t\tgl.linkProgram(shaderProgram);\r\n\r\n\t\tif (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n\t\t\talert(\"Could not initialise shaders\");\r\n\t\t}\r\n\r\n\t\tgl.useProgram(shaderProgram);\r\n\r\n\t\tshaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, \"aVertexPosition\");\r\n\t\tshaderProgram.colorAttribute = gl.getAttribLocation(shaderProgram, \"aColor\");\r\n\t\tshaderProgram.textureCoordAttribute = [gl.getAttribLocation(shaderProgram, \"aTextureCoord\")];\r\n\r\n\t\tshaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, \"projectionMatrix\");\r\n\t\tshaderProgram.samplerUniform = gl.getUniformLocation(shaderProgram, \"uSampler\");\r\n\t\tshaderProgram.scaleUniform = gl.getUniformLocation(shaderProgram, \"scale\");\r\n\r\n\t\treturn shaderProgram;\r\n\t}\r\n}\r\n","class PIXINeutrinoRenderBuffers {\r\n\tconstructor(context, geometryBuffers) {\r\n\t\tthis.ctx = context;\r\n\t\tthis.gl = this.ctx.renderer.gl;\r\n\r\n\t\tthis.positions = null;\r\n\t\tthis.colors = null;\r\n\t\tthis.texCoords = [];\r\n\t\tthis.maxNumVertices = 0;\r\n\t\tthis.numVertices = 0;\r\n\t\tthis.indices = null;\r\n\r\n\t\tthis.renderCalls = [];\r\n\t\tthis.maxNumRenderCalls = 0;\r\n\t\tthis.numRenderCalls = 0;\r\n\t}\r\n\r\n\tinitialize(maxNumVertices, texChannels, indices, maxNumRenderCalls) {\r\n\t\tvar gl = this.gl;\r\n\r\n\t\tthis.positions = new Float32Array(new ArrayBuffer(4 * maxNumVertices * 3));\r\n\t\tthis.colors = new Uint8Array(new ArrayBuffer(4 * maxNumVertices));\r\n\t\tthis.texCoords = [];\r\n\t\tfor (var texChannel = 0; texChannel < texChannels.length; ++texChannel) {\r\n\t\t\tthis.texCoords[texChannel] = new Float32Array(new ArrayBuffer(4 * maxNumVertices * texChannels[texChannel]));\r\n\t\t\tthis.texCoords[texChannel].numComponents = texChannels[texChannel];\r\n\t\t}\r\n\t\tthis.maxNumVertices = maxNumVertices;\r\n\r\n\t\tthis.indices = new Uint16Array(new ArrayBuffer(2 * indices.length));\r\n\t\tthis.indices.set(indices, 0);\r\n\r\n\t\tthis.maxNumRenderCalls = maxNumRenderCalls;\r\n\r\n\t\tthis.positionBuffer = gl.createBuffer();\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\r\n\t\tgl.bufferData(gl.ARRAY_BUFFER, this.positions, gl.DYNAMIC_DRAW);\r\n\r\n\t\tthis.colorBuffer = gl.createBuffer();\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);\r\n\t\tgl.bufferData(gl.ARRAY_BUFFER, this.colors, gl.DYNAMIC_DRAW);\r\n\r\n\t\tthis.texBuffers = [];\r\n\t\tfor (var texIndex = 0; texIndex < this.texCoords.length; ++texIndex) {\r\n\t\t\tvar buffer = gl.createBuffer();\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER, this.texCoords[texIndex], gl.DYNAMIC_DRAW);\r\n\t\t\tthis.texBuffers.push(buffer);\r\n\t\t}\r\n\r\n\t\tthis.indicesBuffer = gl.createBuffer();\r\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\r\n\t\tgl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\r\n\t}\r\n\r\n\tpushVertex(vertex) {\r\n\t\tthis.positions.set(vertex.position, this.numVertices * 3);\r\n\t\tthis.colors.set(vertex.color, this.numVertices * 4);\r\n\r\n\t\tfor (var texIndex = 0; texIndex < vertex.texCoords.length; ++texIndex) {\r\n\t\t\tthis.texCoords[texIndex].set(vertex.texCoords[texIndex],\r\n\t\t\t\tthis.numVertices * this.texCoords[texIndex].numComponents);\r\n\t\t}\r\n\r\n\t\t++this.numVertices;\r\n\t}\r\n\r\n\tpushRenderCall(rc) {\r\n\r\n\t\tif (this.numRenderCalls >= this.renderCalls.length)\r\n\t\t\tthis.renderCalls.push(Object.assign({}, rc));\r\n\t\telse\r\n\t\t\tObject.assign(this.renderCalls[this.numRenderCalls], rc);\r\n\r\n\t\t++this.numRenderCalls;\r\n\t}\r\n\r\n\tcleanup() {\r\n\t\tthis.numVertices = 0;\r\n\t\tthis.numRenderCalls = 0;\r\n\t}\r\n\r\n\tupdateGlBuffers() {\r\n\t\tvar gl = this.gl;\r\n\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\r\n\t\tgl.bufferSubData(gl.ARRAY_BUFFER, 0, this.positions, 0, this.numVertices * 3);\r\n\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);\r\n\t\tgl.bufferSubData(gl.ARRAY_BUFFER, 0, this.colors, 0, this.numVertices * 4);\r\n\r\n\t\tthis.texBuffers.forEach(function (buffer, index) {\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n\t\t\tgl.bufferSubData(gl.ARRAY_BUFFER, 0, this.texCoords[index], 0, this.numVertices *\r\n\t\t\t\tthis.texCoords[index].numComponents);\r\n\t\t}, this);\r\n\t}\r\n\r\n\tbind() {\r\n\t\tvar gl = this.gl;\r\n\t\tvar materials = this.ctx.materials;\r\n\r\n\t\t{\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\r\n\r\n\t\t\tgl.enableVertexAttribArray(materials.positionAttribLocation());\r\n\t\t\tgl.vertexAttribPointer(materials.positionAttribLocation(), 3, gl.FLOAT, false, 0, 0);\r\n\t\t}\r\n\r\n\t\t{\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);\r\n\r\n\t\t\tgl.enableVertexAttribArray(materials.colorAttribLocation());\r\n\t\t\tgl.vertexAttribPointer(materials.colorAttribLocation(), 4, gl.UNSIGNED_BYTE, true, 0, 0);\r\n\t\t}\r\n\r\n\t\tthis.texBuffers.forEach(function (buffer, index) {\r\n\r\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n\r\n\t\t\tgl.enableVertexAttribArray(materials.texAttribLocation(index));\r\n\t\t\tgl.vertexAttribPointer(materials.texAttribLocation(index),\r\n\t\t\t\tthis.texCoords[index].numComponents, gl.FLOAT, false, 0, 0);\r\n\r\n\t\t}, this);\r\n\r\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\r\n\t}\r\n\r\n\tshutdown() {\r\n\t\tvar gl = this.gl;\r\n\r\n\t\tgl.deleteBuffer(this.positionBuffer);\r\n\t\tgl.deleteBuffer(this.colorBuffer);\r\n\r\n\t\tthis.texBuffers.forEach(function (buffer) {\r\n\t\t\tgl.deleteBuffer(buffer);\r\n\t\t}, this);\r\n\t}\r\n}\r\n"]}