{"version":3,"sources":["PhaserNeutrino.js","PhaserNeutrinoContext.js","PhaserNeutrinoEffect.js","PhaserNeutrinoEffectModel.js","PhaserNeutrinoMaterials.js","PhaserNeutrinoRenderBuffers.js"],"names":["PhaserNeutrino","config","effects","textures","neutrinoContext","PhaserNeutrinoContext","game","renderer","console","warn","noiseGenerator","neutrino","NoiseGenerator","step","path","effectScript","PhaserNeutrinoEffectModel","model","props","position","scale","rotation","PhaserNeutrinoEffect","Phaser","Game","prototype","GameObjectFactory","effect","createEffect","stage","addChild","GameObjectCreator","effectsBasePath","texturesBasePath","NeutrinoParticles","trimmedExtensionLookupFirst","type","PIXI","WEBGL_RENDERER","materials","PhaserNeutrinoMaterials","success","fail","initializeNoise","loadEffect","effectModel","_renderCanvas","renderCanvas","_renderWebGL","renderWebGL","ctx","set","positionZ","onReady","Signal","Array","isArray","x","y","scaleZ","isReady","_onEffectReady","addOnce","dt","update","axisangle2quat_","context","setTransform","draw","gl","renderSession","spriteBatch","stop","projection","offset","setup","fillGeometryBuffers","renderBuffers","updateGlBuffers","bind","renderCallIdx","numRenderCalls","renderCall","renderCalls","texIndex","renderStyles","renderStyleIndex","textureIndices","texture","glTexture","baseTexture","_glTextures","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","materialIndex","switchToNormal","switchToAdd","switchToMultiply","drawElements","TRIANGLES","numIndices","UNSIGNED_SHORT","startIndex","restart","resetPosition","name","value","setPropertyInAllEmitters","getNumParticles","CANVAS_RENDERER","createCanvas2DInstance","textureDescs","textureImageDescs","PhaserNeutrinoRenderBuffers","createWGLInstance","texturesRemap","forEach","updateTexture","dispatch","Group","effectPath","numTexturesToLoadLeft","_names","pixiNeutrinoEffect","_onEffectLoaded","load","onFileComplete","add","progress","key","texturePath","imageIndex","tx","_getNewTexture","_onTextureLoaded","replace","id","_getKey","imageCache","cache","_cache","image","imageData","Object","keys","data","fNames","frameData","_frameNames","hasOwnProperty","frameIndex","frame","_frames","rect","Rectangle","width","height","Texture","base","orig","numTextures","length","_loadTexture","hasLoaded","callback","self","off","on","loader","start","index","source","ImageDesc","crop","_initTexturesRemapIfNeeded","remapNeeded","texIdx","_isSubtexture","n","SubRect","PhaserNeutrinoShader","program","_UID","attributes","vertexPositionAttribute","colorAttribute","textureCoordAttribute","vertexShaderSource","fragmentShaderSource","fragmentShaderMultiplySource","shaderProgram","_makeShaderProgram","shaderProgramMultiply","shader","shaderManager","setShader","pMatrix","currentProgram","projectionVector","offsetVector","slice","_setProgram","blendModeManager","setBlendMode","uniform2fv","projectionVectorUniform","offsetVectorUniform","uniform1i","samplerUniform","uniform2f","scaleUniform","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","getAttribLocation","getUniformLocation","geometryBuffers","positions","colors","texCoords","maxNumVertices","numVertices","indices","maxNumRenderCalls","texChannels","Float32Array","ArrayBuffer","Uint8Array","texChannel","numComponents","Uint16Array","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","colorBuffer","texBuffers","buffer","push","indicesBuffer","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","vertex","color","rc","assign","bufferSubData","vertexAttribPointer","positionAttribLocation","FLOAT","colorAttribLocation","UNSIGNED_BYTE","texAttribLocation","deleteBuffer"],"mappings":"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","file":"neutrinoparticles.phaser.js","sourcesContent":["\r\n/*\r\n  // Desired interface for NP in Phaser:\r\n  game.neutrino.init({\r\n    effects: \"export_js/\", // \"\" by default\r\n    textures: \"textures/\" // \"\" by default\r\n  });\r\n\r\n  game.neutrino.generateTurbulance(); // to generate turbulance texture\r\n  game.neturino.loadTurbulance(\"path_to_noise_texture\"); // to load turbulance texture\r\n\r\n  model = game.neutrino.loadModel(\"path_to_effect_file\");\r\n\r\n  effect = game.add.neutrino(model, {\r\n    position: [400, 300, 0], // [0, 0, 0] by default\r\n    rotation: 45, // 0 by default\r\n    scale: [1, 1] // [1, 1] by default\r\n  });\r\n\r\n*/\r\nclass PhaserNeutrino {\r\n\r\n  constructor(){\r\n\r\n  }\r\n\r\n  init(config){\r\n    const effects = (config && config.effects) || \"export_js/\";\r\n    const textures = (config && config.textures) || \"textures/\";\r\n    //TODO instantiate a PhaserNeutrinoContext\r\n    this.neutrinoContext = new PhaserNeutrinoContext(game.renderer, effects, textures);\r\n    return this.neutrinoContext;\r\n  }\r\n\r\n  generateTurbulance(){\r\n    if(!this.neutrinoContext) {\r\n      console.warn('PhaserNeutrino - call init first');\r\n      return;\r\n    }\r\n    const noiseGenerator = new this.neutrinoContext.neutrino.NoiseGenerator();\r\n    while (!noiseGenerator.step()) { // approx. 5,000 steps\r\n      // you can use 'noiseGenerator.progress' to get generating progress from 0.0 to 1.0\r\n    }\r\n  }\r\n\r\n  loadTurbulance(path){\r\n    //TODO -\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param effectScript\r\n   * @returns {*}\r\n   */\r\n  loadModel(effectScript){\r\n    if(!this.neutrinoContext) {\r\n      console.warn('PhaserNeutrino - call init first');\r\n      return;\r\n    }\r\n    return new PhaserNeutrinoEffectModel(this.neutrinoContext, effectScript)\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param model\r\n   * @param props\r\n   * @param game\r\n   * @returns {PhaserNeutrinoEffect}\r\n   */\r\n  createEffect(model, props, game){\r\n    let {position, scale, rotation} = props;\r\n    if(!position) position = [0, 0, 0];\r\n    if(!scale) scale = [1, 1, 1];\r\n    if(!rotation) rotation = 0;\r\n\r\n    //(effectModel, position, game, rotation, scale)\r\n    return new PhaserNeutrinoEffect(\r\n      model,\r\n      position,\r\n      game,\r\n      rotation,\r\n      scale\r\n    );\r\n  }\r\n}\r\n\r\nPhaser.Game.prototype.neutrino = new PhaserNeutrino();\r\n\r\n//game.add.neutrino();\r\nPhaser.GameObjectFactory.prototype.neutrino = function (model, props) {\r\n  const effect = Phaser.Game.prototype.neutrino.createEffect(model, props, this.game);\r\n  game.stage.addChild(effect);\r\n  return effect;\r\n};\r\n\r\n//game.make.neutrino();\r\nPhaser.GameObjectCreator.prototype.neutrino = function (model, props) {\r\n  return Phaser.Game.prototype.neutrino.createEffect(model, props, this.game);\r\n};","class PhaserNeutrinoContext {\r\n\r\n  constructor(renderer, effectsBasePath = \"\", texturesBasePath = \"\") {\r\n    this.renderer = renderer;\r\n    this.neutrino = new NeutrinoParticles();\r\n    this.effectsBasePath = effectsBasePath;\r\n    this.texturesBasePath = texturesBasePath;\r\n    this.trimmedExtensionLookupFirst = true;\r\n\r\n    if (renderer.type === Phaser.PIXI.WEBGL_RENDERER) {\r\n      this.materials = new PhaserNeutrinoMaterials(renderer);\r\n    }\r\n  }\r\n\r\n  initializeNoise(path, success, fail) {\r\n    this.neutrino.initializeNoise(path, success, fail);\r\n  }\r\n\r\n  loadEffect(path, success, fail) {\r\n    this.neutrino.loadEffect(path, success, fail);\r\n  }\r\n}","class PhaserNeutrinoEffect extends Phaser.Group {\r\n\r\n  constructor(effectModel, position, game, rotation, scale) {\r\n    super(game, null);\r\n    this._renderCanvas = this.renderCanvas;\r\n    this._renderWebGL = this.renderWebGL;\r\n\r\n    this.ctx = effectModel.ctx;\r\n    this.effectModel = effectModel;\r\n    this.effect = null;\r\n    this.position.set(position[0], position[1]);\r\n    this.positionZ = position[2];\r\n\r\n    this.onReady = new Phaser.Signal();\r\n\r\n    if (rotation)\r\n      this.rotation = rotation;\r\n\r\n    if (Array.isArray(scale)) {\r\n      this.scale.x = scale[0];\r\n      this.scale.y = scale[1];\r\n      this.scaleZ = scale[2];\r\n    } else {\r\n      this.scaleZ = 1;\r\n    }\r\n\r\n    if (effectModel.isReady) {\r\n      this._onEffectReady();\r\n    } else {\r\n      effectModel.onReady.addOnce(function () {\r\n        this._onEffectReady();\r\n      }, this);\r\n    }\r\n  }\r\n\r\n  get isReady(){\r\n    return this.effect !== null;\r\n  }\r\n\r\n  updateParticles(dt) {\r\n    if (this.effect !== null) {\r\n      this.effect.update(dt, [this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ],\r\n        this.ctx.neutrino.axisangle2quat_([0, 0, 1], this.rotation % 360));\r\n    }\r\n  }\r\n\r\n  renderCanvas(renderer) {\r\n    if (this.isReady) {\r\n      renderer.context.setTransform(this.scale.x, 0, 0, this.scale.y, 0, 0);\r\n      this.effect.draw(renderer.context);\r\n    }\r\n  };\r\n\r\n  renderWebGL(renderer) {\r\n    if (!this.isReady) return;\r\n\r\n    const gl = renderer.gl;\r\n\r\n    const renderSession = game.renderer.renderSession;\r\n    renderSession.spriteBatch.stop();\r\n    const projection = renderSession.projection;\r\n    const offset = renderSession.offset;\r\n    const position = this.position;\r\n    // console.log('projection', projection,'position',position,'offset',offset)\r\n    // this.ctx.materials.setup([position.x, -position.y], [offset.x, offset.y], [this.scale.x, this.scale.y]);\r\n    this.ctx.materials.setup([projection.x, projection.y], [offset.x, offset.y], [this.scale.x, this.scale.y]);\r\n\r\n    this.effect.fillGeometryBuffers([1, 0, 0], [0, -1, 0], [0, 0, -1]);\r\n\r\n    this.renderBuffers.updateGlBuffers();\r\n    this.renderBuffers.bind();\r\n\r\n    for (let renderCallIdx = 0; renderCallIdx < this.renderBuffers.numRenderCalls; ++renderCallIdx) {\r\n      const renderCall = this.renderBuffers.renderCalls[renderCallIdx];\r\n      const texIndex = this.effect.model.renderStyles[renderCall.renderStyleIndex].textureIndices[0];\r\n\r\n      //ref to pixi texture\r\n      const texture = this.effectModel.textures[texIndex];\r\n\r\n      //instance of https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture\r\n      const glTexture = texture.baseTexture._glTextures[0];//game.renderer.glContextId];\r\n\r\n      gl.activeTexture(gl.TEXTURE0);\r\n      gl.bindTexture(gl.TEXTURE_2D, glTexture);\r\n\r\n      const materialIndex = this.effect.model.renderStyles[renderCall.renderStyleIndex].materialIndex;\r\n      switch (this.effect.model.materials[materialIndex]) {\r\n        default: this.ctx.materials.switchToNormal(renderer); break;\r\n        case 1: this.ctx.materials.switchToAdd(renderer); break;\r\n        case 2: this.ctx.materials.switchToMultiply(renderer); break;\r\n      }\r\n\r\n      gl.drawElements(gl.TRIANGLES, renderCall.numIndices, gl.UNSIGNED_SHORT, renderCall.startIndex * 2);\r\n    }\r\n\r\n  }\r\n\r\n  restart(position, rotation) {\r\n    if (position) {\r\n      this.position.x = position[0];\r\n      this.position.y = position[1];\r\n      this.positionZ = position[2];\r\n    }\r\n\r\n    if (rotation) {\r\n      this.rotation = rotation;\r\n    }\r\n\r\n    this.effect.restart([this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ],\r\n      rotation ? this.ctx.neutrino.axisangle2quat_([0, 0, 1], rotation % 360) : null);\r\n  }\r\n\r\n  resetPosition(position, rotation) {\r\n    if (position) {\r\n      this.position.x = position[0];\r\n      this.position.y = position[1];\r\n      this.positionZ = position[2];\r\n    }\r\n\r\n    if (rotation) {\r\n      this.rotation = rotation;\r\n    }\r\n\r\n    this.effect.resetPosition([this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ],\r\n      rotation ? this.ctx.neutrino.axisangle2quat_([0, 0, 1], rotation % 360) : null);\r\n  }\r\n\r\n  setPropertyInAllEmitters(name, value) {\r\n    this.effect.setPropertyInAllEmitters(name, value);\r\n  }\r\n\r\n  getNumParticles() {\r\n    return this.effect.getNumParticles();\r\n  }\r\n\r\n  _onEffectReady() {\r\n\r\n    const position = [this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ];\r\n    const rotation = this.ctx.neutrino.axisangle2quat_([0, 0, 1], this.rotation % 360);\r\n\r\n    if (this.effectModel.ctx.renderer.type === Phaser.PIXI.CANVAS_RENDERER) {\r\n      this.effect = this.effectModel.effectModel.createCanvas2DInstance(position, rotation);\r\n      this.effect.textureDescs = this.effectModel.textureImageDescs;\r\n    } else {\r\n      this.renderBuffers = new PhaserNeutrinoRenderBuffers(this.ctx);\r\n      this.effect = this.effectModel.effectModel.createWGLInstance(position, rotation, this.renderBuffers);\r\n      this.effect.texturesRemap = this.effectModel.texturesRemap;\r\n\r\n      //get phaser to create webgl texture(s)\r\n      this.effectModel.textures.forEach(texture=>{\r\n        game.renderer.updateTexture(texture.baseTexture);\r\n      });\r\n    }\r\n\r\n    this.onReady.dispatch();\r\n  }\r\n}","class PhaserNeutrinoEffectModel {\r\n\r\n  constructor(context, effectPath) {\r\n\r\n    this.ctx = context;\r\n    this.effectPath = effectPath;\r\n    this.effectModel = null;\r\n    this.numTexturesToLoadLeft = -1;\r\n    this.texturesRemap = null;\r\n\r\n    this._names = {};\r\n\r\n    this.onReady = new Phaser.Signal();\r\n\r\n    var pixiNeutrinoEffect = this;\r\n    this.ctx.neutrino.loadEffect(this.ctx.effectsBasePath + effectPath, function (effectModel) {\r\n      pixiNeutrinoEffect._onEffectLoaded(effectModel);\r\n    });\r\n\r\n    game.load.onFileComplete.add((progress, key, success) => {\r\n        //console.log('onFileComplete', progress, key, success)\r\n        const {texturePath, imageIndex} = this._names[key];\r\n        const tx = this._getNewTexture(texturePath);\r\n        this._onTextureLoaded(imageIndex, tx);\r\n    });\r\n\r\n  }\r\n\r\n  get isReady(){\r\n    return this.numTexturesToLoadLeft === 0;\r\n  }\r\n\r\n  _getKey(name){\r\n    if (this.ctx.trimmedExtensionLookupFirst) name = name.replace(/\\.[^/.]+$/, \"\");\r\n    return name;\r\n  }\r\n\r\n  _getNewTexture(id){\r\n    //if (this.ctx.trimmedExtensionLookupFirst) id = id.replace(/\\.[^/.]+$/, \"\");\r\n    id = this._getKey(id);\r\n    //TODO - see if theres a better way of accessing this image data...\r\n    const imageCache = game.cache._cache.image;\r\n    let imageData = imageCache[id];\r\n    if(!imageData){\r\n      let texture = null;\r\n      //have to check each cache entry :(\r\n      //(this is so much easier in pixi.js where all textures go into one cache!)\r\n      Object.keys(imageCache).forEach(name => {\r\n        const data = imageCache[name], fNames = data.frameData._frameNames;\r\n        if(fNames && fNames.hasOwnProperty(id)){\r\n          //this one contains the subtexture we are looking for\r\n          // - get a texture from it\r\n          const frameIndex = fNames[id];\r\n          const frame = data.frameData._frames[frameIndex];\r\n          const rect = new PIXI.Rectangle(frame.x, frame.y, frame.width, frame.height);\r\n          //console.log('frame', frame, 'rect',rect)\r\n          //PIXI.Texture(baseTexture, frame, crop, trim)\r\n          texture = new PIXI.Texture(data.base, rect, rect);\r\n          //just in case, store the rect on the texture as is done in recent pixi version\r\n          texture.orig = rect;\r\n        }\r\n      });\r\n\r\n      return texture;\r\n    } else {\r\n      const baseTexture = imageData.base;\r\n      return new Phaser.PIXI.Texture(baseTexture, imageData.frame);\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param effectModel\r\n   * @private\r\n   */\r\n  _onEffectLoaded(effectModel) {\r\n    this.effectModel = effectModel;\r\n    this.textures = [];\r\n    this.textureImageDescs = [];\r\n    const numTextures = effectModel.textures.length;\r\n    this.numTexturesToLoadLeft = numTextures;\r\n\r\n    for (let imageIndex = 0; imageIndex < numTextures; ++imageIndex) {\r\n      const texturePath = effectModel.textures[imageIndex];\r\n      let texture = this._getNewTexture(texturePath);\r\n\r\n      if (!texture){\r\n        this._loadTexture(texturePath, imageIndex);\r\n      } else {\r\n        if (texture.baseTexture.hasLoaded) {\r\n          this._onTextureLoaded(imageIndex, texture);\r\n        } else {\r\n          const callback = function (self, imageIndex, texture) {\r\n            texture.off('update', callback);\r\n            return function () {\r\n              self._onTextureLoaded(imageIndex, texture);\r\n            }\r\n          } (this, imageIndex, texture);\r\n          texture.on('update', callback);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param texturePath\r\n   * @param imageIndex\r\n   * @returns {Phaser.Loader}\r\n   * @private\r\n   */\r\n  _loadTexture(texturePath, imageIndex) {\r\n    const key = this._getKey(texturePath);\r\n    this._names[key] = {texturePath, imageIndex};\r\n    //console.log('_loadTexture', this.ctx.texturesBasePath + texturePath)\r\n    const loader = game.load.image(key, this.ctx.texturesBasePath + texturePath);\r\n    loader.start();\r\n    return loader;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param index\r\n   * @param texture\r\n   * @private\r\n   */\r\n  _onTextureLoaded(index, texture) {\r\n    this.textures[index] = texture;\r\n\r\n    this.numTexturesToLoadLeft--;\r\n\r\n    if (this.ctx.renderer.type === Phaser.PIXI.CANVAS_RENDERER) {\r\n      const image = texture.baseTexture.source;\r\n      this.textureImageDescs[index] = new this.ctx.neutrino.ImageDesc(image, texture.crop.x, texture.crop.y,\r\n        texture.crop.width, texture.crop.height);\r\n    }\r\n\r\n    if (this.numTexturesToLoadLeft === 0) {\r\n\r\n      if(this.ctx.renderer.type === Phaser.PIXI.WEBGL_RENDERER){\r\n        this._initTexturesRemapIfNeeded();\r\n      }\r\n      //this.emit('ready', this);\r\n      this.onReady.dispatch();\r\n    }\r\n  }\r\n\r\n  _isSubtexture(texture){\r\n    if(!texture) return false;\r\n    return texture.frame.width < texture.baseTexture.width || texture.frame.height < texture.baseTexture.height;\r\n  }\r\n\r\n  _initTexturesRemapIfNeeded() {\r\n    let remapNeeded = false;\r\n\r\n    for (var texIdx = 0; texIdx < this.textures.length; ++texIdx) {\r\n      //checks if its an atlas subtexture\r\n      if (this._isSubtexture(this.textures[texIdx])) {\r\n        remapNeeded = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.texturesRemap = [];\r\n    if (remapNeeded) {\r\n      const n = this.textures.length;\r\n      for (let texIdx = 0; texIdx < n; ++texIdx) {\r\n        const texture = this.textures[texIdx],\r\n          crop = texture.crop,\r\n          base = texture.baseTexture;\r\n\r\n        this.texturesRemap[texIdx] = new this.ctx.neutrino.SubRect(\r\n          crop.x / base.width,\r\n          1.0 - (crop.y + crop.height) / base.height,\r\n          crop.width / base.width,\r\n          crop.height / base.height\r\n        );\r\n      }\r\n    }\r\n  }\r\n}","class PhaserNeutrinoShader {\r\n  constructor(program) {\r\n    this.program = program;\r\n    this._UID = PIXI._UID++;\r\n    this.attributes = [program.vertexPositionAttribute, program.colorAttribute, program.textureCoordAttribute];\r\n  }\r\n}\r\n\r\nclass PhaserNeutrinoMaterials {\r\n\r\n  constructor(renderer) {\r\n    this.gl = renderer.gl;\r\n\r\n    var vertexShaderSource = \"\\\r\n/* NeutrinoParticles Vertex Shader */ \\n\\\r\n\\n\\\r\nattribute vec3 aVertexPosition;\\n\\\r\nattribute vec2 aTextureCoord;\\n\\\r\nattribute vec4 aColor; \\n\\\r\n\\n\\\r\nuniform vec2 projectionVector;\\n\\\r\nuniform vec2 offsetVector; \\n\\\r\nuniform vec2 scale;\\n\\\r\n\\n\\\r\nvarying vec4 vColor;\\n\\\r\nvarying vec2 vTextureCoord;\\n\\\r\n\\n\\\r\nconst vec2 center = vec2(-1.0, 1.0); \\n\\\r\n\\n\\\r\nvoid main(void) {\\n\\\r\ngl_Position = vec4(((aVertexPosition.xy * scale + offsetVector) / projectionVector) + center , 0.0, 1.0); \\n\\\r\n\tvColor = vec4(aColor.rgb * aColor.a, aColor.a);\\n\\\r\n\tvTextureCoord = vec2(aTextureCoord.x, 1.0 - aTextureCoord.y);\\n\\\r\n}\";\r\n\r\n    var fragmentShaderSource = \"\\\r\n/* NeutrinoParticles Fragment Shader (Normal, Add materials) */ \\n\\\r\n\\n\\\r\nprecision mediump float;\\n\\\r\n\\n\\\r\nvarying vec4 vColor;\\n\\\r\nvarying vec2 vTextureCoord;\\n\\\r\n\\n\\\r\nuniform sampler2D uSampler;\\n\\\r\n\\n\\\r\nvoid main(void) {\\n\\\r\n\tgl_FragColor = vColor * texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\\n\\\r\n}\";\r\n\r\n    var fragmentShaderMultiplySource = \"\\\r\n/* NeutrinoParticles Fragment Shader (Multiply material) */ \\n\\\r\n\\n\\\r\nprecision mediump float;\\n\\\r\n\\n\\\r\nvarying vec4 vColor;\\n\\\r\nvarying vec2 vTextureCoord;\\n\\\r\n\\n\\\r\nuniform sampler2D uSampler;\\n\\\r\n\\n\\\r\nvoid main(void)\\n\\\r\n{\\n\\\r\nvec4 texel = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\\n\\\r\nvec3 rgb = vColor.rgb * texel.rgb;\\n\\\r\nfloat alpha = vColor.a * texel.a;\\n\\\r\ngl_FragColor = vec4(mix(vec3(1, 1, 1), rgb, alpha), 1);\\n\\\r\n}\";\r\n\r\n    this.shaderProgram = this._makeShaderProgram(vertexShaderSource, fragmentShaderSource);\r\n    this.shaderProgramMultiply = this._makeShaderProgram(vertexShaderSource, fragmentShaderMultiplySource);\r\n\r\n    this.shaderProgram.shader = new PhaserNeutrinoShader(this.shaderProgram);\r\n    this.shaderProgramMultiply.shader = new PhaserNeutrinoShader(this.shaderProgramMultiply);\r\n    renderer.shaderManager.setShader(this.shaderProgram.shader);\r\n\r\n    this.pMatrix = null;\r\n    this.currentProgram = null;\r\n  }\r\n\r\n  shutdown() {\r\n  }\r\n\r\n  positionAttribLocation() {\r\n    return this.shaderProgram.vertexPositionAttribute;\r\n  }\r\n\r\n  colorAttribLocation() {\r\n    return this.shaderProgram.colorAttribute;\r\n  }\r\n\r\n  texAttribLocation(index) {\r\n    return this.shaderProgram.textureCoordAttribute[index];\r\n  }\r\n\r\n  setup(projectionVector, offsetVector, scale) {\r\n    this.projectionVector = projectionVector.slice();\r\n    this.offsetVector = offsetVector.slice();\r\n    this.scale = scale.slice();\r\n    this.currentProgram = null;\r\n  }\r\n\r\n  switchToNormal(renderer) {\r\n    this._setProgram(renderer, this.shaderProgram);\r\n    renderer.blendModeManager.setBlendMode(0);\r\n  }\r\n\r\n  switchToAdd(renderer) {\r\n    this._setProgram(renderer, this.shaderProgram);\r\n    renderer.blendModeManager.setBlendMode(1);\r\n  }\r\n\r\n  switchToMultiply(renderer) {\r\n    this._setProgram(renderer, this.shaderProgramMultiply);\r\n    renderer.blendModeManager.setBlendMode(2);\r\n  }\r\n\r\n  _setProgram(renderer, program) {\r\n    var gl = this.gl;\r\n    if (program !== this.currentProgram) {\r\n      renderer.shaderManager.setShader(program.shader);\r\n      // console.log('_setProgram',program.pMatrixUniform, this.pMatrix)\r\n      gl.uniform2fv(program.projectionVectorUniform, this.projectionVector);\r\n      gl.uniform2fv(program.offsetVectorUniform, this.offsetVector);\r\n      gl.uniform1i(program.samplerUniform, 0);\r\n      gl.uniform2f(program.scaleUniform, this.scale[0], this.scale[1]);\r\n\r\n      this.currentProgram = program;\r\n    }\r\n  }\r\n\r\n  _makeShaderProgram(vertexShaderSource, fragmentShaderSource) {\r\n    var gl = this.gl;\r\n\r\n    var vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n    gl.shaderSource(vertexShader, vertexShaderSource);\r\n    gl.compileShader(vertexShader);\r\n\r\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\r\n      alert(gl.getShaderInfoLog(vertexShader));\r\n      return null;\r\n    }\r\n\r\n    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n    gl.shaderSource(fragmentShader, fragmentShaderSource);\r\n    gl.compileShader(fragmentShader);\r\n\r\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\r\n      alert(gl.getShaderInfoLog(fragmentShader));\r\n      return null;\r\n    }\r\n\r\n    var shaderProgram = gl.createProgram();\r\n    gl.attachShader(shaderProgram, vertexShader);\r\n    gl.attachShader(shaderProgram, fragmentShader);\r\n    gl.linkProgram(shaderProgram);\r\n\r\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n      alert(\"Could not initialise shaders\");\r\n    }\r\n\r\n    gl.useProgram(shaderProgram);\r\n\r\n    shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, \"aVertexPosition\");\r\n    shaderProgram.colorAttribute = gl.getAttribLocation(shaderProgram, \"aColor\");\r\n    shaderProgram.textureCoordAttribute = [gl.getAttribLocation(shaderProgram, \"aTextureCoord\")];\r\n\r\n    shaderProgram.projectionVectorUniform = gl.getUniformLocation(shaderProgram, \"projectionVector\");\r\n    shaderProgram.offsetVectorUniform = gl.getUniformLocation(shaderProgram, \"offsetVector\");\r\n    shaderProgram.samplerUniform = gl.getUniformLocation(shaderProgram, \"uSampler\");\r\n    shaderProgram.scaleUniform = gl.getUniformLocation(shaderProgram, \"scale\");\r\n\r\n    return shaderProgram;\r\n  }\r\n}","class PhaserNeutrinoRenderBuffers {\r\n  constructor(context, geometryBuffers) {\r\n    this.ctx = context;\r\n    this.gl = this.ctx.renderer.gl;\r\n\r\n    this.positions = null;\r\n    this.colors = null;\r\n    this.texCoords = [];\r\n    this.maxNumVertices = 0;\r\n    this.numVertices = 0;\r\n    this.indices = null;\r\n\r\n    this.renderCalls = [];\r\n    this.maxNumRenderCalls = 0;\r\n    this.numRenderCalls = 0;\r\n  }\r\n\r\n  initialize(maxNumVertices, texChannels, indices, maxNumRenderCalls) {\r\n    var gl = this.gl;\r\n\r\n    this.positions = new Float32Array(new ArrayBuffer(4 * maxNumVertices * 3));\r\n    this.colors = new Uint8Array(new ArrayBuffer(4 * maxNumVertices));\r\n    this.texCoords = [];\r\n    for (var texChannel = 0; texChannel < texChannels.length; ++texChannel) {\r\n      this.texCoords[texChannel] = new Float32Array(new ArrayBuffer(4 * maxNumVertices * texChannels[texChannel]));\r\n      this.texCoords[texChannel].numComponents = texChannels[texChannel];\r\n    }\r\n    this.maxNumVertices = maxNumVertices;\r\n\r\n    this.indices = new Uint16Array(new ArrayBuffer(2 * indices.length));\r\n    this.indices.set(indices, 0);\r\n\r\n    this.maxNumRenderCalls = maxNumRenderCalls;\r\n\r\n    this.positionBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, this.positions, gl.DYNAMIC_DRAW);\r\n\r\n    this.colorBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, this.colors, gl.DYNAMIC_DRAW);\r\n\r\n    this.texBuffers = [];\r\n    for (var texIndex = 0; texIndex < this.texCoords.length; ++texIndex) {\r\n      var buffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, this.texCoords[texIndex], gl.DYNAMIC_DRAW);\r\n      this.texBuffers.push(buffer);\r\n    }\r\n\r\n    this.indicesBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\r\n  }\r\n\r\n  pushVertex(vertex) {\r\n    this.positions.set(vertex.position, this.numVertices * 3);\r\n    this.colors.set(vertex.color, this.numVertices * 4);\r\n\r\n    for (var texIndex = 0; texIndex < vertex.texCoords.length; ++texIndex) {\r\n      this.texCoords[texIndex].set(vertex.texCoords[texIndex],\r\n        this.numVertices * this.texCoords[texIndex].numComponents);\r\n    }\r\n\r\n    ++this.numVertices;\r\n  }\r\n\r\n  pushRenderCall(rc) {\r\n\r\n    if (this.numRenderCalls >= this.renderCalls.length)\r\n      this.renderCalls.push(Object.assign({}, rc));\r\n    else\r\n      Object.assign(this.renderCalls[this.numRenderCalls], rc);\r\n\r\n    ++this.numRenderCalls;\r\n  }\r\n\r\n  cleanup() {\r\n    this.numVertices = 0;\r\n    this.numRenderCalls = 0;\r\n  }\r\n\r\n  updateGlBuffers() {\r\n    var gl = this.gl;\r\n\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\r\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.positions, 0, this.numVertices * 3);\r\n\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);\r\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.colors, 0, this.numVertices * 4);\r\n\r\n    this.texBuffers.forEach(function (buffer, index) {\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n      gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.texCoords[index], 0, this.numVertices *\r\n        this.texCoords[index].numComponents);\r\n    }, this);\r\n  }\r\n\r\n  bind() {\r\n    var gl = this.gl;\r\n    var materials = this.ctx.materials;\r\n\r\n    {\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\r\n      // attribute is enabled inside PIXI\r\n      //gl.enableVertexAttribArray(materials.positionAttribLocation());\r\n      gl.vertexAttribPointer(materials.positionAttribLocation(), 3, gl.FLOAT, false, 0, 0);\r\n    }\r\n\r\n    {\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);\r\n      // attribute is enabled inside PIXI\r\n      //gl.enableVertexAttribArray(materials.colorAttribLocation());\r\n      gl.vertexAttribPointer(materials.colorAttribLocation(), 4, gl.UNSIGNED_BYTE, true, 0, 0);\r\n    }\r\n\r\n    this.texBuffers.forEach(function (buffer, index) {\r\n\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n      // attribute is enabled inside PIXI\r\n      //gl.enableVertexAttribArray(materials.texAttribLocation(index));\r\n      gl.vertexAttribPointer(materials.texAttribLocation(index),\r\n        this.texCoords[index].numComponents, gl.FLOAT, false, 0, 0);\r\n\r\n    }, this);\r\n\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\r\n  }\r\n\r\n  shutdown() {\r\n    var gl = this.gl;\r\n\r\n    gl.deleteBuffer(this.positionBuffer);\r\n    gl.deleteBuffer(this.colorBuffer);\r\n\r\n    this.texBuffers.forEach(function (buffer) {\r\n      gl.deleteBuffer(buffer);\r\n    }, this);\r\n  }\r\n}"]}