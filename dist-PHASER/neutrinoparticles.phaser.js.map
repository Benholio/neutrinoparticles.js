{"version":3,"sources":["PhaserNeutrinoContext.js","PhaserNeutrinoEffect.js","PhaserNeutrinoEffectModel.js","PhaserNeutrinoMaterials.js","PhaserNeutrinoRenderBuffers.js"],"names":["PhaserNeutrinoContext","renderer","effectsBasePath","texturesBasePath","neutrino","NeutrinoParticles","trimmedExtensionLookupFirst","type","Phaser","PIXI","WEBGL_RENDERER","materials","PhaserNeutrinoMaterials","path","success","fail","initializeNoise","loadEffect","PhaserNeutrinoEffect","effectModel","position","game","rotation","scale","_renderCanvas","renderCanvas","_renderWebGL","renderWebGL","ctx","effect","set","positionZ","onReady","Signal","Array","isArray","x","y","scaleZ","isReady","_onEffectReady","addOnce","dt","update","axisangle2quat_","context","setTransform","draw","gl","renderSession","spriteBatch","stop","projection","offset","setup","fillGeometryBuffers","renderBuffers","updateGlBuffers","bind","renderCallIdx","numRenderCalls","renderCall","renderCalls","texIndex","model","renderStyles","renderStyleIndex","textureIndices","texture","textures","glTexture","baseTexture","_glTextures","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","materialIndex","switchToNormal","switchToAdd","switchToMultiply","drawElements","TRIANGLES","numIndices","UNSIGNED_SHORT","startIndex","restart","resetPosition","name","value","setPropertyInAllEmitters","getNumParticles","CANVAS_RENDERER","createCanvas2DInstance","textureDescs","textureImageDescs","PhaserNeutrinoRenderBuffers","createWGLInstance","texturesRemap","forEach","updateTexture","dispatch","Group","PhaserNeutrinoEffectModel","effectPath","numTexturesToLoadLeft","pixiNeutrinoEffect","_onEffectLoaded","id","replace","imageCache","cache","_cache","image","imageData","Object","keys","data","fNames","frameData","_frameNames","hasOwnProperty","frameIndex","frame","_frames","rect","Rectangle","width","height","Texture","base","orig","numTextures","length","imageIndex","texturePath","_getNewTexture","fromImage","hasLoaded","_onTextureLoaded","callback","self","off","on","index","source","ImageDesc","crop","_initTexturesRemapIfNeeded","remapNeeded","texIdx","_isSubtexture","n","SubRect","PhaserNeutrinoShader","program","_UID","attributes","vertexPositionAttribute","colorAttribute","textureCoordAttribute","vertexShaderSource","fragmentShaderSource","fragmentShaderMultiplySource","shaderProgram","_makeShaderProgram","shaderProgramMultiply","shader","shaderManager","setShader","pMatrix","currentProgram","projectionVector","offsetVector","slice","_setProgram","blendModeManager","setBlendMode","uniform2fv","projectionVectorUniform","offsetVectorUniform","uniform1i","samplerUniform","uniform2f","scaleUniform","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","getAttribLocation","getUniformLocation","geometryBuffers","positions","colors","texCoords","maxNumVertices","numVertices","indices","maxNumRenderCalls","texChannels","Float32Array","ArrayBuffer","Uint8Array","texChannel","numComponents","Uint16Array","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","colorBuffer","texBuffers","buffer","push","indicesBuffer","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","vertex","color","rc","assign","bufferSubData","vertexAttribPointer","positionAttribLocation","FLOAT","colorAttribLocation","UNSIGNED_BYTE","texAttribLocation","deleteBuffer"],"mappings":";;;;;;;;;;IAAAA,qB;AAEA,iCAAAC,QAAA,EAAA;AAAA,QAAAC,eAAA,uEAAA,EAAA;AAAA,QAAAC,gBAAA,uEAAA,EAAA;;AAAA;;AACA,SAAAF,QAAA,GAAAA,QAAA;AACA,SAAAG,QAAA,GAAA,IAAAC,iBAAA,EAAA;AACA,SAAAH,eAAA,GAAAA,eAAA;AACA,SAAAC,gBAAA,GAAAA,gBAAA;AACA,SAAAG,2BAAA,GAAA,IAAA;;AAEA,QAAAL,SAAAM,IAAA,KAAAC,OAAAC,IAAA,CAAAC,cAAA,EAAA;AACA,WAAAC,SAAA,GAAA,IAAAC,uBAAA,CAAAX,QAAA,CAAA;AACA;AACA;;;;oCAEAY,I,EAAAC,O,EAAAC,I,EAAA;AACA,WAAAX,QAAA,CAAAY,eAAA,CAAAH,IAAA,EAAAC,OAAA,EAAAC,IAAA;AACA;;;+BAEAF,I,EAAAC,O,EAAAC,I,EAAA;AACA,WAAAX,QAAA,CAAAa,UAAA,CAAAJ,IAAA,EAAAC,OAAA,EAAAC,IAAA;AACA;;;;;;ICpBAG,oB;;;AAEA,gCAAAC,WAAA,EAAAC,QAAA,EAAAC,IAAA,EAAAC,QAAA,EAAAC,KAAA,EAAA;AAAA;;AAEA;AAFA,4IACAF,IADA,EACA,IADA;;AAGA,UAAAG,aAAA,GAAA,MAAAC,YAAA;AACA,UAAAC,YAAA,GAAA,MAAAC,WAAA;;AAEA,UAAAC,GAAA,GAAAT,YAAAS,GAAA;AACA,UAAAT,WAAA,GAAAA,WAAA;AACA,UAAAU,MAAA,GAAA,IAAA;AACA,UAAAT,QAAA,CAAAU,GAAA,CAAAV,SAAA,CAAA,CAAA,EAAAA,SAAA,CAAA,CAAA;AACA,UAAAW,SAAA,GAAAX,SAAA,CAAA,CAAA;;AAEA,UAAAY,OAAA,GAAA,IAAAxB,OAAAyB,MAAA,EAAA;;AAEA,QAAAX,QAAA,EACA,MAAAA,QAAA,GAAAA,QAAA;;AAEA,QAAAY,MAAAC,OAAA,CAAAZ,KAAA,CAAA,EAAA;AACA,YAAAA,KAAA,CAAAa,CAAA,GAAAb,MAAA,CAAA,CAAA;AACA,YAAAA,KAAA,CAAAc,CAAA,GAAAd,MAAA,CAAA,CAAA;AACA,YAAAe,MAAA,GAAAf,MAAA,CAAA,CAAA;AACA,KAJA,MAIA;AACA,YAAAe,MAAA,GAAA,CAAA;AACA;;AAEA,QAAAnB,YAAAoB,OAAA,EAAA;AACA,YAAAC,cAAA;AACA,KAFA,MAEA;AACArB,kBAAAa,OAAA,CAAAS,OAAA,CAAA,YAAA;AACA,aAAAD,cAAA;AACA,OAFA;AAGA;AA/BA;AAgCA;;;;oCAMAE,E,EAAA;AACA,UAAA,KAAAb,MAAA,KAAA,IAAA,EAAA;AACA,aAAAA,MAAA,CAAAc,MAAA,CAAAD,EAAA,EAAA,CAAA,KAAAtB,QAAA,CAAAgB,CAAA,GAAA,KAAAb,KAAA,CAAAa,CAAA,EAAA,KAAAhB,QAAA,CAAAiB,CAAA,GAAA,KAAAd,KAAA,CAAAc,CAAA,EAAA,KAAAN,SAAA,GAAA,KAAAO,MAAA,CAAA,EACA,KAAAV,GAAA,CAAAxB,QAAA,CAAAwC,eAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,KAAAtB,QAAA,GAAA,GAAA,CADA;AAEA;AACA;;;iCAEArB,Q,EAAA;AACA,UAAA,KAAAsC,OAAA,EAAA;AACAtC,iBAAA4C,OAAA,CAAAC,YAAA,CAAA,KAAAvB,KAAA,CAAAa,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAAb,KAAA,CAAAc,CAAA,EAAA,CAAA,EAAA,CAAA;AACA,aAAAR,MAAA,CAAAkB,IAAA,CAAA9C,SAAA4C,OAAA;AACA;AACA;;;gCAEA5C,Q,EAAA;AACA,UAAA,CAAA,KAAAsC,OAAA,EAAA;;AAEA,UAAAS,KAAA/C,SAAA+C,EAAA;;AAEA,UAAAC,gBAAA5B,KAAApB,QAAA,CAAAgD,aAAA;AACAA,oBAAAC,WAAA,CAAAC,IAAA;AACA,UAAAC,aAAAH,cAAAG,UAAA;AACA,UAAAC,SAAAJ,cAAAI,MAAA;;AAEA,WAAAzB,GAAA,CAAAjB,SAAA,CAAA2C,KAAA,CAAA,CAAAF,WAAAhB,CAAA,EAAAgB,WAAAf,CAAA,CAAA,EAAA,CAAAgB,OAAAjB,CAAA,EAAAiB,OAAAhB,CAAA,CAAA,EAAA,CAAA,KAAAd,KAAA,CAAAa,CAAA,EAAA,KAAAb,KAAA,CAAAc,CAAA,CAAA;;AAEA,WAAAR,MAAA,CAAA0B,mBAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA;;AAEA,WAAAC,aAAA,CAAAC,eAAA;AACA,WAAAD,aAAA,CAAAE,IAAA;;AAEA,WAAA,IAAAC,gBAAA,CAAA,EAAAA,gBAAA,KAAAH,aAAA,CAAAI,cAAA,EAAA,EAAAD,aAAA,EAAA;AACA,YAAAE,aAAA,KAAAL,aAAA,CAAAM,WAAA,CAAAH,aAAA,CAAA;AACA,YAAAI,WAAA,KAAAlC,MAAA,CAAAmC,KAAA,CAAAC,YAAA,CAAAJ,WAAAK,gBAAA,EAAAC,cAAA,CAAA,CAAA,CAAA;;AAEA;AACA,YAAAC,UAAA,KAAAjD,WAAA,CAAAkD,QAAA,CAAAN,QAAA,CAAA;;AAEA;AACA,YAAAO,YAAAF,QAAAG,WAAA,CAAAC,WAAA,CAAA,CAAA,CAAA,CARA,CAQA;;AAEAxB,WAAAyB,aAAA,CAAAzB,GAAA0B,QAAA;AACA1B,WAAA2B,WAAA,CAAA3B,GAAA4B,UAAA,EAAAN,SAAA;;AAEA,YAAAO,gBAAA,KAAAhD,MAAA,CAAAmC,KAAA,CAAAC,YAAA,CAAAJ,WAAAK,gBAAA,EAAAW,aAAA;AACA,gBAAA,KAAAhD,MAAA,CAAAmC,KAAA,CAAArD,SAAA,CAAAkE,aAAA,CAAA;AACA;AAAA,iBAAAjD,GAAA,CAAAjB,SAAA,CAAAmE,cAAA,CAAA7E,QAAA,EAAA;AACA,eAAA,CAAA;AAAA,iBAAA2B,GAAA,CAAAjB,SAAA,CAAAoE,WAAA,CAAA9E,QAAA,EAAA;AACA,eAAA,CAAA;AAAA,iBAAA2B,GAAA,CAAAjB,SAAA,CAAAqE,gBAAA,CAAA/E,QAAA,EAAA;AAHA;;AAMA+C,WAAAiC,YAAA,CAAAjC,GAAAkC,SAAA,EAAArB,WAAAsB,UAAA,EAAAnC,GAAAoC,cAAA,EAAAvB,WAAAwB,UAAA,GAAA,CAAA;AACA;AAEA;;;4BAEAjE,Q,EAAAE,Q,EAAA;AACA,UAAAF,QAAA,EAAA;AACA,aAAAA,QAAA,CAAAgB,CAAA,GAAAhB,SAAA,CAAA,CAAA;AACA,aAAAA,QAAA,CAAAiB,CAAA,GAAAjB,SAAA,CAAA,CAAA;AACA,aAAAW,SAAA,GAAAX,SAAA,CAAA,CAAA;AACA;;AAEA,UAAAE,QAAA,EAAA;AACA,aAAAA,QAAA,GAAAA,QAAA;AACA;;AAEA,WAAAO,MAAA,CAAAyD,OAAA,CAAA,CAAA,KAAAlE,QAAA,CAAAgB,CAAA,GAAA,KAAAb,KAAA,CAAAa,CAAA,EAAA,KAAAhB,QAAA,CAAAiB,CAAA,GAAA,KAAAd,KAAA,CAAAc,CAAA,EAAA,KAAAN,SAAA,GAAA,KAAAO,MAAA,CAAA,EACAhB,WAAA,KAAAM,GAAA,CAAAxB,QAAA,CAAAwC,eAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAAtB,WAAA,GAAA,CAAA,GAAA,IADA;AAEA;;;kCAEAF,Q,EAAAE,Q,EAAA;AACA,UAAAF,QAAA,EAAA;AACA,aAAAA,QAAA,CAAAgB,CAAA,GAAAhB,SAAA,CAAA,CAAA;AACA,aAAAA,QAAA,CAAAiB,CAAA,GAAAjB,SAAA,CAAA,CAAA;AACA,aAAAW,SAAA,GAAAX,SAAA,CAAA,CAAA;AACA;;AAEA,UAAAE,QAAA,EAAA;AACA,aAAAA,QAAA,GAAAA,QAAA;AACA;;AAEA,WAAAO,MAAA,CAAA0D,aAAA,CAAA,CAAA,KAAAnE,QAAA,CAAAgB,CAAA,GAAA,KAAAb,KAAA,CAAAa,CAAA,EAAA,KAAAhB,QAAA,CAAAiB,CAAA,GAAA,KAAAd,KAAA,CAAAc,CAAA,EAAA,KAAAN,SAAA,GAAA,KAAAO,MAAA,CAAA,EACAhB,WAAA,KAAAM,GAAA,CAAAxB,QAAA,CAAAwC,eAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAAtB,WAAA,GAAA,CAAA,GAAA,IADA;AAEA;;;6CAEAkE,I,EAAAC,K,EAAA;AACA,WAAA5D,MAAA,CAAA6D,wBAAA,CAAAF,IAAA,EAAAC,KAAA;AACA;;;sCAEA;AACA,aAAA,KAAA5D,MAAA,CAAA8D,eAAA,EAAA;AACA;;;qCAEA;;AAEA,UAAAvE,WAAA,CAAA,KAAAA,QAAA,CAAAgB,CAAA,GAAA,KAAAb,KAAA,CAAAa,CAAA,EAAA,KAAAhB,QAAA,CAAAiB,CAAA,GAAA,KAAAd,KAAA,CAAAc,CAAA,EAAA,KAAAN,SAAA,GAAA,KAAAO,MAAA,CAAA;AACA,UAAAhB,WAAA,KAAAM,GAAA,CAAAxB,QAAA,CAAAwC,eAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,KAAAtB,QAAA,GAAA,GAAA,CAAA;;AAEA,UAAA,KAAAH,WAAA,CAAAS,GAAA,CAAA3B,QAAA,CAAAM,IAAA,KAAAC,OAAAC,IAAA,CAAAmF,eAAA,EAAA;AACA,aAAA/D,MAAA,GAAA,KAAAV,WAAA,CAAAA,WAAA,CAAA0E,sBAAA,CAAAzE,QAAA,EAAAE,QAAA,CAAA;AACA,aAAAO,MAAA,CAAAiE,YAAA,GAAA,KAAA3E,WAAA,CAAA4E,iBAAA;AACA,OAHA,MAGA;AACA,aAAAvC,aAAA,GAAA,IAAAwC,2BAAA,CAAA,KAAApE,GAAA,CAAA;AACA,aAAAC,MAAA,GAAA,KAAAV,WAAA,CAAAA,WAAA,CAAA8E,iBAAA,CAAA7E,QAAA,EAAAE,QAAA,EAAA,KAAAkC,aAAA,CAAA;AACA,aAAA3B,MAAA,CAAAqE,aAAA,GAAA,KAAA/E,WAAA,CAAA+E,aAAA;AACA;;AAEA;AACA,WAAA/E,WAAA,CAAAkD,QAAA,CAAA8B,OAAA,CAAA,mBAAA;AACA9E,aAAApB,QAAA,CAAAmG,aAAA,CAAAhC,QAAAG,WAAA;AACA,OAFA;;AAIA,WAAAvC,OAAA,CAAAqE,QAAA;AACA;;;wBAtHA;AACA,aAAA,KAAAxE,MAAA,KAAA,IAAA;AACA;;;;EAtCArB,OAAA8F,K;;ICAAC,yB;AAEA,qCAAA1D,OAAA,EAAA2D,UAAA,EAAA;AAAA;;AAEA,SAAA5E,GAAA,GAAAiB,OAAA;AACA,SAAA2D,UAAA,GAAAA,UAAA;AACA,SAAArF,WAAA,GAAA,IAAA;AACA,SAAAsF,qBAAA,GAAA,CAAA,CAAA;AACA,SAAAP,aAAA,GAAA,IAAA;;AAEA,SAAAlE,OAAA,GAAA,IAAAxB,OAAAyB,MAAA,EAAA;;AAEA,QAAAyE,qBAAA,IAAA;AACA,SAAA9E,GAAA,CAAAxB,QAAA,CAAAa,UAAA,CAAA,KAAAW,GAAA,CAAA1B,eAAA,GAAAsG,UAAA,EAAA,UAAArF,WAAA,EAAA;AACAuF,yBAAAC,eAAA,CAAAxF,WAAA;AACA,KAFA;AAGA;;;;mCAMAyF,E,EAAA;AACA,UAAA,KAAAhF,GAAA,CAAAtB,2BAAA,EAAAsG,KAAAA,GAAAC,OAAA,CAAA,WAAA,EAAA,EAAA,CAAA;AACA;AACA,UAAAC,aAAAzF,KAAA0F,KAAA,CAAAC,MAAA,CAAAC,KAAA;AACA,UAAAC,YAAAJ,WAAAF,EAAA,CAAA;AACA,UAAA,CAAAM,SAAA,EAAA;AACA,YAAA9C,UAAA,IAAA;AACA;AACA;AACA+C,eAAAC,IAAA,CAAAN,UAAA,EAAAX,OAAA,CAAA,gBAAA;AACA,cAAAkB,OAAAP,WAAAtB,IAAA,CAAA;AAAA,cAAA8B,SAAAD,KAAAE,SAAA,CAAAC,WAAA;AACA,cAAAF,UAAAA,OAAAG,cAAA,CAAAb,EAAA,CAAA,EAAA;AACA;AACA;AACA,gBAAAc,aAAAJ,OAAAV,EAAA,CAAA;AACA,gBAAAe,QAAAN,KAAAE,SAAA,CAAAK,OAAA,CAAAF,UAAA,CAAA;AACA,gBAAAG,OAAA,IAAApH,KAAAqH,SAAA,CAAAH,MAAAvF,CAAA,EAAAuF,MAAAtF,CAAA,EAAAsF,MAAAI,KAAA,EAAAJ,MAAAK,MAAA,CAAA;AACA;AACA;AACA5D,sBAAA,IAAA3D,KAAAwH,OAAA,CAAAZ,KAAAa,IAAA,EAAAL,IAAA,EAAAA,IAAA,CAAA;AACA;AACAzD,oBAAA+D,IAAA,GAAAN,IAAA;AACA;AACA,SAdA;;AAgBA,eAAAzD,OAAA;AACA,OArBA,MAqBA;AACA,YAAAG,cAAA2C,UAAAgB,IAAA;AACA,eAAA,IAAA1H,OAAAC,IAAA,CAAAwH,OAAA,CAAA1D,WAAA,EAAA2C,UAAAS,KAAA,CAAA;AACA;AAEA;;;oCAEAxG,W,EAAA;AAAA;;AACA,WAAAA,WAAA,GAAAA,WAAA;AACA,WAAAkD,QAAA,GAAA,EAAA;AACA,WAAA0B,iBAAA,GAAA,EAAA;AACA,UAAAqC,cAAAjH,YAAAkD,QAAA,CAAAgE,MAAA;AACA,WAAA5B,qBAAA,GAAA2B,WAAA;;AAEA,WAAA,IAAAE,aAAA,CAAA,EAAAA,aAAAF,WAAA,EAAA,EAAAE,UAAA,EAAA;AACA,YAAAC,cAAApH,YAAAkD,QAAA,CAAAiE,UAAA,CAAA;AACA,YAAAlE,UAAA,KAAAoE,cAAA,CAAAD,WAAA,CAAA;;AAEA,YAAA,CAAAnE,OAAA;AACA;AACAA,oBAAA3D,KAAAwH,OAAA,CAAAQ,SAAA,CAAA,KAAA7G,GAAA,CAAAzB,gBAAA,GAAAoI,WAAA,CAAA;;AAEA,YAAAnE,QAAAG,WAAA,CAAAmE,SAAA,EAAA;AACA,eAAAC,gBAAA,CAAAL,UAAA,EAAAlE,OAAA;AACA,SAFA,MAEA;AAAA;AACA,gBAAAwE,WAAA,UAAAC,IAAA,EAAAP,UAAA,EAAAlE,OAAA,EAAA;AACAA,sBAAA0E,GAAA,CAAA,QAAA,EAAAF,QAAA;AACA,qBAAA,YAAA;AACAC,qBAAAF,gBAAA,CAAAL,UAAA,EAAAlE,OAAA;AACA,eAFA;AAGA,aALA,SAKAkE,UALA,EAKAlE,OALA,CAAA;;AAOAA,oBAAA2E,EAAA,CAAA,QAAA,EAAAH,QAAA;AARA;AASA;AACA;AACA;;;qCAEAI,K,EAAA5E,O,EAAA;AACA,WAAAC,QAAA,CAAA2E,KAAA,IAAA5E,OAAA;;AAEA,WAAAqC,qBAAA;;AAEA,UAAA,KAAA7E,GAAA,CAAA3B,QAAA,CAAAM,IAAA,KAAAC,OAAAC,IAAA,CAAAmF,eAAA,EAAA;AACA,YAAAqB,QAAA7C,QAAAG,WAAA,CAAA0E,MAAA;AACA,aAAAlD,iBAAA,CAAAiD,KAAA,IAAA,IAAA,KAAApH,GAAA,CAAAxB,QAAA,CAAA8I,SAAA,CAAAjC,KAAA,EAAA7C,QAAA+E,IAAA,CAAA/G,CAAA,EAAAgC,QAAA+E,IAAA,CAAA9G,CAAA,EACA+B,QAAA+E,IAAA,CAAApB,KADA,EACA3D,QAAA+E,IAAA,CAAAnB,MADA,CAAA;AAEA;;AAEA,UAAA,KAAAvB,qBAAA,KAAA,CAAA,EAAA;;AAEA,YAAA,KAAA7E,GAAA,CAAA3B,QAAA,CAAAM,IAAA,KAAAC,OAAAC,IAAA,CAAAC,cAAA,EAAA;AACA,eAAA0I,0BAAA;AACA;AACA;AACA,aAAApH,OAAA,CAAAqE,QAAA;AACA;AACA;;;kCAEAjC,O,EAAA;AACA,aAAAA,QAAAuD,KAAA,CAAAI,KAAA,GAAA3D,QAAAG,WAAA,CAAAwD,KAAA,IAAA3D,QAAAuD,KAAA,CAAAK,MAAA,GAAA5D,QAAAG,WAAA,CAAAyD,MAAA;AACA;;;iDAGA;AACA,UAAAqB,cAAA,KAAA;;AAEA,WAAA,IAAAC,SAAA,CAAA,EAAAA,SAAA,KAAAjF,QAAA,CAAAgE,MAAA,EAAA,EAAAiB,MAAA,EAAA;AACA;AACA,YAAA,KAAAC,aAAA,CAAA,KAAAlF,QAAA,CAAAiF,MAAA,CAAA,CAAA,EAAA;AACAD,wBAAA,IAAA;AACA;AACA;AACA;;AAEA,WAAAnD,aAAA,GAAA,EAAA;AACA,UAAAmD,WAAA,EAAA;AACA,YAAAG,IAAA,KAAAnF,QAAA,CAAAgE,MAAA;AACA,aAAA,IAAAiB,UAAA,CAAA,EAAAA,UAAAE,CAAA,EAAA,EAAAF,OAAA,EAAA;AACA,cAAAlF,UAAA,KAAAC,QAAA,CAAAiF,OAAA,CAAA;AAAA,cACAH,OAAA/E,QAAA+E,IADA;AAAA,cAEAjB,OAAA9D,QAAAG,WAFA;;AAIA,eAAA2B,aAAA,CAAAoD,OAAA,IAAA,IAAA,KAAA1H,GAAA,CAAAxB,QAAA,CAAAqJ,OAAA,CACAN,KAAA/G,CAAA,GAAA8F,KAAAH,KADA,EAEA,MAAA,CAAAoB,KAAA9G,CAAA,GAAA8G,KAAAnB,MAAA,IAAAE,KAAAF,MAFA,EAGAmB,KAAApB,KAAA,GAAAG,KAAAH,KAHA,EAIAoB,KAAAnB,MAAA,GAAAE,KAAAF,MAJA,CAAA;AAMA;AACA;AACA;;;wBAxHA;AACA,aAAA,KAAAvB,qBAAA,KAAA,CAAA;AACA;;;;;;ICpBAiD,oB,GACA,8BAAAC,OAAA,EAAA;AAAA;;AACA,OAAAA,OAAA,GAAAA,OAAA;AACA,OAAAC,IAAA,GAAAnJ,KAAAmJ,IAAA,EAAA;AACA,OAAAC,UAAA,GAAA,CAAAF,QAAAG,uBAAA,EAAAH,QAAAI,cAAA,EAAAJ,QAAAK,qBAAA,CAAA;AACA,C;;IAGApJ,uB;AAEA,mCAAAX,QAAA,EAAA;AAAA;;AACA,SAAA+C,EAAA,GAAA/C,SAAA+C,EAAA;;AAEA,QAAAiH,qBAAA;;;;;;;;;;;;;;;;;;;;EAAA;;AAsBA,QAAAC,uBAAA;;;;;;;;;;;;EAAA;;AAcA,QAAAC,+BAAA;;;;;;;;;;;;;;;;EAAA;;AAkBA,SAAAC,aAAA,GAAA,KAAAC,kBAAA,CAAAJ,kBAAA,EAAAC,oBAAA,CAAA;AACA,SAAAI,qBAAA,GAAA,KAAAD,kBAAA,CAAAJ,kBAAA,EAAAE,4BAAA,CAAA;;AAEA,SAAAC,aAAA,CAAAG,MAAA,GAAA,IAAAb,oBAAA,CAAA,KAAAU,aAAA,CAAA;AACA,SAAAE,qBAAA,CAAAC,MAAA,GAAA,IAAAb,oBAAA,CAAA,KAAAY,qBAAA,CAAA;AACArK,aAAAuK,aAAA,CAAAC,SAAA,CAAA,KAAAL,aAAA,CAAAG,MAAA;;AAEA,SAAAG,OAAA,GAAA,IAAA;AACA,SAAAC,cAAA,GAAA,IAAA;AACA;;;;+BAEA,CACA;;;6CAEA;AACA,aAAA,KAAAP,aAAA,CAAAN,uBAAA;AACA;;;0CAEA;AACA,aAAA,KAAAM,aAAA,CAAAL,cAAA;AACA;;;sCAEAf,K,EAAA;AACA,aAAA,KAAAoB,aAAA,CAAAJ,qBAAA,CAAAhB,KAAA,CAAA;AACA;;;0BAEA4B,gB,EAAAC,Y,EAAAtJ,K,EAAA;AACA,WAAAqJ,gBAAA,GAAAA,iBAAAE,KAAA,EAAA;AACA,WAAAD,YAAA,GAAAA,aAAAC,KAAA,EAAA;AACA,WAAAvJ,KAAA,GAAAA,MAAAuJ,KAAA,EAAA;AACA,WAAAH,cAAA,GAAA,IAAA;AACA;;;mCAEA1K,Q,EAAA;AACA,WAAA8K,WAAA,CAAA9K,QAAA,EAAA,KAAAmK,aAAA;AACAnK,eAAA+K,gBAAA,CAAAC,YAAA,CAAA,CAAA;AACA;;;gCAEAhL,Q,EAAA;AACA,WAAA8K,WAAA,CAAA9K,QAAA,EAAA,KAAAmK,aAAA;AACAnK,eAAA+K,gBAAA,CAAAC,YAAA,CAAA,CAAA;AACA;;;qCAEAhL,Q,EAAA;AACA,WAAA8K,WAAA,CAAA9K,QAAA,EAAA,KAAAqK,qBAAA;AACArK,eAAA+K,gBAAA,CAAAC,YAAA,CAAA,CAAA;AACA;;;gCAEAhL,Q,EAAA0J,O,EAAA;AACA,UAAA3G,KAAA,KAAAA,EAAA;AACA,UAAA2G,YAAA,KAAAgB,cAAA,EAAA;AACA1K,iBAAAuK,aAAA,CAAAC,SAAA,CAAAd,QAAAY,MAAA;AACA;AACAvH,WAAAkI,UAAA,CAAAvB,QAAAwB,uBAAA,EAAA,KAAAP,gBAAA;AACA5H,WAAAkI,UAAA,CAAAvB,QAAAyB,mBAAA,EAAA,KAAAP,YAAA;AACA7H,WAAAqI,SAAA,CAAA1B,QAAA2B,cAAA,EAAA,CAAA;AACAtI,WAAAuI,SAAA,CAAA5B,QAAA6B,YAAA,EAAA,KAAAjK,KAAA,CAAA,CAAA,CAAA,EAAA,KAAAA,KAAA,CAAA,CAAA,CAAA;;AAEA,aAAAoJ,cAAA,GAAAhB,OAAA;AACA;AACA;;;uCAEAM,kB,EAAAC,oB,EAAA;AACA,UAAAlH,KAAA,KAAAA,EAAA;;AAEA,UAAAyI,eAAAzI,GAAA0I,YAAA,CAAA1I,GAAA2I,aAAA,CAAA;AACA3I,SAAA4I,YAAA,CAAAH,YAAA,EAAAxB,kBAAA;AACAjH,SAAA6I,aAAA,CAAAJ,YAAA;;AAEA,UAAA,CAAAzI,GAAA8I,kBAAA,CAAAL,YAAA,EAAAzI,GAAA+I,cAAA,CAAA,EAAA;AACAC,cAAAhJ,GAAAiJ,gBAAA,CAAAR,YAAA,CAAA;AACA,eAAA,IAAA;AACA;;AAEA,UAAAS,iBAAAlJ,GAAA0I,YAAA,CAAA1I,GAAAmJ,eAAA,CAAA;AACAnJ,SAAA4I,YAAA,CAAAM,cAAA,EAAAhC,oBAAA;AACAlH,SAAA6I,aAAA,CAAAK,cAAA;;AAEA,UAAA,CAAAlJ,GAAA8I,kBAAA,CAAAI,cAAA,EAAAlJ,GAAA+I,cAAA,CAAA,EAAA;AACAC,cAAAhJ,GAAAiJ,gBAAA,CAAAC,cAAA,CAAA;AACA,eAAA,IAAA;AACA;;AAEA,UAAA9B,gBAAApH,GAAAoJ,aAAA,EAAA;AACApJ,SAAAqJ,YAAA,CAAAjC,aAAA,EAAAqB,YAAA;AACAzI,SAAAqJ,YAAA,CAAAjC,aAAA,EAAA8B,cAAA;AACAlJ,SAAAsJ,WAAA,CAAAlC,aAAA;;AAEA,UAAA,CAAApH,GAAAuJ,mBAAA,CAAAnC,aAAA,EAAApH,GAAAwJ,WAAA,CAAA,EAAA;AACAR,cAAA,8BAAA;AACA;;AAEAhJ,SAAAyJ,UAAA,CAAArC,aAAA;;AAEAA,oBAAAN,uBAAA,GAAA9G,GAAA0J,iBAAA,CAAAtC,aAAA,EAAA,iBAAA,CAAA;AACAA,oBAAAL,cAAA,GAAA/G,GAAA0J,iBAAA,CAAAtC,aAAA,EAAA,QAAA,CAAA;AACAA,oBAAAJ,qBAAA,GAAA,CAAAhH,GAAA0J,iBAAA,CAAAtC,aAAA,EAAA,eAAA,CAAA,CAAA;;AAEAA,oBAAAe,uBAAA,GAAAnI,GAAA2J,kBAAA,CAAAvC,aAAA,EAAA,kBAAA,CAAA;AACAA,oBAAAgB,mBAAA,GAAApI,GAAA2J,kBAAA,CAAAvC,aAAA,EAAA,cAAA,CAAA;AACAA,oBAAAkB,cAAA,GAAAtI,GAAA2J,kBAAA,CAAAvC,aAAA,EAAA,UAAA,CAAA;AACAA,oBAAAoB,YAAA,GAAAxI,GAAA2J,kBAAA,CAAAvC,aAAA,EAAA,OAAA,CAAA;;AAEA,aAAAA,aAAA;AACA;;;;;;IC3KApE,2B;AACA,uCAAAnD,OAAA,EAAA+J,eAAA,EAAA;AAAA;;AACA,SAAAhL,GAAA,GAAAiB,OAAA;AACA,SAAAG,EAAA,GAAA,KAAApB,GAAA,CAAA3B,QAAA,CAAA+C,EAAA;;AAEA,SAAA6J,SAAA,GAAA,IAAA;AACA,SAAAC,MAAA,GAAA,IAAA;AACA,SAAAC,SAAA,GAAA,EAAA;AACA,SAAAC,cAAA,GAAA,CAAA;AACA,SAAAC,WAAA,GAAA,CAAA;AACA,SAAAC,OAAA,GAAA,IAAA;;AAEA,SAAApJ,WAAA,GAAA,EAAA;AACA,SAAAqJ,iBAAA,GAAA,CAAA;AACA,SAAAvJ,cAAA,GAAA,CAAA;AACA;;;;+BAEAoJ,c,EAAAI,W,EAAAF,O,EAAAC,iB,EAAA;AACA,UAAAnK,KAAA,KAAAA,EAAA;;AAEA,WAAA6J,SAAA,GAAA,IAAAQ,YAAA,CAAA,IAAAC,WAAA,CAAA,IAAAN,cAAA,GAAA,CAAA,CAAA,CAAA;AACA,WAAAF,MAAA,GAAA,IAAAS,UAAA,CAAA,IAAAD,WAAA,CAAA,IAAAN,cAAA,CAAA,CAAA;AACA,WAAAD,SAAA,GAAA,EAAA;AACA,WAAA,IAAAS,aAAA,CAAA,EAAAA,aAAAJ,YAAA/E,MAAA,EAAA,EAAAmF,UAAA,EAAA;AACA,aAAAT,SAAA,CAAAS,UAAA,IAAA,IAAAH,YAAA,CAAA,IAAAC,WAAA,CAAA,IAAAN,cAAA,GAAAI,YAAAI,UAAA,CAAA,CAAA,CAAA;AACA,aAAAT,SAAA,CAAAS,UAAA,EAAAC,aAAA,GAAAL,YAAAI,UAAA,CAAA;AACA;AACA,WAAAR,cAAA,GAAAA,cAAA;;AAEA,WAAAE,OAAA,GAAA,IAAAQ,WAAA,CAAA,IAAAJ,WAAA,CAAA,IAAAJ,QAAA7E,MAAA,CAAA,CAAA;AACA,WAAA6E,OAAA,CAAApL,GAAA,CAAAoL,OAAA,EAAA,CAAA;;AAEA,WAAAC,iBAAA,GAAAA,iBAAA;;AAEA,WAAAQ,cAAA,GAAA3K,GAAA4K,YAAA,EAAA;AACA5K,SAAA6K,UAAA,CAAA7K,GAAA8K,YAAA,EAAA,KAAAH,cAAA;AACA3K,SAAA+K,UAAA,CAAA/K,GAAA8K,YAAA,EAAA,KAAAjB,SAAA,EAAA7J,GAAAgL,YAAA;;AAEA,WAAAC,WAAA,GAAAjL,GAAA4K,YAAA,EAAA;AACA5K,SAAA6K,UAAA,CAAA7K,GAAA8K,YAAA,EAAA,KAAAG,WAAA;AACAjL,SAAA+K,UAAA,CAAA/K,GAAA8K,YAAA,EAAA,KAAAhB,MAAA,EAAA9J,GAAAgL,YAAA;;AAEA,WAAAE,UAAA,GAAA,EAAA;AACA,WAAA,IAAAnK,WAAA,CAAA,EAAAA,WAAA,KAAAgJ,SAAA,CAAA1E,MAAA,EAAA,EAAAtE,QAAA,EAAA;AACA,YAAAoK,SAAAnL,GAAA4K,YAAA,EAAA;AACA5K,WAAA6K,UAAA,CAAA7K,GAAA8K,YAAA,EAAAK,MAAA;AACAnL,WAAA+K,UAAA,CAAA/K,GAAA8K,YAAA,EAAA,KAAAf,SAAA,CAAAhJ,QAAA,CAAA,EAAAf,GAAAgL,YAAA;AACA,aAAAE,UAAA,CAAAE,IAAA,CAAAD,MAAA;AACA;;AAEA,WAAAE,aAAA,GAAArL,GAAA4K,YAAA,EAAA;AACA5K,SAAA6K,UAAA,CAAA7K,GAAAsL,oBAAA,EAAA,KAAAD,aAAA;AACArL,SAAA+K,UAAA,CAAA/K,GAAAsL,oBAAA,EAAA,KAAApB,OAAA,EAAAlK,GAAAuL,WAAA;AACA;;;+BAEAC,M,EAAA;AACA,WAAA3B,SAAA,CAAA/K,GAAA,CAAA0M,OAAApN,QAAA,EAAA,KAAA6L,WAAA,GAAA,CAAA;AACA,WAAAH,MAAA,CAAAhL,GAAA,CAAA0M,OAAAC,KAAA,EAAA,KAAAxB,WAAA,GAAA,CAAA;;AAEA,WAAA,IAAAlJ,WAAA,CAAA,EAAAA,WAAAyK,OAAAzB,SAAA,CAAA1E,MAAA,EAAA,EAAAtE,QAAA,EAAA;AACA,aAAAgJ,SAAA,CAAAhJ,QAAA,EAAAjC,GAAA,CAAA0M,OAAAzB,SAAA,CAAAhJ,QAAA,CAAA,EACA,KAAAkJ,WAAA,GAAA,KAAAF,SAAA,CAAAhJ,QAAA,EAAA0J,aADA;AAEA;;AAEA,QAAA,KAAAR,WAAA;AACA;;;mCAEAyB,E,EAAA;;AAEA,UAAA,KAAA9K,cAAA,IAAA,KAAAE,WAAA,CAAAuE,MAAA,EACA,KAAAvE,WAAA,CAAAsK,IAAA,CAAAjH,OAAAwH,MAAA,CAAA,EAAA,EAAAD,EAAA,CAAA,EADA,KAGAvH,OAAAwH,MAAA,CAAA,KAAA7K,WAAA,CAAA,KAAAF,cAAA,CAAA,EAAA8K,EAAA;;AAEA,QAAA,KAAA9K,cAAA;AACA;;;8BAEA;AACA,WAAAqJ,WAAA,GAAA,CAAA;AACA,WAAArJ,cAAA,GAAA,CAAA;AACA;;;sCAEA;AACA,UAAAZ,KAAA,KAAAA,EAAA;;AAEAA,SAAA6K,UAAA,CAAA7K,GAAA8K,YAAA,EAAA,KAAAH,cAAA;AACA3K,SAAA4L,aAAA,CAAA5L,GAAA8K,YAAA,EAAA,CAAA,EAAA,KAAAjB,SAAA,EAAA,CAAA,EAAA,KAAAI,WAAA,GAAA,CAAA;;AAEAjK,SAAA6K,UAAA,CAAA7K,GAAA8K,YAAA,EAAA,KAAAG,WAAA;AACAjL,SAAA4L,aAAA,CAAA5L,GAAA8K,YAAA,EAAA,CAAA,EAAA,KAAAhB,MAAA,EAAA,CAAA,EAAA,KAAAG,WAAA,GAAA,CAAA;;AAEA,WAAAiB,UAAA,CAAA/H,OAAA,CAAA,UAAAgI,MAAA,EAAAnF,KAAA,EAAA;AACAhG,WAAA6K,UAAA,CAAA7K,GAAA8K,YAAA,EAAAK,MAAA;AACAnL,WAAA4L,aAAA,CAAA5L,GAAA8K,YAAA,EAAA,CAAA,EAAA,KAAAf,SAAA,CAAA/D,KAAA,CAAA,EAAA,CAAA,EAAA,KAAAiE,WAAA,GACA,KAAAF,SAAA,CAAA/D,KAAA,EAAAyE,aADA;AAEA,OAJA,EAIA,IAJA;AAKA;;;2BAEA;AACA,UAAAzK,KAAA,KAAAA,EAAA;AACA,UAAArC,YAAA,KAAAiB,GAAA,CAAAjB,SAAA;;AAEA;AACAqC,WAAA6K,UAAA,CAAA7K,GAAA8K,YAAA,EAAA,KAAAH,cAAA;AACA;AACA;AACA3K,WAAA6L,mBAAA,CAAAlO,UAAAmO,sBAAA,EAAA,EAAA,CAAA,EAAA9L,GAAA+L,KAAA,EAAA,KAAA,EAAA,CAAA,EAAA,CAAA;AACA;;AAEA;AACA/L,WAAA6K,UAAA,CAAA7K,GAAA8K,YAAA,EAAA,KAAAG,WAAA;AACA;AACA;AACAjL,WAAA6L,mBAAA,CAAAlO,UAAAqO,mBAAA,EAAA,EAAA,CAAA,EAAAhM,GAAAiM,aAAA,EAAA,IAAA,EAAA,CAAA,EAAA,CAAA;AACA;;AAEA,WAAAf,UAAA,CAAA/H,OAAA,CAAA,UAAAgI,MAAA,EAAAnF,KAAA,EAAA;;AAEAhG,WAAA6K,UAAA,CAAA7K,GAAA8K,YAAA,EAAAK,MAAA;AACA;AACA;AACAnL,WAAA6L,mBAAA,CAAAlO,UAAAuO,iBAAA,CAAAlG,KAAA,CAAA,EACA,KAAA+D,SAAA,CAAA/D,KAAA,EAAAyE,aADA,EACAzK,GAAA+L,KADA,EACA,KADA,EACA,CADA,EACA,CADA;AAGA,OARA,EAQA,IARA;;AAUA/L,SAAA6K,UAAA,CAAA7K,GAAAsL,oBAAA,EAAA,KAAAD,aAAA;AACA;;;+BAEA;AACA,UAAArL,KAAA,KAAAA,EAAA;;AAEAA,SAAAmM,YAAA,CAAA,KAAAxB,cAAA;AACA3K,SAAAmM,YAAA,CAAA,KAAAlB,WAAA;;AAEA,WAAAC,UAAA,CAAA/H,OAAA,CAAA,UAAAgI,MAAA,EAAA;AACAnL,WAAAmM,YAAA,CAAAhB,MAAA;AACA,OAFA,EAEA,IAFA;AAGA","file":"neutrinoparticles.phaser.js","sourcesContent":["class PhaserNeutrinoContext {\n\n  constructor(renderer, effectsBasePath = \"\", texturesBasePath = \"\") {\n    this.renderer = renderer;\n    this.neutrino = new NeutrinoParticles();\n    this.effectsBasePath = effectsBasePath;\n    this.texturesBasePath = texturesBasePath;\n    this.trimmedExtensionLookupFirst = true;\n\n    if (renderer.type === Phaser.PIXI.WEBGL_RENDERER) {\n      this.materials = new PhaserNeutrinoMaterials(renderer);\n    }\n  }\n\n  initializeNoise(path, success, fail) {\n    this.neutrino.initializeNoise(path, success, fail);\n  }\n\n  loadEffect(path, success, fail) {\n    this.neutrino.loadEffect(path, success, fail);\n  }\n}","class PhaserNeutrinoEffect extends Phaser.Group {\n\n  constructor(effectModel, position, game, rotation, scale) {\n    super(game, null);\n    // console.log('PhaserNeutrinoEffect',position, scale, rotation)\n    this._renderCanvas = this.renderCanvas;\n    this._renderWebGL = this.renderWebGL;\n\n    this.ctx = effectModel.ctx;\n    this.effectModel = effectModel;\n    this.effect = null;\n    this.position.set(position[0], position[1]);\n    this.positionZ = position[2];\n\n    this.onReady = new Phaser.Signal();\n\n    if (rotation)\n      this.rotation = rotation;\n\n    if (Array.isArray(scale)) {\n      this.scale.x = scale[0];\n      this.scale.y = scale[1];\n      this.scaleZ = scale[2];\n    } else {\n      this.scaleZ = 1;\n    }\n\n    if (effectModel.isReady) {\n      this._onEffectReady();\n    } else {\n      effectModel.onReady.addOnce(function () {\n        this._onEffectReady();\n      }, this);\n    }\n  }\n\n  get isReady(){\n    return this.effect !== null;\n  }\n\n  updateParticles(dt) {\n    if (this.effect !== null) {\n      this.effect.update(dt, [this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ],\n        this.ctx.neutrino.axisangle2quat_([0, 0, 1], this.rotation % 360));\n    }\n  }\n\n  renderCanvas(renderer) {\n    if (this.isReady) {\n      renderer.context.setTransform(this.scale.x, 0, 0, this.scale.y, 0, 0);\n      this.effect.draw(renderer.context);\n    }\n  };\n\n  renderWebGL(renderer) {\n    if (!this.isReady) return;\n\n    const gl = renderer.gl;\n\n    const renderSession = game.renderer.renderSession;\n    renderSession.spriteBatch.stop();\n    const projection = renderSession.projection;\n    const offset = renderSession.offset;\n\n    this.ctx.materials.setup([projection.x, projection.y], [offset.x, offset.y], [this.scale.x, this.scale.y]);\n\n    this.effect.fillGeometryBuffers([1, 0, 0], [0, -1, 0], [0, 0, -1]);\n\n    this.renderBuffers.updateGlBuffers();\n    this.renderBuffers.bind();\n\n    for (let renderCallIdx = 0; renderCallIdx < this.renderBuffers.numRenderCalls; ++renderCallIdx) {\n      const renderCall = this.renderBuffers.renderCalls[renderCallIdx];\n      const texIndex = this.effect.model.renderStyles[renderCall.renderStyleIndex].textureIndices[0];\n\n      //ref to pixi texture\n      const texture = this.effectModel.textures[texIndex];\n\n      //instance of https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture\n      const glTexture = texture.baseTexture._glTextures[0];//game.renderer.glContextId];\n\n      gl.activeTexture(gl.TEXTURE0);\n      gl.bindTexture(gl.TEXTURE_2D, glTexture);\n\n      const materialIndex = this.effect.model.renderStyles[renderCall.renderStyleIndex].materialIndex;\n      switch (this.effect.model.materials[materialIndex]) {\n        default: this.ctx.materials.switchToNormal(renderer); break;\n        case 1: this.ctx.materials.switchToAdd(renderer); break;\n        case 2: this.ctx.materials.switchToMultiply(renderer); break;\n      }\n\n      gl.drawElements(gl.TRIANGLES, renderCall.numIndices, gl.UNSIGNED_SHORT, renderCall.startIndex * 2);\n    }\n\n  }\n\n  restart(position, rotation) {\n    if (position) {\n      this.position.x = position[0];\n      this.position.y = position[1];\n      this.positionZ = position[2];\n    }\n\n    if (rotation) {\n      this.rotation = rotation;\n    }\n\n    this.effect.restart([this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ],\n      rotation ? this.ctx.neutrino.axisangle2quat_([0, 0, 1], rotation % 360) : null);\n  }\n\n  resetPosition(position, rotation) {\n    if (position) {\n      this.position.x = position[0];\n      this.position.y = position[1];\n      this.positionZ = position[2];\n    }\n\n    if (rotation) {\n      this.rotation = rotation;\n    }\n\n    this.effect.resetPosition([this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ],\n      rotation ? this.ctx.neutrino.axisangle2quat_([0, 0, 1], rotation % 360) : null);\n  }\n\n  setPropertyInAllEmitters(name, value) {\n    this.effect.setPropertyInAllEmitters(name, value);\n  }\n\n  getNumParticles() {\n    return this.effect.getNumParticles();\n  }\n\n  _onEffectReady() {\n\n    const position = [this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ];\n    const rotation = this.ctx.neutrino.axisangle2quat_([0, 0, 1], this.rotation % 360);\n\n    if (this.effectModel.ctx.renderer.type === Phaser.PIXI.CANVAS_RENDERER) {\n      this.effect = this.effectModel.effectModel.createCanvas2DInstance(position, rotation);\n      this.effect.textureDescs = this.effectModel.textureImageDescs;\n    } else {\n      this.renderBuffers = new PhaserNeutrinoRenderBuffers(this.ctx);\n      this.effect = this.effectModel.effectModel.createWGLInstance(position, rotation, this.renderBuffers);\n      this.effect.texturesRemap = this.effectModel.texturesRemap;\n    }\n\n    //get phaser to create webgl texture(s)\n    this.effectModel.textures.forEach(texture=>{\n      game.renderer.updateTexture(texture.baseTexture);\n    });\n\n    this.onReady.dispatch();\n  }\n}","class PhaserNeutrinoEffectModel {\n\n  constructor(context, effectPath) {\n\n    this.ctx = context;\n    this.effectPath = effectPath;\n    this.effectModel = null;\n    this.numTexturesToLoadLeft = -1;\n    this.texturesRemap = null;\n\n    this.onReady = new Phaser.Signal();\n\n    var pixiNeutrinoEffect = this;\n    this.ctx.neutrino.loadEffect(this.ctx.effectsBasePath + effectPath, function (effectModel) {\n      pixiNeutrinoEffect._onEffectLoaded(effectModel);\n    });\n  }\n\n  get isReady(){\n    return this.numTexturesToLoadLeft === 0;\n  }\n\n  _getNewTexture(id){\n    if (this.ctx.trimmedExtensionLookupFirst) id = id.replace(/\\.[^/.]+$/, \"\");\n    //TODO - see if theres a better way of accessing this image data...\n    const imageCache = game.cache._cache.image;\n    let imageData = imageCache[id];\n    if(!imageData){\n      let texture = null;\n      //have to check each cache entry :(\n      //(this is so much easier in pixi.js where all textures go into one cache!)\n      Object.keys(imageCache).forEach(name => {\n        const data = imageCache[name], fNames = data.frameData._frameNames;\n        if(fNames && fNames.hasOwnProperty(id)){\n          //this one contains the subtexture we are looking for\n          // - get a texture from it\n          const frameIndex = fNames[id];\n          const frame = data.frameData._frames[frameIndex];\n          const rect = new PIXI.Rectangle(frame.x, frame.y, frame.width, frame.height);\n          //console.log('frame', frame, 'rect',rect)\n          //PIXI.Texture(baseTexture, frame, crop, trim)\n          texture = new PIXI.Texture(data.base, rect, rect);\n          //just in case, store the rect on the texture as is done in recent pixi version\n          texture.orig = rect;\n        }\n      });\n\n      return texture;\n    } else {\n      const baseTexture = imageData.base;\n      return new Phaser.PIXI.Texture(baseTexture, imageData.frame);\n    }\n\n  }\n\n  _onEffectLoaded(effectModel) {\n    this.effectModel = effectModel;\n    this.textures = [];\n    this.textureImageDescs = [];\n    const numTextures = effectModel.textures.length;\n    this.numTexturesToLoadLeft = numTextures;\n\n    for (let imageIndex = 0; imageIndex < numTextures; ++imageIndex) {\n      const texturePath = effectModel.textures[imageIndex];\n      let texture = this._getNewTexture(texturePath);\n\n      if (!texture)\n      //TODO - fix this for Phaser\n        texture = PIXI.Texture.fromImage(this.ctx.texturesBasePath + texturePath);\n\n      if (texture.baseTexture.hasLoaded) {\n        this._onTextureLoaded(imageIndex, texture);\n      } else {\n        const callback = function (self, imageIndex, texture) {\n          texture.off('update', callback);\n          return function () {\n            self._onTextureLoaded(imageIndex, texture);\n          }\n        } (this, imageIndex, texture);\n\n        texture.on('update', callback);\n      }\n    }\n  }\n\n  _onTextureLoaded(index, texture) {\n    this.textures[index] = texture;\n\n    this.numTexturesToLoadLeft--;\n\n    if (this.ctx.renderer.type === Phaser.PIXI.CANVAS_RENDERER) {\n      const image = texture.baseTexture.source;\n      this.textureImageDescs[index] = new this.ctx.neutrino.ImageDesc(image, texture.crop.x, texture.crop.y,\n        texture.crop.width, texture.crop.height);\n    }\n\n    if (this.numTexturesToLoadLeft === 0) {\n\n      if(this.ctx.renderer.type === Phaser.PIXI.WEBGL_RENDERER){\n        this._initTexturesRemapIfNeeded();\n      }\n      //this.emit('ready', this);\n      this.onReady.dispatch();\n    }\n  }\n\n  _isSubtexture(texture){\n    return texture.frame.width < texture.baseTexture.width || texture.frame.height < texture.baseTexture.height;\n  }\n\n\n  _initTexturesRemapIfNeeded() {\n    let remapNeeded = false;\n\n    for (var texIdx = 0; texIdx < this.textures.length; ++texIdx) {\n      //checks if its an atlas subtexture\n      if (this._isSubtexture(this.textures[texIdx])) {\n        remapNeeded = true;\n        break;\n      }\n    }\n\n    this.texturesRemap = [];\n    if (remapNeeded) {\n      const n = this.textures.length;\n      for (let texIdx = 0; texIdx < n; ++texIdx) {\n        const texture = this.textures[texIdx],\n          crop = texture.crop,\n          base = texture.baseTexture;\n\n        this.texturesRemap[texIdx] = new this.ctx.neutrino.SubRect(\n          crop.x / base.width,\n          1.0 - (crop.y + crop.height) / base.height,\n          crop.width / base.width,\n          crop.height / base.height\n        );\n      }\n    }\n  }\n}","class PhaserNeutrinoShader {\n  constructor(program) {\n    this.program = program;\n    this._UID = PIXI._UID++;\n    this.attributes = [program.vertexPositionAttribute, program.colorAttribute, program.textureCoordAttribute];\n  }\n}\n\nclass PhaserNeutrinoMaterials {\n\n  constructor(renderer) {\n    this.gl = renderer.gl;\n\n    var vertexShaderSource = \"\\\n/* NeutrinoParticles Vertex Shader */ \\n\\\n\\n\\\nattribute vec3 aVertexPosition;\\n\\\nattribute vec2 aTextureCoord;\\n\\\nattribute vec4 aColor; \\n\\\n\\n\\\nuniform vec2 projectionVector;\\n\\\nuniform vec2 offsetVector; \\n\\\nuniform vec2 scale;\\n\\\n\\n\\\nvarying vec4 vColor;\\n\\\nvarying vec2 vTextureCoord;\\n\\\n\\n\\\nconst vec2 center = vec2(0, 0); \\n\\\n\\n\\\nvoid main(void) {\\n\\\ngl_Position = vec4(((aVertexPosition.xy * scale + offsetVector) / projectionVector) + center , 0.0, 1.0); \\n\\\n\tvColor = vec4(aColor.rgb * aColor.a, aColor.a);\\n\\\n\tvTextureCoord = vec2(aTextureCoord.x, 1.0 - aTextureCoord.y);\\n\\\n}\";\n\n    var fragmentShaderSource = \"\\\n/* NeutrinoParticles Fragment Shader (Normal, Add materials) */ \\n\\\n\\n\\\nprecision mediump float;\\n\\\n\\n\\\nvarying vec4 vColor;\\n\\\nvarying vec2 vTextureCoord;\\n\\\n\\n\\\nuniform sampler2D uSampler;\\n\\\n\\n\\\nvoid main(void) {\\n\\\n\tgl_FragColor = vColor * texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\\n\\\n}\";\n\n    var fragmentShaderMultiplySource = \"\\\n/* NeutrinoParticles Fragment Shader (Multiply material) */ \\n\\\n\\n\\\nprecision mediump float;\\n\\\n\\n\\\nvarying vec4 vColor;\\n\\\nvarying vec2 vTextureCoord;\\n\\\n\\n\\\nuniform sampler2D uSampler;\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\nvec4 texel = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\\n\\\nvec3 rgb = vColor.rgb * texel.rgb;\\n\\\nfloat alpha = vColor.a * texel.a;\\n\\\ngl_FragColor = vec4(mix(vec3(1, 1, 1), rgb, alpha), 1);\\n\\\n}\";\n\n    this.shaderProgram = this._makeShaderProgram(vertexShaderSource, fragmentShaderSource);\n    this.shaderProgramMultiply = this._makeShaderProgram(vertexShaderSource, fragmentShaderMultiplySource);\n\n    this.shaderProgram.shader = new PhaserNeutrinoShader(this.shaderProgram);\n    this.shaderProgramMultiply.shader = new PhaserNeutrinoShader(this.shaderProgramMultiply);\n    renderer.shaderManager.setShader(this.shaderProgram.shader);\n\n    this.pMatrix = null;\n    this.currentProgram = null;\n  }\n\n  shutdown() {\n  }\n\n  positionAttribLocation() {\n    return this.shaderProgram.vertexPositionAttribute;\n  }\n\n  colorAttribLocation() {\n    return this.shaderProgram.colorAttribute;\n  }\n\n  texAttribLocation(index) {\n    return this.shaderProgram.textureCoordAttribute[index];\n  }\n\n  setup(projectionVector, offsetVector, scale) {\n    this.projectionVector = projectionVector.slice();\n    this.offsetVector = offsetVector.slice();\n    this.scale = scale.slice();\n    this.currentProgram = null;\n  }\n\n  switchToNormal(renderer) {\n    this._setProgram(renderer, this.shaderProgram);\n    renderer.blendModeManager.setBlendMode(0);\n  }\n\n  switchToAdd(renderer) {\n    this._setProgram(renderer, this.shaderProgram);\n    renderer.blendModeManager.setBlendMode(1);\n  }\n\n  switchToMultiply(renderer) {\n    this._setProgram(renderer, this.shaderProgramMultiply);\n    renderer.blendModeManager.setBlendMode(2);\n  }\n\n  _setProgram(renderer, program) {\n    var gl = this.gl;\n    if (program !== this.currentProgram) {\n      renderer.shaderManager.setShader(program.shader);\n      // console.log('_setProgram',program.pMatrixUniform, this.pMatrix)\n      gl.uniform2fv(program.projectionVectorUniform, this.projectionVector);\n      gl.uniform2fv(program.offsetVectorUniform, this.offsetVector);\n      gl.uniform1i(program.samplerUniform, 0);\n      gl.uniform2f(program.scaleUniform, this.scale[0], this.scale[1]);\n\n      this.currentProgram = program;\n    }\n  }\n\n  _makeShaderProgram(vertexShaderSource, fragmentShaderSource) {\n    var gl = this.gl;\n\n    var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertexShader, vertexShaderSource);\n    gl.compileShader(vertexShader);\n\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      alert(gl.getShaderInfoLog(vertexShader));\n      return null;\n    }\n\n    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragmentShader, fragmentShaderSource);\n    gl.compileShader(fragmentShader);\n\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      alert(gl.getShaderInfoLog(fragmentShader));\n      return null;\n    }\n\n    var shaderProgram = gl.createProgram();\n    gl.attachShader(shaderProgram, vertexShader);\n    gl.attachShader(shaderProgram, fragmentShader);\n    gl.linkProgram(shaderProgram);\n\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n      alert(\"Could not initialise shaders\");\n    }\n\n    gl.useProgram(shaderProgram);\n\n    shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, \"aVertexPosition\");\n    shaderProgram.colorAttribute = gl.getAttribLocation(shaderProgram, \"aColor\");\n    shaderProgram.textureCoordAttribute = [gl.getAttribLocation(shaderProgram, \"aTextureCoord\")];\n\n    shaderProgram.projectionVectorUniform = gl.getUniformLocation(shaderProgram, \"projectionVector\");\n    shaderProgram.offsetVectorUniform = gl.getUniformLocation(shaderProgram, \"offsetVector\");\n    shaderProgram.samplerUniform = gl.getUniformLocation(shaderProgram, \"uSampler\");\n    shaderProgram.scaleUniform = gl.getUniformLocation(shaderProgram, \"scale\");\n\n    return shaderProgram;\n  }\n}","class PhaserNeutrinoRenderBuffers {\n  constructor(context, geometryBuffers) {\n    this.ctx = context;\n    this.gl = this.ctx.renderer.gl;\n\n    this.positions = null;\n    this.colors = null;\n    this.texCoords = [];\n    this.maxNumVertices = 0;\n    this.numVertices = 0;\n    this.indices = null;\n\n    this.renderCalls = [];\n    this.maxNumRenderCalls = 0;\n    this.numRenderCalls = 0;\n  }\n\n  initialize(maxNumVertices, texChannels, indices, maxNumRenderCalls) {\n    var gl = this.gl;\n\n    this.positions = new Float32Array(new ArrayBuffer(4 * maxNumVertices * 3));\n    this.colors = new Uint8Array(new ArrayBuffer(4 * maxNumVertices));\n    this.texCoords = [];\n    for (var texChannel = 0; texChannel < texChannels.length; ++texChannel) {\n      this.texCoords[texChannel] = new Float32Array(new ArrayBuffer(4 * maxNumVertices * texChannels[texChannel]));\n      this.texCoords[texChannel].numComponents = texChannels[texChannel];\n    }\n    this.maxNumVertices = maxNumVertices;\n\n    this.indices = new Uint16Array(new ArrayBuffer(2 * indices.length));\n    this.indices.set(indices, 0);\n\n    this.maxNumRenderCalls = maxNumRenderCalls;\n\n    this.positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this.positions, gl.DYNAMIC_DRAW);\n\n    this.colorBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this.colors, gl.DYNAMIC_DRAW);\n\n    this.texBuffers = [];\n    for (var texIndex = 0; texIndex < this.texCoords.length; ++texIndex) {\n      var buffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(gl.ARRAY_BUFFER, this.texCoords[texIndex], gl.DYNAMIC_DRAW);\n      this.texBuffers.push(buffer);\n    }\n\n    this.indicesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\n  }\n\n  pushVertex(vertex) {\n    this.positions.set(vertex.position, this.numVertices * 3);\n    this.colors.set(vertex.color, this.numVertices * 4);\n\n    for (var texIndex = 0; texIndex < vertex.texCoords.length; ++texIndex) {\n      this.texCoords[texIndex].set(vertex.texCoords[texIndex],\n        this.numVertices * this.texCoords[texIndex].numComponents);\n    }\n\n    ++this.numVertices;\n  }\n\n  pushRenderCall(rc) {\n\n    if (this.numRenderCalls >= this.renderCalls.length)\n      this.renderCalls.push(Object.assign({}, rc));\n    else\n      Object.assign(this.renderCalls[this.numRenderCalls], rc);\n\n    ++this.numRenderCalls;\n  }\n\n  cleanup() {\n    this.numVertices = 0;\n    this.numRenderCalls = 0;\n  }\n\n  updateGlBuffers() {\n    var gl = this.gl;\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.positions, 0, this.numVertices * 3);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.colors, 0, this.numVertices * 4);\n\n    this.texBuffers.forEach(function (buffer, index) {\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.texCoords[index], 0, this.numVertices *\n        this.texCoords[index].numComponents);\n    }, this);\n  }\n\n  bind() {\n    var gl = this.gl;\n    var materials = this.ctx.materials;\n\n    {\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\n      // attribute is enabled inside PIXI\n      //gl.enableVertexAttribArray(materials.positionAttribLocation());\n      gl.vertexAttribPointer(materials.positionAttribLocation(), 3, gl.FLOAT, false, 0, 0);\n    }\n\n    {\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);\n      // attribute is enabled inside PIXI\n      //gl.enableVertexAttribArray(materials.colorAttribLocation());\n      gl.vertexAttribPointer(materials.colorAttribLocation(), 4, gl.UNSIGNED_BYTE, true, 0, 0);\n    }\n\n    this.texBuffers.forEach(function (buffer, index) {\n\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      // attribute is enabled inside PIXI\n      //gl.enableVertexAttribArray(materials.texAttribLocation(index));\n      gl.vertexAttribPointer(materials.texAttribLocation(index),\n        this.texCoords[index].numComponents, gl.FLOAT, false, 0, 0);\n\n    }, this);\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n  }\n\n  shutdown() {\n    var gl = this.gl;\n\n    gl.deleteBuffer(this.positionBuffer);\n    gl.deleteBuffer(this.colorBuffer);\n\n    this.texBuffers.forEach(function (buffer) {\n      gl.deleteBuffer(buffer);\n    }, this);\n  }\n}"]}