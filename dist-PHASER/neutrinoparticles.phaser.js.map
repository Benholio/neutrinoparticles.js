{"version":3,"sources":["PhaserNeutrino.js","PhaserNeutrinoContext.js","PhaserNeutrinoEffect.js","PhaserNeutrinoEffectModel.js","PhaserNeutrinoMaterials.js","PhaserNeutrinoRenderBuffers.js"],"names":["PhaserNeutrino","config","effects","textures","neutrinoContext","PhaserNeutrinoContext","game","renderer","console","warn","noiseGenerator","neutrino","NoiseGenerator","step","effectScript","PhaserNeutrinoEffectModel","model","props","position","scale","rotation","PhaserNeutrinoEffect","Phaser","Game","prototype","GameObjectFactory","createEffect","GameObjectCreator","effectsBasePath","texturesBasePath","NeutrinoParticles","trimmedExtensionLookupFirst","type","PIXI","WEBGL_RENDERER","materials","PhaserNeutrinoMaterials","path","success","fail","initializeNoise","loadEffect","effectModel","_renderCanvas","renderCanvas","_renderWebGL","renderWebGL","ctx","effect","set","positionZ","onReady","Signal","Array","isArray","x","y","scaleZ","isReady","_onEffectReady","addOnce","dt","update","axisangle2quat_","context","setTransform","draw","gl","renderSession","spriteBatch","stop","projection","offset","setup","fillGeometryBuffers","renderBuffers","updateGlBuffers","bind","renderCallIdx","numRenderCalls","renderCall","renderCalls","texIndex","renderStyles","renderStyleIndex","textureIndices","texture","glTexture","baseTexture","_glTextures","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","materialIndex","switchToNormal","switchToAdd","switchToMultiply","drawElements","TRIANGLES","numIndices","UNSIGNED_SHORT","startIndex","restart","resetPosition","name","value","setPropertyInAllEmitters","getNumParticles","CANVAS_RENDERER","createCanvas2DInstance","textureDescs","textureImageDescs","PhaserNeutrinoRenderBuffers","createWGLInstance","texturesRemap","forEach","updateTexture","dispatch","Group","effectPath","numTexturesToLoadLeft","pixiNeutrinoEffect","_onEffectLoaded","id","replace","imageCache","cache","_cache","image","imageData","Object","keys","data","fNames","frameData","_frameNames","hasOwnProperty","frameIndex","frame","_frames","rect","Rectangle","width","height","Texture","base","orig","numTextures","length","imageIndex","texturePath","_getNewTexture","loader","load","onLoadComplete","add","log","hasLoaded","_onTextureLoaded","callback","self","off","on","index","source","ImageDesc","crop","_initTexturesRemapIfNeeded","remapNeeded","texIdx","_isSubtexture","n","SubRect","PhaserNeutrinoShader","program","_UID","attributes","vertexPositionAttribute","colorAttribute","textureCoordAttribute","vertexShaderSource","fragmentShaderSource","fragmentShaderMultiplySource","shaderProgram","_makeShaderProgram","shaderProgramMultiply","shader","shaderManager","setShader","pMatrix","currentProgram","projectionVector","offsetVector","slice","_setProgram","blendModeManager","setBlendMode","uniform2fv","projectionVectorUniform","offsetVectorUniform","uniform1i","samplerUniform","uniform2f","scaleUniform","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","getAttribLocation","getUniformLocation","geometryBuffers","positions","colors","texCoords","maxNumVertices","numVertices","indices","maxNumRenderCalls","texChannels","Float32Array","ArrayBuffer","Uint8Array","texChannel","numComponents","Uint16Array","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","colorBuffer","texBuffers","buffer","push","indicesBuffer","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","vertex","color","rc","assign","bufferSubData","vertexAttribPointer","positionAttribLocation","FLOAT","colorAttribLocation","UNSIGNED_BYTE","texAttribLocation","deleteBuffer"],"mappings":"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","file":"neutrinoparticles.phaser.js","sourcesContent":["\n/*\n  // Desired interface for NP in Phaser:\n  game.neutrino.init({\n    effects: \"export_js/\", // \"\" by default\n    textures: \"textures/\" // \"\" by default\n  });\n\n  game.neutrino.generateTurbulance(); // to generate turbulance texture\n  game.neturino.loadTurbulance(\"path_to_noise_texture\"); // to load turbulance texture\n\n  model = game.neutrino.loadModel(\"path_to_effect_file\");\n\n  effect = game.add.neutrino(model, {\n    position: [400, 300, 0], // [0, 0, 0] by default\n    rotation: 45, // 0 by default\n    scale: [1, 1] // [1, 1] by default\n  });\n\n*/\nclass PhaserNeutrino {\n\n  constructor(){\n\n  }\n\n  init(config){\n    const effects = (config && config.effects) || \"export_js/\";\n    const textures = (config && config.textures) || \"textures/\";\n    //TODO instantiate a PhaserNeutrinoContext\n    this.neutrinoContext = new PhaserNeutrinoContext(game.renderer, effects, textures);\n    return this.neutrinoContext;\n  }\n\n  generateTurbulance(){\n    if(!this.neutrinoContext) {\n      console.warn('PhaserNeutrino - call init first');\n      return;\n    }\n    const noiseGenerator = new this.neutrinoContext.neutrino.NoiseGenerator();\n    while (!noiseGenerator.step()) { // approx. 5,000 steps\n      // you can use 'noiseGenerator.progress' to get generating progress from 0.0 to 1.0\n    }\n  }\n\n  loadTurbulance(){\n    //TODO -\n  }\n\n  /**\n   *\n   * @param effectScript\n   * @returns {*}\n   */\n  loadModel(effectScript){\n    if(!this.neutrinoContext) {\n      console.warn('PhaserNeutrino - call init first');\n      return;\n    }\n    return new PhaserNeutrinoEffectModel(this.neutrinoContext, effectScript)\n  }\n\n  /**\n   *\n   * @param model\n   * @param props\n   * @param game\n   * @returns {PhaserNeutrinoEffect}\n   */\n  createEffect(model, props, game){\n    let {position, scale, rotation} = props;\n    if(!position) position = [0, 0, 0];\n    if(!scale) scale = [1, 1];\n    if(!rotation) rotation = 0;\n\n    //(effectModel, position, game, rotation, scale)\n    return new PhaserNeutrinoEffect(\n      model,\n      position,\n      game,\n      rotation,\n      scale\n    );\n  }\n}\n\nPhaser.Game.prototype.neutrino = new PhaserNeutrino();\n\n//game.add.neutrino();\nPhaser.GameObjectFactory.prototype.neutrino = function (model, props) {\n  return Phaser.Game.prototype.neutrino.createEffect(model, props, this.game);\n};\n\n//game.make.neutrino();\nPhaser.GameObjectCreator.prototype.neutrino = function (model, props) {\n  return Phaser.Game.prototype.neutrino.createEffect(model, props, this.game);\n};","class PhaserNeutrinoContext {\n\n  constructor(renderer, effectsBasePath = \"\", texturesBasePath = \"\") {\n    this.renderer = renderer;\n    this.neutrino = new NeutrinoParticles();\n    this.effectsBasePath = effectsBasePath;\n    this.texturesBasePath = texturesBasePath;\n    this.trimmedExtensionLookupFirst = true;\n\n    if (renderer.type === Phaser.PIXI.WEBGL_RENDERER) {\n      this.materials = new PhaserNeutrinoMaterials(renderer);\n    }\n  }\n\n  initializeNoise(path, success, fail) {\n    this.neutrino.initializeNoise(path, success, fail);\n  }\n\n  loadEffect(path, success, fail) {\n    this.neutrino.loadEffect(path, success, fail);\n  }\n}","class PhaserNeutrinoEffect extends Phaser.Group {\n\n  constructor(effectModel, position, game, rotation, scale) {\n    super(game, null);\n    // console.log('PhaserNeutrinoEffect',position, scale, rotation)\n    this._renderCanvas = this.renderCanvas;\n    this._renderWebGL = this.renderWebGL;\n\n    this.ctx = effectModel.ctx;\n    this.effectModel = effectModel;\n    this.effect = null;\n    this.position.set(position[0], position[1]);\n    this.positionZ = position[2];\n\n    this.onReady = new Phaser.Signal();\n\n    if (rotation)\n      this.rotation = rotation;\n\n    if (Array.isArray(scale)) {\n      this.scale.x = scale[0];\n      this.scale.y = scale[1];\n      this.scaleZ = scale[2];\n    } else {\n      this.scaleZ = 1;\n    }\n\n    if (effectModel.isReady) {\n      this._onEffectReady();\n    } else {\n      effectModel.onReady.addOnce(function () {\n        this._onEffectReady();\n      }, this);\n    }\n  }\n\n  get isReady(){\n    return this.effect !== null;\n  }\n\n  updateParticles(dt) {\n    if (this.effect !== null) {\n      this.effect.update(dt, [this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ],\n        this.ctx.neutrino.axisangle2quat_([0, 0, 1], this.rotation % 360));\n    }\n  }\n\n  renderCanvas(renderer) {\n    if (this.isReady) {\n      renderer.context.setTransform(this.scale.x, 0, 0, this.scale.y, 0, 0);\n      this.effect.draw(renderer.context);\n    }\n  };\n\n  renderWebGL(renderer) {\n    if (!this.isReady) return;\n\n    const gl = renderer.gl;\n\n    const renderSession = game.renderer.renderSession;\n    renderSession.spriteBatch.stop();\n    const projection = renderSession.projection;\n    const offset = renderSession.offset;\n    const position = this.position;\n    // console.log('projection', projection,'position',position,'offset',offset)\n    // this.ctx.materials.setup([position.x, -position.y], [offset.x, offset.y], [this.scale.x, this.scale.y]);\n    this.ctx.materials.setup([projection.x, projection.y], [offset.x, offset.y], [this.scale.x, this.scale.y]);\n\n    this.effect.fillGeometryBuffers([1, 0, 0], [0, -1, 0], [0, 0, -1]);\n\n    this.renderBuffers.updateGlBuffers();\n    this.renderBuffers.bind();\n\n    for (let renderCallIdx = 0; renderCallIdx < this.renderBuffers.numRenderCalls; ++renderCallIdx) {\n      const renderCall = this.renderBuffers.renderCalls[renderCallIdx];\n      const texIndex = this.effect.model.renderStyles[renderCall.renderStyleIndex].textureIndices[0];\n\n      //ref to pixi texture\n      const texture = this.effectModel.textures[texIndex];\n\n      //instance of https://developer.mozilla.org/en-US/docs/Web/API/WebGLTexture\n      const glTexture = texture.baseTexture._glTextures[0];//game.renderer.glContextId];\n\n      gl.activeTexture(gl.TEXTURE0);\n      gl.bindTexture(gl.TEXTURE_2D, glTexture);\n\n      const materialIndex = this.effect.model.renderStyles[renderCall.renderStyleIndex].materialIndex;\n      switch (this.effect.model.materials[materialIndex]) {\n        default: this.ctx.materials.switchToNormal(renderer); break;\n        case 1: this.ctx.materials.switchToAdd(renderer); break;\n        case 2: this.ctx.materials.switchToMultiply(renderer); break;\n      }\n\n      gl.drawElements(gl.TRIANGLES, renderCall.numIndices, gl.UNSIGNED_SHORT, renderCall.startIndex * 2);\n    }\n\n  }\n\n  restart(position, rotation) {\n    if (position) {\n      this.position.x = position[0];\n      this.position.y = position[1];\n      this.positionZ = position[2];\n    }\n\n    if (rotation) {\n      this.rotation = rotation;\n    }\n\n    this.effect.restart([this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ],\n      rotation ? this.ctx.neutrino.axisangle2quat_([0, 0, 1], rotation % 360) : null);\n  }\n\n  resetPosition(position, rotation) {\n    if (position) {\n      this.position.x = position[0];\n      this.position.y = position[1];\n      this.positionZ = position[2];\n    }\n\n    if (rotation) {\n      this.rotation = rotation;\n    }\n\n    this.effect.resetPosition([this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ],\n      rotation ? this.ctx.neutrino.axisangle2quat_([0, 0, 1], rotation % 360) : null);\n  }\n\n  setPropertyInAllEmitters(name, value) {\n    this.effect.setPropertyInAllEmitters(name, value);\n  }\n\n  getNumParticles() {\n    return this.effect.getNumParticles();\n  }\n\n  _onEffectReady() {\n\n    const position = [this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ];\n    const rotation = this.ctx.neutrino.axisangle2quat_([0, 0, 1], this.rotation % 360);\n\n    if (this.effectModel.ctx.renderer.type === Phaser.PIXI.CANVAS_RENDERER) {\n      this.effect = this.effectModel.effectModel.createCanvas2DInstance(position, rotation);\n      this.effect.textureDescs = this.effectModel.textureImageDescs;\n    } else {\n      this.renderBuffers = new PhaserNeutrinoRenderBuffers(this.ctx);\n      this.effect = this.effectModel.effectModel.createWGLInstance(position, rotation, this.renderBuffers);\n      this.effect.texturesRemap = this.effectModel.texturesRemap;\n\n      //get phaser to create webgl texture(s)\n      this.effectModel.textures.forEach(texture=>{\n        game.renderer.updateTexture(texture.baseTexture);\n      });\n    }\n\n    this.onReady.dispatch();\n  }\n}","class PhaserNeutrinoEffectModel {\n\n  constructor(context, effectPath) {\n\n    this.ctx = context;\n    this.effectPath = effectPath;\n    this.effectModel = null;\n    this.numTexturesToLoadLeft = -1;\n    this.texturesRemap = null;\n\n    this.onReady = new Phaser.Signal();\n\n    var pixiNeutrinoEffect = this;\n    this.ctx.neutrino.loadEffect(this.ctx.effectsBasePath + effectPath, function (effectModel) {\n      pixiNeutrinoEffect._onEffectLoaded(effectModel);\n    });\n  }\n\n  get isReady(){\n    return this.numTexturesToLoadLeft === 0;\n  }\n\n  _getNewTexture(id){\n    if (this.ctx.trimmedExtensionLookupFirst) id = id.replace(/\\.[^/.]+$/, \"\");\n    //TODO - see if theres a better way of accessing this image data...\n    const imageCache = game.cache._cache.image;\n    let imageData = imageCache[id];\n    if(!imageData){\n      let texture = null;\n      //have to check each cache entry :(\n      //(this is so much easier in pixi.js where all textures go into one cache!)\n      Object.keys(imageCache).forEach(name => {\n        const data = imageCache[name], fNames = data.frameData._frameNames;\n        if(fNames && fNames.hasOwnProperty(id)){\n          //this one contains the subtexture we are looking for\n          // - get a texture from it\n          const frameIndex = fNames[id];\n          const frame = data.frameData._frames[frameIndex];\n          const rect = new PIXI.Rectangle(frame.x, frame.y, frame.width, frame.height);\n          //console.log('frame', frame, 'rect',rect)\n          //PIXI.Texture(baseTexture, frame, crop, trim)\n          texture = new PIXI.Texture(data.base, rect, rect);\n          //just in case, store the rect on the texture as is done in recent pixi version\n          texture.orig = rect;\n        }\n      });\n\n      return texture;\n    } else {\n      const baseTexture = imageData.base;\n      return new Phaser.PIXI.Texture(baseTexture, imageData.frame);\n    }\n\n  }\n\n  _onEffectLoaded(effectModel) {\n    this.effectModel = effectModel;\n    this.textures = [];\n    this.textureImageDescs = [];\n    const numTextures = effectModel.textures.length;\n    this.numTexturesToLoadLeft = numTextures;\n\n    for (let imageIndex = 0; imageIndex < numTextures; ++imageIndex) {\n      const texturePath = effectModel.textures[imageIndex];\n      let texture = this._getNewTexture(texturePath);\n\n      if (!texture){\n        //TODO - fix this for Phaser - set up to return an empty texture that gets populated once this loads\n        //texture = PIXI.Texture.fromImage(this.ctx.texturesBasePath + texturePath);\n        const loader = game.load.image(texturePath, this.ctx.texturesBasePath + texturePath);\n        loader.onLoadComplete.add(e => {\n          console.log('texture loaded!', texturePath)\n        });\n        console.log('load',texturePath, loader)\n\n      }\n\n      if (texture.baseTexture.hasLoaded) {\n        this._onTextureLoaded(imageIndex, texture);\n      } else {\n        const callback = function (self, imageIndex, texture) {\n          texture.off('update', callback);\n          return function () {\n            self._onTextureLoaded(imageIndex, texture);\n          }\n        } (this, imageIndex, texture);\n\n        texture.on('update', callback);\n      }\n    }\n  }\n\n  _onTextureLoaded(index, texture) {\n    this.textures[index] = texture;\n\n    this.numTexturesToLoadLeft--;\n\n    if (this.ctx.renderer.type === Phaser.PIXI.CANVAS_RENDERER) {\n      const image = texture.baseTexture.source;\n      this.textureImageDescs[index] = new this.ctx.neutrino.ImageDesc(image, texture.crop.x, texture.crop.y,\n        texture.crop.width, texture.crop.height);\n    }\n\n    if (this.numTexturesToLoadLeft === 0) {\n\n      if(this.ctx.renderer.type === Phaser.PIXI.WEBGL_RENDERER){\n        this._initTexturesRemapIfNeeded();\n      }\n      //this.emit('ready', this);\n      this.onReady.dispatch();\n    }\n  }\n\n  _isSubtexture(texture){\n    return texture.frame.width < texture.baseTexture.width || texture.frame.height < texture.baseTexture.height;\n  }\n\n\n  _initTexturesRemapIfNeeded() {\n    let remapNeeded = false;\n\n    for (var texIdx = 0; texIdx < this.textures.length; ++texIdx) {\n      //checks if its an atlas subtexture\n      if (this._isSubtexture(this.textures[texIdx])) {\n        remapNeeded = true;\n        break;\n      }\n    }\n\n    this.texturesRemap = [];\n    if (remapNeeded) {\n      const n = this.textures.length;\n      for (let texIdx = 0; texIdx < n; ++texIdx) {\n        const texture = this.textures[texIdx],\n          crop = texture.crop,\n          base = texture.baseTexture;\n\n        this.texturesRemap[texIdx] = new this.ctx.neutrino.SubRect(\n          crop.x / base.width,\n          1.0 - (crop.y + crop.height) / base.height,\n          crop.width / base.width,\n          crop.height / base.height\n        );\n      }\n    }\n  }\n}","class PhaserNeutrinoShader {\n  constructor(program) {\n    this.program = program;\n    this._UID = PIXI._UID++;\n    this.attributes = [program.vertexPositionAttribute, program.colorAttribute, program.textureCoordAttribute];\n  }\n}\n\nclass PhaserNeutrinoMaterials {\n\n  constructor(renderer) {\n    this.gl = renderer.gl;\n\n    var vertexShaderSource = \"\\\n/* NeutrinoParticles Vertex Shader */ \\n\\\n\\n\\\nattribute vec3 aVertexPosition;\\n\\\nattribute vec2 aTextureCoord;\\n\\\nattribute vec4 aColor; \\n\\\n\\n\\\nuniform vec2 projectionVector;\\n\\\nuniform vec2 offsetVector; \\n\\\nuniform vec2 scale;\\n\\\n\\n\\\nvarying vec4 vColor;\\n\\\nvarying vec2 vTextureCoord;\\n\\\n\\n\\\nconst vec2 center = vec2(-1.0, 1.0); \\n\\\n\\n\\\nvoid main(void) {\\n\\\ngl_Position = vec4(((aVertexPosition.xy * scale + offsetVector) / projectionVector) + center , 0.0, 1.0); \\n\\\n\tvColor = vec4(aColor.rgb * aColor.a, aColor.a);\\n\\\n\tvTextureCoord = vec2(aTextureCoord.x, 1.0 - aTextureCoord.y);\\n\\\n}\";\n\n    var fragmentShaderSource = \"\\\n/* NeutrinoParticles Fragment Shader (Normal, Add materials) */ \\n\\\n\\n\\\nprecision mediump float;\\n\\\n\\n\\\nvarying vec4 vColor;\\n\\\nvarying vec2 vTextureCoord;\\n\\\n\\n\\\nuniform sampler2D uSampler;\\n\\\n\\n\\\nvoid main(void) {\\n\\\n\tgl_FragColor = vColor * texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\\n\\\n}\";\n\n    var fragmentShaderMultiplySource = \"\\\n/* NeutrinoParticles Fragment Shader (Multiply material) */ \\n\\\n\\n\\\nprecision mediump float;\\n\\\n\\n\\\nvarying vec4 vColor;\\n\\\nvarying vec2 vTextureCoord;\\n\\\n\\n\\\nuniform sampler2D uSampler;\\n\\\n\\n\\\nvoid main(void)\\n\\\n{\\n\\\nvec4 texel = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\\n\\\nvec3 rgb = vColor.rgb * texel.rgb;\\n\\\nfloat alpha = vColor.a * texel.a;\\n\\\ngl_FragColor = vec4(mix(vec3(1, 1, 1), rgb, alpha), 1);\\n\\\n}\";\n\n    this.shaderProgram = this._makeShaderProgram(vertexShaderSource, fragmentShaderSource);\n    this.shaderProgramMultiply = this._makeShaderProgram(vertexShaderSource, fragmentShaderMultiplySource);\n\n    this.shaderProgram.shader = new PhaserNeutrinoShader(this.shaderProgram);\n    this.shaderProgramMultiply.shader = new PhaserNeutrinoShader(this.shaderProgramMultiply);\n    renderer.shaderManager.setShader(this.shaderProgram.shader);\n\n    this.pMatrix = null;\n    this.currentProgram = null;\n  }\n\n  shutdown() {\n  }\n\n  positionAttribLocation() {\n    return this.shaderProgram.vertexPositionAttribute;\n  }\n\n  colorAttribLocation() {\n    return this.shaderProgram.colorAttribute;\n  }\n\n  texAttribLocation(index) {\n    return this.shaderProgram.textureCoordAttribute[index];\n  }\n\n  setup(projectionVector, offsetVector, scale) {\n    this.projectionVector = projectionVector.slice();\n    this.offsetVector = offsetVector.slice();\n    this.scale = scale.slice();\n    this.currentProgram = null;\n  }\n\n  switchToNormal(renderer) {\n    this._setProgram(renderer, this.shaderProgram);\n    renderer.blendModeManager.setBlendMode(0);\n  }\n\n  switchToAdd(renderer) {\n    this._setProgram(renderer, this.shaderProgram);\n    renderer.blendModeManager.setBlendMode(1);\n  }\n\n  switchToMultiply(renderer) {\n    this._setProgram(renderer, this.shaderProgramMultiply);\n    renderer.blendModeManager.setBlendMode(2);\n  }\n\n  _setProgram(renderer, program) {\n    var gl = this.gl;\n    if (program !== this.currentProgram) {\n      renderer.shaderManager.setShader(program.shader);\n      // console.log('_setProgram',program.pMatrixUniform, this.pMatrix)\n      gl.uniform2fv(program.projectionVectorUniform, this.projectionVector);\n      gl.uniform2fv(program.offsetVectorUniform, this.offsetVector);\n      gl.uniform1i(program.samplerUniform, 0);\n      gl.uniform2f(program.scaleUniform, this.scale[0], this.scale[1]);\n\n      this.currentProgram = program;\n    }\n  }\n\n  _makeShaderProgram(vertexShaderSource, fragmentShaderSource) {\n    var gl = this.gl;\n\n    var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertexShader, vertexShaderSource);\n    gl.compileShader(vertexShader);\n\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      alert(gl.getShaderInfoLog(vertexShader));\n      return null;\n    }\n\n    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragmentShader, fragmentShaderSource);\n    gl.compileShader(fragmentShader);\n\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      alert(gl.getShaderInfoLog(fragmentShader));\n      return null;\n    }\n\n    var shaderProgram = gl.createProgram();\n    gl.attachShader(shaderProgram, vertexShader);\n    gl.attachShader(shaderProgram, fragmentShader);\n    gl.linkProgram(shaderProgram);\n\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n      alert(\"Could not initialise shaders\");\n    }\n\n    gl.useProgram(shaderProgram);\n\n    shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, \"aVertexPosition\");\n    shaderProgram.colorAttribute = gl.getAttribLocation(shaderProgram, \"aColor\");\n    shaderProgram.textureCoordAttribute = [gl.getAttribLocation(shaderProgram, \"aTextureCoord\")];\n\n    shaderProgram.projectionVectorUniform = gl.getUniformLocation(shaderProgram, \"projectionVector\");\n    shaderProgram.offsetVectorUniform = gl.getUniformLocation(shaderProgram, \"offsetVector\");\n    shaderProgram.samplerUniform = gl.getUniformLocation(shaderProgram, \"uSampler\");\n    shaderProgram.scaleUniform = gl.getUniformLocation(shaderProgram, \"scale\");\n\n    return shaderProgram;\n  }\n}","class PhaserNeutrinoRenderBuffers {\n  constructor(context, geometryBuffers) {\n    this.ctx = context;\n    this.gl = this.ctx.renderer.gl;\n\n    this.positions = null;\n    this.colors = null;\n    this.texCoords = [];\n    this.maxNumVertices = 0;\n    this.numVertices = 0;\n    this.indices = null;\n\n    this.renderCalls = [];\n    this.maxNumRenderCalls = 0;\n    this.numRenderCalls = 0;\n  }\n\n  initialize(maxNumVertices, texChannels, indices, maxNumRenderCalls) {\n    var gl = this.gl;\n\n    this.positions = new Float32Array(new ArrayBuffer(4 * maxNumVertices * 3));\n    this.colors = new Uint8Array(new ArrayBuffer(4 * maxNumVertices));\n    this.texCoords = [];\n    for (var texChannel = 0; texChannel < texChannels.length; ++texChannel) {\n      this.texCoords[texChannel] = new Float32Array(new ArrayBuffer(4 * maxNumVertices * texChannels[texChannel]));\n      this.texCoords[texChannel].numComponents = texChannels[texChannel];\n    }\n    this.maxNumVertices = maxNumVertices;\n\n    this.indices = new Uint16Array(new ArrayBuffer(2 * indices.length));\n    this.indices.set(indices, 0);\n\n    this.maxNumRenderCalls = maxNumRenderCalls;\n\n    this.positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this.positions, gl.DYNAMIC_DRAW);\n\n    this.colorBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this.colors, gl.DYNAMIC_DRAW);\n\n    this.texBuffers = [];\n    for (var texIndex = 0; texIndex < this.texCoords.length; ++texIndex) {\n      var buffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(gl.ARRAY_BUFFER, this.texCoords[texIndex], gl.DYNAMIC_DRAW);\n      this.texBuffers.push(buffer);\n    }\n\n    this.indicesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\n  }\n\n  pushVertex(vertex) {\n    this.positions.set(vertex.position, this.numVertices * 3);\n    this.colors.set(vertex.color, this.numVertices * 4);\n\n    for (var texIndex = 0; texIndex < vertex.texCoords.length; ++texIndex) {\n      this.texCoords[texIndex].set(vertex.texCoords[texIndex],\n        this.numVertices * this.texCoords[texIndex].numComponents);\n    }\n\n    ++this.numVertices;\n  }\n\n  pushRenderCall(rc) {\n\n    if (this.numRenderCalls >= this.renderCalls.length)\n      this.renderCalls.push(Object.assign({}, rc));\n    else\n      Object.assign(this.renderCalls[this.numRenderCalls], rc);\n\n    ++this.numRenderCalls;\n  }\n\n  cleanup() {\n    this.numVertices = 0;\n    this.numRenderCalls = 0;\n  }\n\n  updateGlBuffers() {\n    var gl = this.gl;\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.positions, 0, this.numVertices * 3);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.colors, 0, this.numVertices * 4);\n\n    this.texBuffers.forEach(function (buffer, index) {\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.texCoords[index], 0, this.numVertices *\n        this.texCoords[index].numComponents);\n    }, this);\n  }\n\n  bind() {\n    var gl = this.gl;\n    var materials = this.ctx.materials;\n\n    {\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\n      // attribute is enabled inside PIXI\n      //gl.enableVertexAttribArray(materials.positionAttribLocation());\n      gl.vertexAttribPointer(materials.positionAttribLocation(), 3, gl.FLOAT, false, 0, 0);\n    }\n\n    {\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);\n      // attribute is enabled inside PIXI\n      //gl.enableVertexAttribArray(materials.colorAttribLocation());\n      gl.vertexAttribPointer(materials.colorAttribLocation(), 4, gl.UNSIGNED_BYTE, true, 0, 0);\n    }\n\n    this.texBuffers.forEach(function (buffer, index) {\n\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      // attribute is enabled inside PIXI\n      //gl.enableVertexAttribArray(materials.texAttribLocation(index));\n      gl.vertexAttribPointer(materials.texAttribLocation(index),\n        this.texCoords[index].numComponents, gl.FLOAT, false, 0, 0);\n\n    }, this);\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n  }\n\n  shutdown() {\n    var gl = this.gl;\n\n    gl.deleteBuffer(this.positionBuffer);\n    gl.deleteBuffer(this.colorBuffer);\n\n    this.texBuffers.forEach(function (buffer) {\n      gl.deleteBuffer(buffer);\n    }, this);\n  }\n}"]}