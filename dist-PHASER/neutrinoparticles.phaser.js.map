{"version":3,"sources":["PhaserNeutrinoContext.js","PhaserNeutrinoEffect.js","PhaserNeutrinoEffectModel.js","PhaserNeutrinoMaterials.js","PhaserNeutrinoRenderBuffers.js"],"names":["PhaserNeutrinoContext","renderer","effectsBasePath","texturesBasePath","neutrino","NeutrinoParticles","trimmedExtensionLookupFirst","type","Phaser","PIXI","WEBGL_RENDERER","materials","PhaserNeutrinoMaterials","path","success","fail","initializeNoise","loadEffect","PhaserNeutrinoEffect","effectModel","position","game","rotation","scale","_renderCanvas","renderCanvas","_renderWebGL","renderWebGL","ctx","effect","set","positionZ","onReady","Signal","x","y","scaleZ","isReady","_onEffectReady","addOnce","dt","update","axisangle2quat_","context","setTransform","draw","gl","renderSession","spriteBatch","stop","projection","offset","setup","fillGeometryBuffers","renderBuffers","updateGlBuffers","bind","renderCallIdx","numRenderCalls","renderCall","renderCalls","texIndex","model","renderStyles","renderStyleIndex","textureIndices","activeTexture","TEXTURE0","texture","textures","updateTexture","materialIndex","switchToNormal","switchToAdd","switchToMultiply","drawElements","TRIANGLES","numIndices","UNSIGNED_SHORT","startIndex","restart","resetPosition","name","value","setPropertyInAllEmitters","getNumParticles","CANVAS_RENDERER","createCanvas2DInstance","textureDescs","textureImageDescs","PhaserNeutrinoRenderBuffers","createWGLInstance","texturesRemap","dispatch","Group","PhaserNeutrinoEffectModel","effectPath","numTexturesToLoadLeft","pixiNeutrinoEffect","_onEffectLoaded","id","replace","imageData","cache","_cache","image","baseTexture","base","Texture","frame","numTextures","length","imageIndex","texturePath","_getNewTexture","fromImage","hasLoaded","_onTextureLoaded","callback","self","off","on","index","source","ImageDesc","orig","width","height","_initTexturesRemapIfNeeded","remapNeeded","texIdx","realWidth","realHeight","n","SubRect","PhaserNeutrinoShader","program","_UID","attributes","vertexPositionAttribute","colorAttribute","textureCoordAttribute","vertexShaderSource","fragmentShaderSource","fragmentShaderMultiplySource","shaderProgram","_makeShaderProgram","shaderProgramMultiply","shader","shaderManager","setShader","pMatrix","currentProgram","projectionVector","offsetVector","slice","_setProgram","blendModeManager","setBlendMode","uniform2fv","projectionVectorUniform","offsetVectorUniform","uniform1i","samplerUniform","uniform2f","scaleUniform","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","getAttribLocation","getUniformLocation","geometryBuffers","positions","colors","texCoords","maxNumVertices","numVertices","indices","maxNumRenderCalls","texChannels","Float32Array","ArrayBuffer","Uint8Array","texChannel","numComponents","Uint16Array","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","colorBuffer","texBuffers","buffer","push","indicesBuffer","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","vertex","color","rc","Object","assign","bufferSubData","forEach","enableVertexAttribArray","positionAttribLocation","vertexAttribPointer","FLOAT","colorAttribLocation","UNSIGNED_BYTE","texAttribLocation","deleteBuffer"],"mappings":"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","file":"neutrinoparticles.phaser.js","sourcesContent":["class PhaserNeutrinoContext {\r\n\r\n  constructor(renderer, effectsBasePath = \"\", texturesBasePath = \"\") {\r\n    this.renderer = renderer;\r\n    this.neutrino = new NeutrinoParticles();\r\n    this.effectsBasePath = effectsBasePath;\r\n    this.texturesBasePath = texturesBasePath;\r\n    this.trimmedExtensionLookupFirst = true;\r\n\r\n    if (renderer.type === Phaser.PIXI.WEBGL_RENDERER) {\r\n      this.materials = new PhaserNeutrinoMaterials(renderer);\r\n    }\r\n  }\r\n\r\n  initializeNoise(path, success, fail) {\r\n    this.neutrino.initializeNoise(path, success, fail);\r\n  }\r\n\r\n  loadEffect(path, success, fail) {\r\n    this.neutrino.loadEffect(path, success, fail);\r\n  }\r\n}","class PhaserNeutrinoEffect extends Phaser.Group {\r\n\r\n  constructor(effectModel, position, game, rotation, scale) {\r\n    super(game, null);\r\n\r\n    this._renderCanvas = this.renderCanvas;\r\n    this._renderWebGL = this.renderWebGL;\r\n\r\n    this.ctx = effectModel.ctx;\r\n    this.effectModel = effectModel;\r\n    this.effect = null;\r\n    this.position.set(position[0], position[1]);\r\n    this.positionZ = position[2];\r\n\r\n    this.onReady = new Phaser.Signal();\r\n\r\n    if (rotation)\r\n      this.rotation = rotation;\r\n\r\n    if (scale) {\r\n      this.scale.x = scale[0];\r\n      this.scale.y = scale[1];\r\n      this.scaleZ = scale[2];\r\n    } else {\r\n      this.scaleZ = 1;\r\n    }\r\n\r\n    if (effectModel.isReady) {\r\n      this._onEffectReady();\r\n    } else {\r\n      effectModel.onReady.addOnce(function () {\r\n        this._onEffectReady();\r\n      }, this);\r\n    }\r\n  }\r\n\r\n  get isReady(){\r\n    return this.effect !== null;\r\n  }\r\n\r\n  updateParticles(dt) {\r\n    if (this.effect !== null) {\r\n      this.effect.update(dt, [this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ],\r\n        this.ctx.neutrino.axisangle2quat_([0, 0, 1], this.rotation % 360));\r\n    }\r\n  }\r\n\r\n  renderCanvas(renderer) {\r\n    if (this.isReady) {\r\n      renderer.context.setTransform(this.scale.x, 0, 0, this.scale.y, 0, 0);\r\n      this.effect.draw(renderer.context);\r\n    }\r\n  };\r\n\r\n  renderWebGL(renderer) {\r\n    if (!this.isReady) return;\r\n\r\n    const gl = renderer.gl;\r\n\r\n    /*\r\n    renderer.setObjectRenderer(renderer.emptyRenderer);\r\n    renderer.bindVao(null);\r\n    renderer.state.resetAttributes();\r\n\r\n    renderer.state.push();\r\n    renderer.state.setState(renderer.state.defaultState);*/\r\n\r\n    // hack! the only way to discard current shader for futher engine rendering\r\n    //renderer._activeShader = null;\r\n\r\n    //---- example from pixi.js filterManager ------------\r\n    // update projection\r\n    // now restore the regular shader..\r\n    // this.renderSession.shaderManager.setShader(this.defaultShader);\r\n    //gl.uniform2f(this.defaultShader.projectionVector, filterArea.width/2, -filterArea.height/2);\r\n    //gl.uniform2f(this.defaultShader.offsetVector, -filterArea.x, -filterArea.y);\r\n    // -----------------------------------\r\n    game.renderer.renderSession.spriteBatch.stop();\r\n\r\n    const renderSession = game.renderer.renderSession;\r\n    const projection = renderSession.projection;\r\n    const offset = renderSession.offset;\r\n    //gl.uniform2f(defaultShader.projectionVector, projection.x, -projection.y);\r\n    //gl.uniform2f(defaultShader.offsetVector, -offset.x, -offset.y);\r\n    \r\n    // - _activeRenderTarget doesn't exist in this version of pixi\r\n    // var target = renderer._activeRenderTarget;\r\n    //console.log('projectionVector', defaultShader.projectionVector, 'offsetVector', defaultShader.offsetVector)\r\n    //projectionMatrix doesn't exist in this version of pixi\r\n\r\n    /* Matrix.ToArray\r\n    array[0] = this.a; > x scale\r\n    array[1] = this.c; > x skew\r\n    array[2] = this.tx;\r\n    array[3] = this.b; > y skew\r\n    array[4] = this.d; > y scale\r\n    array[5] = this.ty;\r\n    array[6] = 0;\r\n    array[7] = 0;\r\n    array[8] = 1;\r\n     */\r\n    //const projectionMatrix = [0.0025, 0, 0, 0, -0.0033333334140479565, 0, -1, 1, 1];//[1, 0, 0, 1, 0, 0, 0, 0, 1];\r\n\r\n    //test values copied from pixi version\r\n    // const projectionMatrix = [0.0025, 0, 0, 0, -0.0033333334140479565, 0, -1, 1, 1];\r\n    //TODO - set transform and scale values appropriately on projectionMatrix\r\n\r\n\r\n    // this.ctx.materials.setup(target.projectionMatrix.toArray(true), [this.scale.x, this.scale.y]);\r\n    this.ctx.materials.setup([projection.x, projection.y], [offset.x, offset.y], [this.scale.x, this.scale.y]);\r\n\r\n    this.effect.fillGeometryBuffers([1, 0, 0], [0, -1, 0], [0, 0, -1]);\r\n\r\n    this.renderBuffers.updateGlBuffers();\r\n    this.renderBuffers.bind();\r\n\r\n    for (let renderCallIdx = 0; renderCallIdx < this.renderBuffers.numRenderCalls; ++renderCallIdx) {\r\n      const renderCall = this.renderBuffers.renderCalls[renderCallIdx];\r\n      const texIndex = this.effect.model.renderStyles[renderCall.renderStyleIndex].textureIndices[0];\r\n\r\n      // - renderer.bindTexture doesn't exist in this version of pixi\r\n      // renderer.bindTexture(this.effectModel.textures[texIndex], 0, true);\r\n      gl.activeTexture(gl.TEXTURE0);\r\n      const texture = this.effectModel.textures[texIndex];\r\n      game.renderer.updateTexture(texture);//, 0, true);\r\n      //   _glTextures = texture.baseTexture._glTextures;\r\n      // const glTexture = texture.baseTexture._glTextures[0];//game.renderer.glContextId];\r\n      //gl.bindTexture(gl.TEXTURE_2D, glTexture.texture);\r\n\r\n      const materialIndex = this.effect.model.renderStyles[renderCall.renderStyleIndex].materialIndex;\r\n      switch (this.effect.model.materials[materialIndex]) {\r\n        default: this.ctx.materials.switchToNormal(renderer); break;\r\n        case 1: this.ctx.materials.switchToAdd(renderer); break;\r\n        case 2: this.ctx.materials.switchToMultiply(renderer); break;\r\n      }\r\n\r\n      gl.drawElements(gl.TRIANGLES, renderCall.numIndices, gl.UNSIGNED_SHORT, renderCall.startIndex * 2);\r\n    }\r\n\r\n    //renderer.state.pop();\r\n\r\n  }\r\n\r\n  restart(position, rotation) {\r\n    if (position) {\r\n      this.position.x = position[0];\r\n      this.position.y = position[1];\r\n      this.positionZ = position[2];\r\n    }\r\n\r\n    if (rotation) {\r\n      this.rotation = rotation;\r\n    }\r\n\r\n    this.effect.restart([this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ],\r\n      rotation ? this.ctx.neutrino.axisangle2quat_([0, 0, 1], rotation % 360) : null);\r\n  }\r\n\r\n  resetPosition(position, rotation) {\r\n    if (position) {\r\n      this.position.x = position[0];\r\n      this.position.y = position[1];\r\n      this.positionZ = position[2];\r\n    }\r\n\r\n    if (rotation) {\r\n      this.rotation = rotation;\r\n    }\r\n\r\n    this.effect.resetPosition([this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ],\r\n      rotation ? this.ctx.neutrino.axisangle2quat_([0, 0, 1], rotation % 360) : null);\r\n  }\r\n\r\n  setPropertyInAllEmitters(name, value) {\r\n    this.effect.setPropertyInAllEmitters(name, value);\r\n  }\r\n\r\n  getNumParticles() {\r\n    return this.effect.getNumParticles();\r\n  }\r\n\r\n  _onEffectReady() {\r\n    const position = [this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ];\r\n    const rotation = this.ctx.neutrino.axisangle2quat_([0, 0, 1], this.rotation % 360);\r\n\r\n    if (this.effectModel.ctx.renderer.type === Phaser.PIXI.CANVAS_RENDERER) {\r\n      this.effect = this.effectModel.effectModel.createCanvas2DInstance(position, rotation);\r\n      this.effect.textureDescs = this.effectModel.textureImageDescs;\r\n    } else {\r\n      this.renderBuffers = new PhaserNeutrinoRenderBuffers(this.ctx);\r\n      this.effect = this.effectModel.effectModel.createWGLInstance(position, rotation, this.renderBuffers);\r\n      this.effect.texturesRemap = this.effectModel.texturesRemap;\r\n    }\r\n    this.onReady.dispatch();\r\n  }\r\n}","class PhaserNeutrinoEffectModel {\r\n\r\n  constructor(context, effectPath) {\r\n\r\n    this.ctx = context;\r\n    this.effectPath = effectPath;\r\n    this.effectModel = null;\r\n    this.numTexturesToLoadLeft = -1;\r\n    this.texturesRemap = null;\r\n\r\n    this.onReady = new Phaser.Signal();\r\n\r\n    var pixiNeutrinoEffect = this;\r\n    this.ctx.neutrino.loadEffect(this.ctx.effectsBasePath + effectPath, function (effectModel) {\r\n      pixiNeutrinoEffect._onEffectLoaded(effectModel);\r\n    });\r\n  }\r\n\r\n  get isReady(){\r\n    return this.numTexturesToLoadLeft === 0;\r\n  }\r\n\r\n  _getNewTexture(id){\r\n    if (this.ctx.trimmedExtensionLookupFirst) id = id.replace(/\\.[^/.]+$/, \"\");\r\n    //TODO - see if theres a better way of accessing this image data...\r\n    const imageData = game.cache._cache.image[id];\r\n    const baseTexture = imageData.base;\r\n    return new Phaser.PIXI.Texture(baseTexture, imageData.frame);\r\n  }\r\n\r\n  _onEffectLoaded(effectModel) {\r\n    this.effectModel = effectModel;\r\n    this.textures = [];\r\n    this.textureImageDescs = [];\r\n    const numTextures = effectModel.textures.length;\r\n    this.numTexturesToLoadLeft = numTextures;\r\n\r\n    for (let imageIndex = 0; imageIndex < numTextures; ++imageIndex) {\r\n      const texturePath = effectModel.textures[imageIndex];\r\n      let texture = this._getNewTexture(texturePath);\r\n\r\n      if (!texture)\r\n      //TODO - fix this for Phaser\r\n        texture = PIXI.Texture.fromImage(this.ctx.texturesBasePath + texturePath);\r\n\r\n      if (texture.baseTexture.hasLoaded) {\r\n        this._onTextureLoaded(imageIndex, texture);\r\n      } else {\r\n        const callback = function (self, imageIndex, texture) {\r\n          texture.off('update', callback);\r\n          return function () {\r\n            self._onTextureLoaded(imageIndex, texture);\r\n          }\r\n        } (this, imageIndex, texture);\r\n\r\n        texture.on('update', callback);\r\n      }\r\n    }\r\n  }\r\n\r\n  _onTextureLoaded(index, texture) {\r\n    this.textures[index] = texture;\r\n\r\n    this.numTexturesToLoadLeft--;\r\n\r\n    if (this.ctx.renderer.type === Phaser.PIXI.CANVAS_RENDERER) {\r\n      const image = texture.baseTexture.source;\r\n      //TODO - texture.orig doesn't exist in this version of pixi...\r\n      this.textureImageDescs[index] = new this.ctx.neutrino.ImageDesc(image, texture.orig.x, texture.orig.y,\r\n        texture.orig.width, texture.orig.height);\r\n    }\r\n\r\n    if (this.numTexturesToLoadLeft === 0) {\r\n\r\n      if(this.ctx.renderer.type === Phaser.PIXI.WEBGL_RENDERER){\r\n        this._initTexturesRemapIfNeeded();\r\n      }\r\n      //this.emit('ready', this);\r\n      this.onReady.dispatch();\r\n    }\r\n  }\r\n\r\n  _initTexturesRemapIfNeeded() {\r\n    let remapNeeded = false;\r\n\r\n    for (var texIdx = 0; texIdx < this.textures.length; ++texIdx) {\r\n      const texture = this.textures[texIdx];\r\n      //checks if its an atlas subtexture\r\n      if (texture.orig && (texture.orig.x !== 0 || texture.orig.y !== 0\r\n          || texture.orig.width !== texture.baseTexture.realWidth\r\n          || texture.orig.height !== texture.baseTexture.realHeight)) {\r\n        remapNeeded = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.texturesRemap = [];\r\n    if (remapNeeded) {\r\n      const n = this.textures.length;\r\n      for (let texIdx = 0; texIdx < n; ++texIdx) {\r\n        const texture = this.textures[texIdx];\r\n\r\n        this.texturesRemap[texIdx] = new this.ctx.neutrino.SubRect(\r\n          texture.orig.x / texture.baseTexture.realWidth,\r\n          1.0 - (texture.orig.y + texture.orig.height) / texture.baseTexture.realHeight,\r\n          texture.orig.width / texture.baseTexture.realWidth,\r\n          texture.orig.height / texture.baseTexture.realHeight\r\n        );\r\n      }\r\n    }\r\n  }\r\n}","class PhaserNeutrinoShader {\r\n  constructor(program) {\r\n    this.program = program;\r\n    this._UID = PIXI._UID++;\r\n    this.attributes = [program.vertexPositionAttribute, program.colorAttribute, program.textureCoordAttribute];\r\n  }\r\n}\r\n\r\nclass PhaserNeutrinoMaterials {\r\n\r\n  constructor(renderer) {\r\n    this.gl = renderer.gl;\r\n\r\n    var vertexShaderSource = \"\\\r\n\t\t\tattribute vec3 aVertexPosition;\\\r\n\t\t\tattribute vec4 aColor; \\\r\n\t\t\tattribute vec2 aTextureCoord;\\\r\n\t\t\t\\\r\n\t\t\tuniform vec2 projectionVector;\\\r\n      uniform vec2 offsetVector; \\\r\n\t\t\tuniform vec2 scale;\\\r\n\t\t\t\\\r\n\t\t\tvarying vec4 vColor;\\\r\n\t\t\tvarying vec2 vTextureCoord;\\\r\n      \\\r\n      const vec2 center = vec2(0, 0); \\\r\n\t\t\t\\\r\n\t\t\tvoid main(void) {\\\r\n        gl_Position = vec4(((aVertexPosition.xy * scale + offsetVector) / projectionVector) + center , 0.0, 1.0); \\\r\n\t\t\t\tvColor = vec4(aColor.rgb * aColor.a, aColor.a);\\\r\n\t\t\t\tvTextureCoord = vec2(aTextureCoord.x, 1.0 - aTextureCoord.y);\\\r\n\t\t\t}\";\r\n\r\n    var fragmentShaderSource = \"\\\r\n\t\t\tprecision mediump float;\\\r\n\t\t\t\\\r\n\t\t\tvarying vec4 vColor;\\\r\n\t\t\tvarying vec2 vTextureCoord;\\\r\n\t\t\\\r\n\t\t\tuniform sampler2D uSampler;\\\r\n\t\t\t\\\r\n\t\t\tvoid main(void) {\\\r\n\t\t\t\tgl_FragColor = vColor * texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\\\r\n\t\t\t}\";\r\n\r\n    var fragmentShaderMultiplySource = \"\\\r\n\t\t\tprecision mediump float;\\\r\n\t\t\t\\\r\n\t\t\tvarying vec4 vColor;\\\r\n\t\t\tvarying vec2 vTextureCoord;\\\r\n\t\t\t\\\r\n\t\t\tuniform sampler2D uSampler;\\\r\n\t\t\t\\\r\n\t\t\tvoid main(void)\\\r\n\t\t\t{\\\r\n\t\t\t\tvec4 texel = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\\\r\n\t\t\t\tvec3 rgb = vColor.rgb * texel.rgb;\\\r\n\t\t\t\tfloat alpha = vColor.a * texel.a;\\\r\n\t\t\t\tgl_FragColor = vec4(mix(vec3(1, 1, 1), rgb, alpha), 1);\\\r\n\t\t\t}\";\r\n\r\n    this.shaderProgram = this._makeShaderProgram(vertexShaderSource, fragmentShaderSource);\r\n    this.shaderProgramMultiply = this._makeShaderProgram(vertexShaderSource, fragmentShaderMultiplySource);\r\n\r\n    this.shaderProgram.shader = new PhaserNeutrinoShader(this.shaderProgram);\r\n    this.shaderProgramMultiply.shader = new PhaserNeutrinoShader(this.shaderProgramMultiply);\r\n    renderer.shaderManager.setShader(this.shaderProgram.shader);\r\n\r\n    this.pMatrix = null;\r\n    this.currentProgram = null;\r\n  }\r\n\r\n  shutdown() {\r\n  }\r\n\r\n  positionAttribLocation() {\r\n    return this.shaderProgram.vertexPositionAttribute;\r\n  }\r\n\r\n  colorAttribLocation() {\r\n    return this.shaderProgram.colorAttribute;\r\n  }\r\n\r\n  texAttribLocation(index) {\r\n    return this.shaderProgram.textureCoordAttribute[index];\r\n  }\r\n\r\n  setup(projectionVector, offsetVector, scale) {\r\n    this.projectionVector = projectionVector.slice();\r\n    this.offsetVector = offsetVector.slice();\r\n    this.scale = scale.slice();\r\n    this.currentProgram = null;\r\n  }\r\n\r\n  switchToNormal(renderer) {\r\n    this._setProgram(renderer, this.shaderProgram);\r\n    renderer.blendModeManager.setBlendMode(0);\r\n  }\r\n\r\n  switchToAdd(renderer) {\r\n    this._setProgram(renderer, this.shaderProgram);\r\n    renderer.blendModeManager.setBlendMode(1);\r\n  }\r\n\r\n  switchToMultiply(renderer) {\r\n    this._setProgram(renderer, this.shaderProgramMultiply);\r\n    renderer.blendModeManager.setBlendMode(2);\r\n  }\r\n\r\n  _setProgram(renderer, program) {\r\n    var gl = this.gl;\r\n\r\n    if (program !== this.currentProgram) {\r\n      renderer.shaderManager.setShader(program.shader);\r\n\r\n      // console.log('_setProgram',program.pMatrixUniform, this.pMatrix)\r\n      gl.uniform2fv(program.projectionVectorUniform, this.projectionVector);\r\n      gl.uniform2fv(program.offsetVectorUniform, this.offsetVector);\r\n      gl.uniform1i(program.samplerUniform, 0);\r\n      gl.uniform2f(program.scaleUniform, this.scale[0], this.scale[1]);\r\n\r\n      this.currentProgram = program;\r\n    }\r\n  }\r\n\r\n  _makeShaderProgram(vertexShaderSource, fragmentShaderSource) {\r\n    var gl = this.gl;\r\n\r\n    var vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n    gl.shaderSource(vertexShader, vertexShaderSource);\r\n    gl.compileShader(vertexShader);\r\n\r\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\r\n      alert(gl.getShaderInfoLog(vertexShader));\r\n      return null;\r\n    }\r\n\r\n    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n    gl.shaderSource(fragmentShader, fragmentShaderSource);\r\n    gl.compileShader(fragmentShader);\r\n\r\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\r\n      alert(gl.getShaderInfoLog(fragmentShader));\r\n      return null;\r\n    }\r\n\r\n    var shaderProgram = gl.createProgram();\r\n    gl.attachShader(shaderProgram, vertexShader);\r\n    gl.attachShader(shaderProgram, fragmentShader);\r\n    gl.linkProgram(shaderProgram);\r\n\r\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n      alert(\"Could not initialise shaders\");\r\n    }\r\n\r\n    gl.useProgram(shaderProgram);\r\n\r\n    shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, \"aVertexPosition\");\r\n    shaderProgram.colorAttribute = gl.getAttribLocation(shaderProgram, \"aColor\");\r\n    shaderProgram.textureCoordAttribute = [gl.getAttribLocation(shaderProgram, \"aTextureCoord\")];\r\n\r\n    shaderProgram.projectionVectorUniform = gl.getUniformLocation(shaderProgram, \"projectionVector\");\r\n    shaderProgram.offsetVectorUniform = gl.getUniformLocation(shaderProgram, \"offsetVector\");\r\n    shaderProgram.samplerUniform = gl.getUniformLocation(shaderProgram, \"uSampler\");\r\n    shaderProgram.scaleUniform = gl.getUniformLocation(shaderProgram, \"scale\");\r\n\r\n    return shaderProgram;\r\n  }\r\n}","class PhaserNeutrinoRenderBuffers {\r\n  constructor(context, geometryBuffers) {\r\n    this.ctx = context;\r\n    this.gl = this.ctx.renderer.gl;\r\n\r\n    this.positions = null;\r\n    this.colors = null;\r\n    this.texCoords = [];\r\n    this.maxNumVertices = 0;\r\n    this.numVertices = 0;\r\n    this.indices = null;\r\n\r\n    this.renderCalls = [];\r\n    this.maxNumRenderCalls = 0;\r\n    this.numRenderCalls = 0;\r\n  }\r\n\r\n  initialize(maxNumVertices, texChannels, indices, maxNumRenderCalls) {\r\n    var gl = this.gl;\r\n\r\n    this.positions = new Float32Array(new ArrayBuffer(4 * maxNumVertices * 3));\r\n    this.colors = new Uint8Array(new ArrayBuffer(4 * maxNumVertices));\r\n    this.texCoords = [];\r\n    for (var texChannel = 0; texChannel < texChannels.length; ++texChannel) {\r\n      this.texCoords[texChannel] = new Float32Array(new ArrayBuffer(4 * maxNumVertices * texChannels[texChannel]));\r\n      this.texCoords[texChannel].numComponents = texChannels[texChannel];\r\n    }\r\n    this.maxNumVertices = maxNumVertices;\r\n\r\n    this.indices = new Uint16Array(new ArrayBuffer(2 * indices.length));\r\n    this.indices.set(indices, 0);\r\n\r\n    this.maxNumRenderCalls = maxNumRenderCalls;\r\n\r\n    this.positionBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, this.positions, gl.DYNAMIC_DRAW);\r\n\r\n    this.colorBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, this.colors, gl.DYNAMIC_DRAW);\r\n\r\n    this.texBuffers = [];\r\n    for (var texIndex = 0; texIndex < this.texCoords.length; ++texIndex) {\r\n      var buffer = gl.createBuffer();\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n      gl.bufferData(gl.ARRAY_BUFFER, this.texCoords[texIndex], gl.DYNAMIC_DRAW);\r\n      this.texBuffers.push(buffer);\r\n    }\r\n\r\n    this.indicesBuffer = gl.createBuffer();\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\r\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\r\n  }\r\n\r\n  pushVertex(vertex) {\r\n    this.positions.set(vertex.position, this.numVertices * 3);\r\n    this.colors.set(vertex.color, this.numVertices * 4);\r\n\r\n    for (var texIndex = 0; texIndex < vertex.texCoords.length; ++texIndex) {\r\n      this.texCoords[texIndex].set(vertex.texCoords[texIndex],\r\n        this.numVertices * this.texCoords[texIndex].numComponents);\r\n    }\r\n\r\n    ++this.numVertices;\r\n  }\r\n\r\n  pushRenderCall(rc) {\r\n\r\n    if (this.numRenderCalls >= this.renderCalls.length)\r\n      this.renderCalls.push(Object.assign({}, rc));\r\n    else\r\n      Object.assign(this.renderCalls[this.numRenderCalls], rc);\r\n\r\n    ++this.numRenderCalls;\r\n  }\r\n\r\n  cleanup() {\r\n    this.numVertices = 0;\r\n    this.numRenderCalls = 0;\r\n  }\r\n\r\n  updateGlBuffers() {\r\n    var gl = this.gl;\r\n\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\r\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.positions, 0, this.numVertices * 3);\r\n\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);\r\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.colors, 0, this.numVertices * 4);\r\n\r\n    this.texBuffers.forEach(function (buffer, index) {\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n      gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.texCoords[index], 0, this.numVertices *\r\n        this.texCoords[index].numComponents);\r\n    }, this);\r\n  }\r\n\r\n  bind() {\r\n    var gl = this.gl;\r\n    var materials = this.ctx.materials;\r\n\r\n    {\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\r\n\r\n      gl.enableVertexAttribArray(materials.positionAttribLocation());\r\n      gl.vertexAttribPointer(materials.positionAttribLocation(), 3, gl.FLOAT, false, 0, 0);\r\n    }\r\n\r\n    {\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);\r\n\r\n      gl.enableVertexAttribArray(materials.colorAttribLocation());\r\n      gl.vertexAttribPointer(materials.colorAttribLocation(), 4, gl.UNSIGNED_BYTE, true, 0, 0);\r\n    }\r\n\r\n    this.texBuffers.forEach(function (buffer, index) {\r\n\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n\r\n      gl.enableVertexAttribArray(materials.texAttribLocation(index));\r\n      gl.vertexAttribPointer(materials.texAttribLocation(index),\r\n        this.texCoords[index].numComponents, gl.FLOAT, false, 0, 0);\r\n\r\n    }, this);\r\n\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\r\n  }\r\n\r\n  shutdown() {\r\n    var gl = this.gl;\r\n\r\n    gl.deleteBuffer(this.positionBuffer);\r\n    gl.deleteBuffer(this.colorBuffer);\r\n\r\n    this.texBuffers.forEach(function (buffer) {\r\n      gl.deleteBuffer(buffer);\r\n    }, this);\r\n  }\r\n}"]}