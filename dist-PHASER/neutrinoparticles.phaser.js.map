{"version":3,"sources":["PhaserNeutrinoContext.js","PhaserNeutrinoEffect.js","PhaserNeutrinoEffectModel.js","PhaserNeutrinoMaterials.js","PhaserNeutrinoRenderBuffers.js"],"names":["PhaserNeutrinoContext","renderer","effectsBasePath","texturesBasePath","neutrino","NeutrinoParticles","trimmedExtensionLookupFirst","type","Phaser","PIXI","WEBGL_RENDERER","materials","PhaserNeutrinoMaterials","gl","path","success","fail","initializeNoise","loadEffect","PhaserNeutrinoEffect","effectModel","position","game","rotation","scale","_renderCanvas","renderCanvas","_renderWebGL","renderWebGL","ctx","effect","set","positionZ","onReady","Signal","x","y","scaleZ","isReady","_onEffectReady","addOnce","dt","update","axisangle2quat_","context","setTransform","draw","defaultShader","shaderManager","setShader","renderSession","projection","offset","uniform2f","projectionVector","offsetVector","projectionMatrix","setup","fillGeometryBuffers","renderBuffers","updateGlBuffers","bind","renderCallIdx","numRenderCalls","renderCall","renderCalls","texIndex","model","renderStyles","renderStyleIndex","textureIndices","updateTexture","textures","materialIndex","switchToNormal","switchToAdd","switchToMultiply","drawElements","TRIANGLES","numIndices","UNSIGNED_SHORT","startIndex","restart","resetPosition","name","value","setPropertyInAllEmitters","getNumParticles","console","log","CANVAS_RENDERER","createCanvas2DInstance","textureDescs","textureImageDescs","PhaserNeutrinoRenderBuffers","createWGLInstance","texturesRemap","dispatch","Group","PhaserNeutrinoEffectModel","effectPath","numTexturesToLoadLeft","pixiNeutrinoEffect","_onEffectLoaded","id","replace","imageData","cache","_cache","image","baseTexture","base","Texture","frame","numTextures","length","imageIndex","texturePath","texture","_getNewTexture","fromImage","hasLoaded","_onTextureLoaded","callback","self","off","on","index","source","ImageDesc","orig","width","height","_initTexturesRemapIfNeeded","remapNeeded","texIdx","realWidth","realHeight","n","SubRect","vertexShaderSource","fragmentShaderSource","fragmentShaderMultiplySource","shaderProgram","_makeShaderProgram","shaderProgramMultiply","pMatrix","currentProgram","vertexPositionAttribute","colorAttribute","textureCoordAttribute","slice","_setProgram","blendModeManager","setBlendMode","program","useProgram","uniformMatrix3fv","pMatrixUniform","uniform1i","samplerUniform","scaleUniform","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","alert","getShaderInfoLog","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getAttribLocation","getUniformLocation","geometryBuffers","positions","colors","texCoords","maxNumVertices","numVertices","indices","maxNumRenderCalls","texChannels","Float32Array","ArrayBuffer","Uint8Array","texChannel","numComponents","Uint16Array","positionBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","colorBuffer","texBuffers","buffer","push","indicesBuffer","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","vertex","color","rc","Object","assign","bufferSubData","forEach","enableVertexAttribArray","positionAttribLocation","vertexAttribPointer","FLOAT","colorAttribLocation","UNSIGNED_BYTE","texAttribLocation","deleteBuffer"],"mappings":"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","file":"neutrinoparticles.phaser.js","sourcesContent":["class PhaserNeutrinoContext {\n\n  constructor(renderer, effectsBasePath = \"\", texturesBasePath = \"\") {\n    this.renderer = renderer;\n    this.neutrino = new NeutrinoParticles();\n    this.effectsBasePath = effectsBasePath;\n    this.texturesBasePath = texturesBasePath;\n    this.trimmedExtensionLookupFirst = true;\n\n    if (renderer.type === Phaser.PIXI.WEBGL_RENDERER) {\n      this.materials = new PhaserNeutrinoMaterials(renderer.gl);\n    }\n  }\n\n  initializeNoise(path, success, fail) {\n    this.neutrino.initializeNoise(path, success, fail);\n  }\n\n  loadEffect(path, success, fail) {\n    this.neutrino.loadEffect(path, success, fail);\n  }\n}","class PhaserNeutrinoEffect extends Phaser.Group {\n\n  constructor(effectModel, position, game, rotation, scale) {\n    super(game, null);\n\n    this._renderCanvas = this.renderCanvas;\n    this._renderWebGL = this.renderWebGL;\n\n    this.ctx = effectModel.ctx;\n    this.effectModel = effectModel;\n    this.effect = null;\n    this.position.set(position[0], position[1]);\n    this.positionZ = position[2];\n\n    this.onReady = new Phaser.Signal();\n\n    if (rotation)\n      this.rotation = rotation;\n\n    if (scale) {\n      this.scale.x = scale[0];\n      this.scale.y = scale[1];\n      this.scaleZ = scale[2];\n    }\n    else\n      this.scaleZ = 1;\n\n    if (effectModel.isReady) {\n      this._onEffectReady();\n    } else {\n      effectModel.onReady.addOnce(function () {\n        this._onEffectReady();\n      }, this);\n    }\n  }\n\n  get isReady(){\n    return this.effect !== null;\n  }\n\n  updateParticles(dt) {\n    if (this.effect !== null) {\n      this.effect.update(dt, [this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ],\n        this.ctx.neutrino.axisangle2quat_([0, 0, 1], this.rotation % 360));\n    }\n  }\n\n  renderCanvas(renderer) {\n    if (this.isReady) {\n      renderer.context.setTransform(this.scale.x, 0, 0, this.scale.y, 0, 0);\n      this.effect.draw(renderer.context);\n    }\n  };\n\n  renderWebGL(renderer) {\n    if (!this.isReady) return;\n\n    var gl = renderer.gl;\n\n    /*\n    renderer.setObjectRenderer(renderer.emptyRenderer);\n    renderer.bindVao(null);\n    renderer.state.resetAttributes();\n\n    renderer.state.push();\n    renderer.state.setState(renderer.state.defaultState);*/\n\n    // hack! the only way to discard current shader for futher engine rendering\n    //renderer._activeShader = null;\n\n    //---- from pixi.js filterManager ------------\n    // update projection\n    // now restore the regular shader..\n    // this.renderSession.shaderManager.setShader(this.defaultShader);\n    //gl.uniform2f(this.defaultShader.projectionVector, filterArea.width/2, -filterArea.height/2);\n    //gl.uniform2f(this.defaultShader.offsetVector, -filterArea.x, -filterArea.y);\n    // -----------------------------------\n    const defaultShader = game.renderer.shaderManager.defaultShader;\n    game.renderer.shaderManager.setShader(defaultShader);\n\n    const renderSession = game.renderer.renderSession;\n    const projection = renderSession.projection,\n      offset = renderSession.offset;\n    gl.uniform2f(defaultShader.projectionVector, projection.x, -projection.y);\n    gl.uniform2f(defaultShader.offsetVector, -offset.x, -offset.y);\n\n    // - _activeRenderTarget doesn't exist in this version of pixi\n    // var target = renderer._activeRenderTarget;\n    //console.log('projectionVector', defaultShader.projectionVector, 'offsetVector', defaultShader.offsetVector)\n    //projectionMatrix doesn't exist in this version of pixi\n\n    /* Matrix.ToArray\n    array[0] = this.a; > x scale\n    array[1] = this.c; > x skew\n    array[2] = this.tx;\n    array[3] = this.b; > y skew\n    array[4] = this.d; > y scale\n    array[5] = this.ty;\n    array[6] = 0;\n    array[7] = 0;\n    array[8] = 1;\n     */\n    const projectionMatrix = [1, 0, 0, 1, 0, 0, 0, 0, 1];\n    // const projectionMatrix = [0.0025, 0, 0, 0, -0.0033333334140479565, 0, -1, 1, 1];\n    //TODO - set transform and scale values appropriately on projectionMatrix\n\n\n    // this.ctx.materials.setup(target.projectionMatrix.toArray(true), [this.scale.x, this.scale.y]);\n    this.ctx.materials.setup(projectionMatrix, [this.scale.x, this.scale.y]);\n\n    this.effect.fillGeometryBuffers([1, 0, 0], [0, -1, 0], [0, 0, -1]);\n\n    this.renderBuffers.updateGlBuffers();\n    this.renderBuffers.bind();\n\n    for (let renderCallIdx = 0; renderCallIdx < this.renderBuffers.numRenderCalls; ++renderCallIdx) {\n      const renderCall = this.renderBuffers.renderCalls[renderCallIdx];\n      const texIndex = this.effect.model.renderStyles[renderCall.renderStyleIndex].textureIndices[0];\n\n      // - bindTexture doesn't exist in this version of pixi\n      //try updateTexture instead\n      // renderer.bindTexture(this.effectModel.textures[texIndex], 0, true);\n      game.renderer.updateTexture(this.effectModel.textures[texIndex]);//, 0, true);\n\n      const materialIndex = this.effect.model.renderStyles[renderCall.renderStyleIndex].materialIndex;\n      switch (this.effect.model.materials[materialIndex]) {\n        default: this.ctx.materials.switchToNormal(renderer); break;\n        case 1: this.ctx.materials.switchToAdd(renderer); break;\n        case 2: this.ctx.materials.switchToMultiply(renderer); break;\n      }\n\n      gl.drawElements(gl.TRIANGLES, renderCall.numIndices, gl.UNSIGNED_SHORT, renderCall.startIndex * 2);\n    }\n\n    //renderer.state.pop();\n\n  }\n\n  restart(position, rotation) {\n    if (position) {\n      this.position.x = position[0];\n      this.position.y = position[1];\n      this.positionZ = position[2];\n    }\n\n    if (rotation) {\n      this.rotation = rotation;\n    }\n\n    this.effect.restart([this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ],\n      rotation ? this.ctx.neutrino.axisangle2quat_([0, 0, 1], rotation % 360) : null);\n  }\n\n  resetPosition(position, rotation) {\n    if (position) {\n      this.position.x = position[0];\n      this.position.y = position[1];\n      this.positionZ = position[2];\n    }\n\n    if (rotation) {\n      this.rotation = rotation;\n    }\n\n    this.effect.resetPosition([this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ],\n      rotation ? this.ctx.neutrino.axisangle2quat_([0, 0, 1], rotation % 360) : null);\n  }\n\n  setPropertyInAllEmitters(name, value) {\n    this.effect.setPropertyInAllEmitters(name, value);\n  }\n\n  getNumParticles() {\n    return this.effect.getNumParticles();\n  }\n\n  _onEffectReady() {\n    console.log('Effect ready')\n    var position = [this.position.x / this.scale.x, this.position.y / this.scale.y, this.positionZ / this.scaleZ];\n    var rotation = this.ctx.neutrino.axisangle2quat_([0, 0, 1], this.rotation % 360);\n\n    if (this.effectModel.ctx.renderer.type === Phaser.PIXI.CANVAS_RENDERER) {\n      this.effect = this.effectModel.effectModel.createCanvas2DInstance(position, rotation);\n      this.effect.textureDescs = this.effectModel.textureImageDescs;\n    } else {\n      this.renderBuffers = new PhaserNeutrinoRenderBuffers(this.ctx);\n      this.effect = this.effectModel.effectModel.createWGLInstance(position, rotation, this.renderBuffers);\n      this.effect.texturesRemap = this.effectModel.texturesRemap;\n    }\n\n    //this.emit('ready', this);\n    this.onReady.dispatch();\n  }\n}","class PhaserNeutrinoEffectModel {\n\n  constructor(context, effectPath) {\n\n    this.ctx = context;\n    this.effectPath = effectPath;\n    this.effectModel = null;\n    this.numTexturesToLoadLeft = -1;\n    this.texturesRemap = null;\n\n    this.onReady = new Phaser.Signal();\n\n    var pixiNeutrinoEffect = this;\n    this.ctx.neutrino.loadEffect(this.ctx.effectsBasePath + effectPath, function (effectModel) {\n      pixiNeutrinoEffect._onEffectLoaded(effectModel);\n    });\n  }\n\n  get isReady(){\n    return this.numTexturesToLoadLeft === 0;\n  }\n\n  _getNewTexture(id){\n    if (this.ctx.trimmedExtensionLookupFirst) id = id.replace(/\\.[^/.]+$/, \"\");\n    //TODO - see if theres a better way of accessing this...\n    const imageData = game.cache._cache.image[id];\n    const baseTexture = imageData.base;\n    return new Phaser.PIXI.Texture(baseTexture, imageData.frame);\n  }\n\n  _onEffectLoaded(effectModel) {\n    this.effectModel = effectModel;\n    this.textures = [];\n    this.textureImageDescs = [];\n    const numTextures = effectModel.textures.length;\n    this.numTexturesToLoadLeft = numTextures;\n\n    for (let imageIndex = 0; imageIndex < numTextures; ++imageIndex) {\n      const texturePath = effectModel.textures[imageIndex];\n      let texture = this._getNewTexture(texturePath);\n\n      if (!texture)\n      //TODO - fix this\n        texture = PIXI.Texture.fromImage(this.ctx.texturesBasePath + texturePath);\n\n      if (texture.baseTexture.hasLoaded) {\n        this._onTextureLoaded(imageIndex, texture);\n      } else {\n        const callback = function (self, imageIndex, texture) {\n          texture.off('update', callback);\n          return function () {\n            self._onTextureLoaded(imageIndex, texture);\n          }\n        } (this, imageIndex, texture);\n\n        texture.on('update', callback);\n      }\n\n    }\n  }\n\n  _onTextureLoaded(index, texture) {\n    this.textures[index] = texture;\n\n    this.numTexturesToLoadLeft--;\n\n    if (this.ctx.renderer.type === Phaser.PIXI.CANVAS_RENDERER) {\n      const image = texture.baseTexture.source;\n      //TODO - texture.orig doesn't exist in this version of pixi...\n      this.textureImageDescs[index] = new this.ctx.neutrino.ImageDesc(image, texture.orig.x, texture.orig.y,\n        texture.orig.width, texture.orig.height);\n    }\n\n    if (this.numTexturesToLoadLeft === 0) {\n\n      if(this.ctx.renderer.type === Phaser.PIXI.WEBGL_RENDERER){\n        this._initTexturesRemapIfNeeded();\n      }\n      //this.emit('ready', this);\n      this.onReady.dispatch();\n    }\n  }\n\n  _initTexturesRemapIfNeeded() {\n    let remapNeeded = false;\n\n    for (var texIdx = 0; texIdx < this.textures.length; ++texIdx) {\n      const texture = this.textures[texIdx];\n      //checks if its an atlas subtexture\n      if (texture.orig && (texture.orig.x !== 0 || texture.orig.y !== 0\n          || texture.orig.width !== texture.baseTexture.realWidth\n          || texture.orig.height !== texture.baseTexture.realHeight)) {\n        remapNeeded = true;\n        break;\n      }\n    }\n\n    this.texturesRemap = [];\n    if (remapNeeded) {\n      const n = this.textures.length;\n      for (let texIdx = 0; texIdx < n; ++texIdx) {\n        const texture = this.textures[texIdx];\n\n        this.texturesRemap[texIdx] = new this.ctx.neutrino.SubRect(\n          texture.orig.x / texture.baseTexture.realWidth,\n          1.0 - (texture.orig.y + texture.orig.height) / texture.baseTexture.realHeight,\n          texture.orig.width / texture.baseTexture.realWidth,\n          texture.orig.height / texture.baseTexture.realHeight\n        );\n      }\n    }\n  }\n}","class PhaserNeutrinoMaterials {\n\n  constructor(gl) {\n    this.gl = gl;\n\n    var vertexShaderSource = \"\\\n\t\t\tattribute vec3 aVertexPosition;\\\n\t\t\tattribute vec4 aColor; \\\n\t\t\tattribute vec2 aTextureCoord;\\\n\t\t\t\\\n\t\t\tuniform mat3 projectionMatrix;\\\n\t\t\tuniform vec2 scale;\\\n\t\t\t\\\n\t\t\tvarying vec4 vColor;\\\n\t\t\tvarying vec2 vTextureCoord;\\\n\t\t\t\\\n\t\t\tvoid main(void) {\\\n\t\t\t\tgl_Position = vec4((projectionMatrix * vec3(aVertexPosition.xy * scale, 1.0)).xy, 0, 1);\\\n\t\t\t\tvColor = vec4(aColor.rgb * aColor.a, aColor.a);\\\n\t\t\t\tvTextureCoord = vec2(aTextureCoord.x, 1.0 - aTextureCoord.y);\\\n\t\t\t}\";\n\n    var fragmentShaderSource = \"\\\n\t\t\tprecision mediump float;\\\n\t\t\t\\\n\t\t\tvarying vec4 vColor;\\\n\t\t\tvarying vec2 vTextureCoord;\\\n\t\t\\\n\t\t\tuniform sampler2D uSampler;\\\n\t\t\t\\\n\t\t\tvoid main(void) {\\\n\t\t\t\tgl_FragColor = vColor * texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\\\n\t\t\t}\";\n\n    var fragmentShaderMultiplySource = \"\\\n\t\t\tprecision mediump float;\\\n\t\t\t\\\n\t\t\tvarying vec4 vColor;\\\n\t\t\tvarying vec2 vTextureCoord;\\\n\t\t\t\\\n\t\t\tuniform sampler2D uSampler;\\\n\t\t\t\\\n\t\t\tvoid main(void)\\\n\t\t\t{\\\n\t\t\t\tvec4 texel = texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\\\n\t\t\t\tvec3 rgb = vColor.rgb * texel.rgb;\\\n\t\t\t\tfloat alpha = vColor.a * texel.a;\\\n\t\t\t\tgl_FragColor = vec4(mix(vec3(1, 1, 1), rgb, alpha), 1);\\\n\t\t\t}\";\n\n    this.shaderProgram = this._makeShaderProgram(vertexShaderSource, fragmentShaderSource);\n    this.shaderProgramMultiply = this._makeShaderProgram(vertexShaderSource, fragmentShaderMultiplySource);\n\n    this.pMatrix = null;\n    this.currentProgram = null;\n  }\n\n  shutdown() {\n  }\n\n  positionAttribLocation() {\n    return this.shaderProgram.vertexPositionAttribute;\n  }\n\n  colorAttribLocation() {\n    return this.shaderProgram.colorAttribute;\n  }\n\n  texAttribLocation(index) {\n    return this.shaderProgram.textureCoordAttribute[index];\n  }\n\n  setup(pMatrix, scale) {\n    this.pMatrix = pMatrix;\n    this.scale = scale.slice();\n    this.currentProgram = null;\n  }\n\n  switchToNormal(renderer) {\n    this._setProgram(this.shaderProgram);\n    renderer.blendModeManager.setBlendMode(0);\n  }\n\n  switchToAdd(renderer) {\n    this._setProgram(this.shaderProgram);\n    renderer.blendModeManager.setBlendMode(1);\n  }\n\n  switchToMultiply(renderer) {\n    this._setProgram(this.shaderProgramMultiply);\n    renderer.blendModeManager.setBlendMode(2);\n  }\n\n  _setProgram(program) {\n    var gl = this.gl;\n\n    if (program !== this.currentProgram) {\n      gl.useProgram(program);\n      // console.log('_setProgram',program.pMatrixUniform, this.pMatrix)\n      gl.uniformMatrix3fv(program.pMatrixUniform, false, this.pMatrix);\n      gl.uniform1i(program.samplerUniform, 0);\n      gl.uniform2f(program.scaleUniform, this.scale[0], this.scale[1]);\n\n      this.currentProgram = program;\n    }\n  }\n\n  _makeShaderProgram(vertexShaderSource, fragmentShaderSource) {\n    var gl = this.gl;\n\n    var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertexShader, vertexShaderSource);\n    gl.compileShader(vertexShader);\n\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      alert(gl.getShaderInfoLog(vertexShader));\n      return null;\n    }\n\n    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragmentShader, fragmentShaderSource);\n    gl.compileShader(fragmentShader);\n\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      alert(gl.getShaderInfoLog(fragmentShader));\n      return null;\n    }\n\n    var shaderProgram = gl.createProgram();\n    gl.attachShader(shaderProgram, vertexShader);\n    gl.attachShader(shaderProgram, fragmentShader);\n    gl.linkProgram(shaderProgram);\n\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n      alert(\"Could not initialise shaders\");\n    }\n\n    gl.useProgram(shaderProgram);\n\n    shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, \"aVertexPosition\");\n    shaderProgram.colorAttribute = gl.getAttribLocation(shaderProgram, \"aColor\");\n    shaderProgram.textureCoordAttribute = [gl.getAttribLocation(shaderProgram, \"aTextureCoord\")];\n\n    shaderProgram.pMatrixUniform = gl.getUniformLocation(shaderProgram, \"projectionMatrix\");\n    shaderProgram.samplerUniform = gl.getUniformLocation(shaderProgram, \"uSampler\");\n    shaderProgram.scaleUniform = gl.getUniformLocation(shaderProgram, \"scale\");\n\n    return shaderProgram;\n  }\n}","class PhaserNeutrinoRenderBuffers {\n  constructor(context, geometryBuffers) {\n    this.ctx = context;\n    this.gl = this.ctx.renderer.gl;\n\n    this.positions = null;\n    this.colors = null;\n    this.texCoords = [];\n    this.maxNumVertices = 0;\n    this.numVertices = 0;\n    this.indices = null;\n\n    this.renderCalls = [];\n    this.maxNumRenderCalls = 0;\n    this.numRenderCalls = 0;\n  }\n\n  initialize(maxNumVertices, texChannels, indices, maxNumRenderCalls) {\n    var gl = this.gl;\n\n    this.positions = new Float32Array(new ArrayBuffer(4 * maxNumVertices * 3));\n    this.colors = new Uint8Array(new ArrayBuffer(4 * maxNumVertices));\n    this.texCoords = [];\n    for (var texChannel = 0; texChannel < texChannels.length; ++texChannel) {\n      this.texCoords[texChannel] = new Float32Array(new ArrayBuffer(4 * maxNumVertices * texChannels[texChannel]));\n      this.texCoords[texChannel].numComponents = texChannels[texChannel];\n    }\n    this.maxNumVertices = maxNumVertices;\n\n    this.indices = new Uint16Array(new ArrayBuffer(2 * indices.length));\n    this.indices.set(indices, 0);\n\n    this.maxNumRenderCalls = maxNumRenderCalls;\n\n    this.positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this.positions, gl.DYNAMIC_DRAW);\n\n    this.colorBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, this.colors, gl.DYNAMIC_DRAW);\n\n    this.texBuffers = [];\n    for (var texIndex = 0; texIndex < this.texCoords.length; ++texIndex) {\n      var buffer = gl.createBuffer();\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferData(gl.ARRAY_BUFFER, this.texCoords[texIndex], gl.DYNAMIC_DRAW);\n      this.texBuffers.push(buffer);\n    }\n\n    this.indicesBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\n  }\n\n  pushVertex(vertex) {\n    this.positions.set(vertex.position, this.numVertices * 3);\n    this.colors.set(vertex.color, this.numVertices * 4);\n\n    for (var texIndex = 0; texIndex < vertex.texCoords.length; ++texIndex) {\n      this.texCoords[texIndex].set(vertex.texCoords[texIndex],\n        this.numVertices * this.texCoords[texIndex].numComponents);\n    }\n\n    ++this.numVertices;\n  }\n\n  pushRenderCall(rc) {\n\n    if (this.numRenderCalls >= this.renderCalls.length)\n      this.renderCalls.push(Object.assign({}, rc));\n    else\n      Object.assign(this.renderCalls[this.numRenderCalls], rc);\n\n    ++this.numRenderCalls;\n  }\n\n  cleanup() {\n    this.numVertices = 0;\n    this.numRenderCalls = 0;\n  }\n\n  updateGlBuffers() {\n    var gl = this.gl;\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.positions, 0, this.numVertices * 3);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);\n    gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.colors, 0, this.numVertices * 4);\n\n    this.texBuffers.forEach(function (buffer, index) {\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.texCoords[index], 0, this.numVertices *\n        this.texCoords[index].numComponents);\n    }, this);\n  }\n\n  bind() {\n    var gl = this.gl;\n    var materials = this.ctx.materials;\n\n    {\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\n\n      gl.enableVertexAttribArray(materials.positionAttribLocation());\n      gl.vertexAttribPointer(materials.positionAttribLocation(), 3, gl.FLOAT, false, 0, 0);\n    }\n\n    {\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer);\n\n      gl.enableVertexAttribArray(materials.colorAttribLocation());\n      gl.vertexAttribPointer(materials.colorAttribLocation(), 4, gl.UNSIGNED_BYTE, true, 0, 0);\n    }\n\n    this.texBuffers.forEach(function (buffer, index) {\n\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n      gl.enableVertexAttribArray(materials.texAttribLocation(index));\n      gl.vertexAttribPointer(materials.texAttribLocation(index),\n        this.texCoords[index].numComponents, gl.FLOAT, false, 0, 0);\n\n    }, this);\n\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n  }\n\n  shutdown() {\n    var gl = this.gl;\n\n    gl.deleteBuffer(this.positionBuffer);\n    gl.deleteBuffer(this.colorBuffer);\n\n    this.texBuffers.forEach(function (buffer) {\n      gl.deleteBuffer(buffer);\n    }, this);\n  }\n}"]}